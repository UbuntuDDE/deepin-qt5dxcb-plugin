{"Filepath":"src/dnativesettings.h","Functions":[{"Uniquefunname":"public DNativeSettings(QObject * base,DPlatformSettings * settings,bool global_settings)","Funname":"DNativeSettings","Returntype":"public","Args":"QObject * base,DPlatformSettings * settings,bool global_settings"},{"Uniquefunname":"int createProperty(const char *,const char *)","Funname":"createProperty","Returntype":"int","Args":"const char *,const char *"},{"Uniquefunname":"QByteArray getSettingsProperty(QObject * base)","Funname":"getSettingsProperty","Returntype":"QByteArray","Args":"QObject * base"},{"Uniquefunname":"private init(const QMetaObject * meta_object)","Funname":"init","Returntype":"private","Args":"const QMetaObject * meta_object"},{"Uniquefunname":"bool isRelaySignal()","Funname":"isRelaySignal","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"int metaCall(QMetaObject::Call,int _id,void **)","Funname":"metaCall","Returntype":"int","Args":"QMetaObject::Call,int _id,void **"},{"Uniquefunname":"void onPropertyChanged(const QByteArray \u0026 name,const QVariant \u0026 property,DNativeSettings * handle)","Funname":"onPropertyChanged","Returntype":"void","Args":"const QByteArray \u0026 name,const QVariant \u0026 property,DNativeSettings * handle"},{"Uniquefunname":"void onSignal(const QByteArray \u0026 signal,qint32 data1,qint32 data2,DNativeSettings * handle)","Funname":"onSignal","Returntype":"void","Args":"const QByteArray \u0026 signal,qint32 data1,qint32 data2,DNativeSettings * handle"},{"Uniquefunname":" ~DNativeSettings()","Funname":"~DNativeSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/dplatformsettings.h","Functions":[{"Uniquefunname":"virtual bool contains(const QByteArray \u0026 property)","Funname":"contains","Returntype":"virtual bool","Args":"const QByteArray \u0026 property"},{"Uniquefunname":"virtual void emitSignal(const QByteArray \u0026 signal,qint32 data1,qint32 data2)","Funname":"emitSignal","Returntype":"virtual void","Args":"const QByteArray \u0026 signal,qint32 data1,qint32 data2"},{"Uniquefunname":"void handleNotify(const QByteArray \u0026 signal,qint32 data1,qint32 data2)","Funname":"handleNotify","Returntype":"void","Args":"const QByteArray \u0026 signal,qint32 data1,qint32 data2"},{"Uniquefunname":"protected handlePropertyChanged(const QByteArray \u0026 property,const QVariant \u0026 value)","Funname":"handlePropertyChanged","Returntype":"protected","Args":"const QByteArray \u0026 property,const QVariant \u0026 value"},{"Uniquefunname":"virtual bool initialized()","Funname":"initialized","Returntype":"virtual bool","Args":""},{"Uniquefunname":"virtual bool isEmpty()","Funname":"isEmpty","Returntype":"virtual bool","Args":""},{"Uniquefunname":"void registerCallback(PropertyChangeFunc func,void * handle)","Funname":"registerCallback","Returntype":"void","Args":"PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void registerSignalCallback(SignalFunc func,void * handle)","Funname":"registerSignalCallback","Returntype":"void","Args":"SignalFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"void removeSignalCallback(void * handle)","Funname":"removeSignalCallback","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"virtual void setSetting(const QByteArray \u0026 property,const QVariant \u0026 value)","Funname":"setSetting","Returntype":"virtual void","Args":"const QByteArray \u0026 property,const QVariant \u0026 value"},{"Uniquefunname":"virtual QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"virtual QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":"virtual QByteArrayList settingKeys()","Funname":"settingKeys","Returntype":"virtual QByteArrayList","Args":""},{"Uniquefunname":"public ~DPlatformSettings()","Funname":"~DPlatformSettings","Returntype":"public","Args":""}],"Records":[{"Name":"struct:Callback","Fields":["PropertyChangeFunc","void *"]},{"Name":"struct:SignalCallback","Fields":["SignalFunc","void *"]}]}
{"Filepath":"src/dxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(DXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"DXcbXSettings"},{"Uniquefunname":"void clearSettings(xcb_window_t setting_window)","Funname":"clearSettings","Returntype":"void","Args":"xcb_window_t setting_window"},{"Uniquefunname":"bool contains(const QByteArray \u0026 property)","Funname":"contains","Returntype":"bool","Args":"const QByteArray \u0026 property"},{"Uniquefunname":"void emitSignal(xcb_connection_t * conn,xcb_window_t window,xcb_atom_t type,const QByteArray \u0026 signal,qint32 data1,qint32 data2)","Funname":"emitSignal","Returntype":"void","Args":"xcb_connection_t * conn,xcb_window_t window,xcb_atom_t type,const QByteArray \u0026 signal,qint32 data1,qint32 data2"},{"Uniquefunname":"void emitSignal(const QByteArray \u0026 signal,qint32 data1,qint32 data2)","Funname":"emitSignal","Returntype":"void","Args":"const QByteArray \u0026 signal,qint32 data1,qint32 data2"},{"Uniquefunname":"bool handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"bool","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"bool handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallback(PropertyChangeFunc func,void * handle)","Funname":"registerCallback","Returntype":"void","Args":"PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void registerSignalCallback(SignalFunc func,void * handle)","Funname":"registerSignalCallback","Returntype":"void","Args":"SignalFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"void removeSignalCallback(void * handle)","Funname":"removeSignalCallback","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"void setSetting(const QByteArray \u0026 property,const QVariant \u0026 value)","Funname":"setSetting","Returntype":"void","Args":"const QByteArray \u0026 property,const QVariant \u0026 value"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":"QByteArrayList settingKeys()","Funname":"settingKeys","Returntype":"QByteArrayList","Args":""},{"Uniquefunname":" ~DXcbXSettings()","Funname":"~DXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/global.h","Functions":[{"Uniquefunname":" DEFINE_CONST_CHAR(ProcessId)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"ProcessId"},{"Uniquefunname":" DEFINE_CONST_CHAR(WmClass)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"WmClass"},{"Uniquefunname":" DEFINE_CONST_CHAR(WmNetDesktop)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"WmNetDesktop"},{"Uniquefunname":" DEFINE_CONST_CHAR(WmWindowTypes)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"WmWindowTypes"},{"Uniquefunname":" DEFINE_CONST_CHAR(autoInputMaskByClipPath)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"autoInputMaskByClipPath"},{"Uniquefunname":" DEFINE_CONST_CHAR(borderColor)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"borderColor"},{"Uniquefunname":" DEFINE_CONST_CHAR(borderWidth)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"borderWidth"},{"Uniquefunname":" DEFINE_CONST_CHAR(buildNativeSettings)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"buildNativeSettings"},{"Uniquefunname":" DEFINE_CONST_CHAR(clearNativeSettings)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"clearNativeSettings"},{"Uniquefunname":" DEFINE_CONST_CHAR(clientLeader)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"clientLeader"},{"Uniquefunname":" DEFINE_CONST_CHAR(clipPath)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"clipPath"},{"Uniquefunname":" DEFINE_CONST_CHAR(connectHasBlurWindowChanged)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"connectHasBlurWindowChanged"},{"Uniquefunname":" DEFINE_CONST_CHAR(connectHasCompositeChanged)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"connectHasCompositeChanged"},{"Uniquefunname":" DEFINE_CONST_CHAR(connectHasNoTitlebarChanged)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"connectHasNoTitlebarChanged"},{"Uniquefunname":" DEFINE_CONST_CHAR(connectWindowListChanged)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"connectWindowListChanged"},{"Uniquefunname":" DEFINE_CONST_CHAR(connectWindowManagerChangedSignal)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"connectWindowManagerChangedSignal"},{"Uniquefunname":" DEFINE_CONST_CHAR(connectWindowMotifWMHintsChanged)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"connectWindowMotifWMHintsChanged"},{"Uniquefunname":" DEFINE_CONST_CHAR(createGroupWindow)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"createGroupWindow"},{"Uniquefunname":" DEFINE_CONST_CHAR(destoryGroupWindow)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"destoryGroupWindow"},{"Uniquefunname":" DEFINE_CONST_CHAR(disableOverrideCursor)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"disableOverrideCursor"},{"Uniquefunname":" DEFINE_CONST_CHAR(enableBlurWindow)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"enableBlurWindow"},{"Uniquefunname":" DEFINE_CONST_CHAR(enableDxcb)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"enableDxcb"},{"Uniquefunname":" DEFINE_CONST_CHAR(enableSystemMove)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"enableSystemMove"},{"Uniquefunname":" DEFINE_CONST_CHAR(enableSystemResize)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"enableSystemResize"},{"Uniquefunname":" DEFINE_CONST_CHAR(frameMargins)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"frameMargins"},{"Uniquefunname":" DEFINE_CONST_CHAR(frameMask)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"frameMask"},{"Uniquefunname":" DEFINE_CONST_CHAR(getCurrentWorkspaceWindows)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"getCurrentWorkspaceWindows"},{"Uniquefunname":" DEFINE_CONST_CHAR(getMWMDecorations)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"getMWMDecorations"},{"Uniquefunname":" DEFINE_CONST_CHAR(getMWMFunctions)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"getMWMFunctions"},{"Uniquefunname":" DEFINE_CONST_CHAR(getWindows)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"getWindows"},{"Uniquefunname":" DEFINE_CONST_CHAR(groupLeader)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"groupLeader"},{"Uniquefunname":" DEFINE_CONST_CHAR(hasBlurWindow)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"hasBlurWindow"},{"Uniquefunname":" DEFINE_CONST_CHAR(hasComposite)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"hasComposite"},{"Uniquefunname":" DEFINE_CONST_CHAR(hasNoTitlebar)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"hasNoTitlebar"},{"Uniquefunname":" DEFINE_CONST_CHAR(hasWindowAlpha)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"hasWindowAlpha"},{"Uniquefunname":" DEFINE_CONST_CHAR(inputEventSourceDevice)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"inputEventSourceDevice"},{"Uniquefunname":" DEFINE_CONST_CHAR(isEnableDxcb)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"isEnableDxcb"},{"Uniquefunname":" DEFINE_CONST_CHAR(isEnableNoTitlebar)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"isEnableNoTitlebar"},{"Uniquefunname":" DEFINE_CONST_CHAR(netWmStates)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"netWmStates"},{"Uniquefunname":" DEFINE_CONST_CHAR(noTitlebar)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"noTitlebar"},{"Uniquefunname":" DEFINE_CONST_CHAR(pluginVersion)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"pluginVersion"},{"Uniquefunname":" DEFINE_CONST_CHAR(popupSystemWindowMenu)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"popupSystemWindowMenu"},{"Uniquefunname":" DEFINE_CONST_CHAR(redirectContent)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"redirectContent"},{"Uniquefunname":" DEFINE_CONST_CHAR(setEnableNoTitlebar)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"setEnableNoTitlebar"},{"Uniquefunname":" DEFINE_CONST_CHAR(setMWMDecorations)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"setMWMDecorations"},{"Uniquefunname":" DEFINE_CONST_CHAR(setMWMFunctions)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"setMWMFunctions"},{"Uniquefunname":" DEFINE_CONST_CHAR(setWindowGroup)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"setWindowGroup"},{"Uniquefunname":" DEFINE_CONST_CHAR(setWindowProperty)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"setWindowProperty"},{"Uniquefunname":" DEFINE_CONST_CHAR(setWmBlurWindowBackgroundArea)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"setWmBlurWindowBackgroundArea"},{"Uniquefunname":" DEFINE_CONST_CHAR(setWmBlurWindowBackgroundMaskImage)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"setWmBlurWindowBackgroundMaskImage"},{"Uniquefunname":" DEFINE_CONST_CHAR(setWmBlurWindowBackgroundPathList)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"setWmBlurWindowBackgroundPathList"},{"Uniquefunname":" DEFINE_CONST_CHAR(shadowColor)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"shadowColor"},{"Uniquefunname":" DEFINE_CONST_CHAR(shadowOffset)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"shadowOffset"},{"Uniquefunname":" DEFINE_CONST_CHAR(shadowRadius)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"shadowRadius"},{"Uniquefunname":" DEFINE_CONST_CHAR(translucentBackground)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"translucentBackground"},{"Uniquefunname":" DEFINE_CONST_CHAR(useDxcb)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"useDxcb"},{"Uniquefunname":" DEFINE_CONST_CHAR(useNativeDxcb)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"useNativeDxcb"},{"Uniquefunname":" DEFINE_CONST_CHAR(userWindowMaximumSize)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"userWindowMaximumSize"},{"Uniquefunname":" DEFINE_CONST_CHAR(userWindowMinimumSize)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"userWindowMinimumSize"},{"Uniquefunname":" DEFINE_CONST_CHAR(windowBlurAreas)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"windowBlurAreas"},{"Uniquefunname":" DEFINE_CONST_CHAR(windowBlurPaths)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"windowBlurPaths"},{"Uniquefunname":" DEFINE_CONST_CHAR(windowFromPoint)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"windowFromPoint"},{"Uniquefunname":" DEFINE_CONST_CHAR(windowManagerName)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"windowManagerName"},{"Uniquefunname":" DEFINE_CONST_CHAR(windowRadius)","Funname":"DEFINE_CONST_CHAR","Returntype":"","Args":"windowRadius"}],"Records":[{"Name":"enum:DeviceType","Fields":["MouseDevice","TouchapdDevice","UnknowDevice"]}]}
{"Filepath":"src/vtablehook.h","Functions":[{"Uniquefunname":"void autoCleanVtable(const void * obj)","Funname":"autoCleanVtable","Returntype":"void","Args":"const void * obj"},{"Uniquefunname":"bool ensureVtable(const void * obj,std::function\u003cvoid (void)\u003e destoryObjFun)","Funname":"ensureVtable","Returntype":"bool","Args":"const void * obj,std::function\u003cvoid (void)\u003e destoryObjFun"},{"Uniquefunname":"bool forceWriteMemory(void * adr,const void * data,size_t length)","Funname":"forceWriteMemory","Returntype":"bool","Args":"void * adr,const void * data,size_t length"},{"Uniquefunname":"int getDestructFunIndex(quintptr ** obj,std::function\u003cvoid (void)\u003e destoryObjFun)","Funname":"getDestructFunIndex","Returntype":"int","Args":"quintptr ** obj,std::function\u003cvoid (void)\u003e destoryObjFun"},{"Uniquefunname":"constexpr const QObject * getQObject(...)","Funname":"getQObject","Returntype":"constexpr const QObject *","Args":"..."},{"Uniquefunname":"constexpr const QObject * getQObject(const QObject * obj)","Funname":"getQObject","Returntype":"constexpr const QObject *","Args":"const QObject * obj"},{"Uniquefunname":"    static quintptr *getVtableOfClass()","Funname":"getVtableOfClass","Returntype":"template\u003ctypename T\u003e quintptr *","Args":""},{"Uniquefunname":"    static inline quintptr *getVtableOfObject(const void *obj)","Funname":"getVtableOfObject","Returntype":"public","Args":"const void * obj"},{"Uniquefunname":"static inline int getVtableSize(quintptr **obj)","Funname":"getVtableSize","Returntype":"int","Args":"quintptr ** obj"},{"Uniquefunname":"bool hasVtable(const void * obj)","Funname":"hasVtable","Returntype":"bool","Args":"const void * obj"},{"Uniquefunname":"quintptr originalFun(const void * obj,quintptr functionOffset)","Funname":"originalFun","Returntype":"quintptr","Args":"const void * obj,quintptr functionOffset"},{"Uniquefunname":"quintptr resetVfptrFun(const void * obj,quintptr functionOffset)","Funname":"resetVfptrFun","Returntype":"quintptr","Args":"const void * obj,quintptr functionOffset"},{"Uniquefunname":"void resetVtable(const void * obj)","Funname":"resetVtable","Returntype":"void","Args":"const void * obj"},{"Uniquefunname":"QFunctionPointer resolve(const char * symbol)","Funname":"resolve","Returntype":"QFunctionPointer","Args":"const char * symbol"},{"Uniquefunname":"static inline quintptr toQuintptr(void *ptr)","Funname":"toQuintptr","Returntype":"DPP_BEGIN_NAMESPACE quintptr","Args":"void * ptr"}],"Records":null}
{"Filepath":"wayland/dwayland/dwaylandintegration.h","Functions":[{"Uniquefunname":" DWaylandIntegration()","Funname":"DWaylandIntegration","Returntype":"","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"    static DWaylandIntegration *instance()","Funname":"instance","Returntype":"public","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""}],"Records":null}
{"Filepath":"wayland/dwayland/dwaylandinterfacehook.h","Functions":[{"Uniquefunname":"bool buildNativeSettings(QObject * object,quint32 settingWindow)","Funname":"buildNativeSettings","Returntype":"bool","Args":"QObject * object,quint32 settingWindow"},{"Uniquefunname":"void clearNativeSettings(quint32 settingWindow)","Funname":"clearNativeSettings","Returntype":"void","Args":"quint32 settingWindow"},{"Uniquefunname":"DXcbXSettings * globalSettings()","Funname":"globalSettings","Returntype":"DXcbXSettings *","Args":""},{"Uniquefunname":"public init()","Funname":"init","Returntype":"public","Args":""},{"Uniquefunname":"QFunctionPointer platformFunction(QPlatformNativeInterface * interface,const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"QPlatformNativeInterface * interface,const QByteArray \u0026 function"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwayland-hardware-integration.h","Functions":[{"Uniquefunname":"void handle_client_backend(void * data,struct::qt_hardware_integration * object,const char * name)","Funname":"handle_client_backend","Returntype":"void","Args":"void * data,struct::qt_hardware_integration * object,const char * name"},{"Uniquefunname":"void handle_server_backend(void * data,struct::qt_hardware_integration * object,const char * name)","Funname":"handle_server_backend","Returntype":"void","Args":"void * data,struct::qt_hardware_integration * object,const char * name"},{"Uniquefunname":"protected hardware_integration_client_backend(const QString \u0026 name)","Funname":"hardware_integration_client_backend","Returntype":"protected","Args":"const QString \u0026 name"},{"Uniquefunname":"virtual void hardware_integration_server_backend(const QString \u0026 name)","Funname":"hardware_integration_server_backend","Returntype":"virtual void","Args":"const QString \u0026 name"},{"Uniquefunname":"void init(struct::qt_hardware_integration * object)","Funname":"init","Returntype":"void","Args":"struct::qt_hardware_integration * object"},{"Uniquefunname":"void init(struct::wl_registry * registry,int id,int version)","Funname":"init","Returntype":"void","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"private init_listener()","Funname":"init_listener","Returntype":"private","Args":""},{"Uniquefunname":"const struct interface()","Funname":"interface","Returntype":"const struct","Args":""},{"Uniquefunname":"bool isInitialized()","Funname":"isInitialized","Returntype":"bool","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" qt_hardware_integration()","Funname":"qt_hardware_integration","Returntype":"","Args":""},{"Uniquefunname":" qt_hardware_integration(struct::qt_hardware_integration * object)","Funname":"qt_hardware_integration","Returntype":"","Args":"struct::qt_hardware_integration * object"},{"Uniquefunname":"public qt_hardware_integration(struct::wl_registry * registry,int id,int version)","Funname":"qt_hardware_integration","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"virtual ~qt_hardware_integration()","Funname":"~qt_hardware_integration","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwayland-qt-key-unstable-v1.h","Functions":[{"Uniquefunname":"void handle_key(void * data,struct::zqt_key_v1 * object,struct::wl_surface * surface,uint32_t time,uint32_t type,uint32_t key,uint32_t modifiers,uint32_t nativeScanCode,uint32_t nativeVirtualKey,uint32_t nativeModifiers,const char * text,uint32_t autorepeat,uint32_t count)","Funname":"handle_key","Returntype":"void","Args":"void * data,struct::zqt_key_v1 * object,struct::wl_surface * surface,uint32_t time,uint32_t type,uint32_t key,uint32_t modifiers,uint32_t nativeScanCode,uint32_t nativeVirtualKey,uint32_t nativeModifiers,const char * text,uint32_t autorepeat,uint32_t count"},{"Uniquefunname":"void init(struct::wl_registry * registry,int id,int version)","Funname":"init","Returntype":"void","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"void init(struct::zqt_key_v1 * object)","Funname":"init","Returntype":"void","Args":"struct::zqt_key_v1 * object"},{"Uniquefunname":"private init_listener()","Funname":"init_listener","Returntype":"private","Args":""},{"Uniquefunname":"const struct interface()","Funname":"interface","Returntype":"const struct","Args":""},{"Uniquefunname":"bool isInitialized()","Funname":"isInitialized","Returntype":"bool","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" zqt_key_v1()","Funname":"zqt_key_v1","Returntype":"","Args":""},{"Uniquefunname":"public zqt_key_v1(struct::wl_registry * registry,int id,int version)","Funname":"zqt_key_v1","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" zqt_key_v1(struct::zqt_key_v1 * object)","Funname":"zqt_key_v1","Returntype":"","Args":"struct::zqt_key_v1 * object"},{"Uniquefunname":"protected zqt_key_v1_key(struct::wl_surface * surface,uint32_t time,uint32_t type,uint32_t key,uint32_t modifiers,uint32_t nativeScanCode,uint32_t nativeVirtualKey,uint32_t nativeModifiers,const QString \u0026 text,uint32_t autorepeat,uint32_t count)","Funname":"zqt_key_v1_key","Returntype":"protected","Args":"struct::wl_surface * surface,uint32_t time,uint32_t type,uint32_t key,uint32_t modifiers,uint32_t nativeScanCode,uint32_t nativeVirtualKey,uint32_t nativeModifiers,const QString \u0026 text,uint32_t autorepeat,uint32_t count"},{"Uniquefunname":"virtual ~zqt_key_v1()","Funname":"~zqt_key_v1","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwayland-qt-windowmanager.h","Functions":[{"Uniquefunname":"void handle_hints(void * data,struct::qt_windowmanager * object,int32_t show_is_fullscreen)","Funname":"handle_hints","Returntype":"void","Args":"void * data,struct::qt_windowmanager * object,int32_t show_is_fullscreen"},{"Uniquefunname":"void handle_quit(void * data,struct::qt_windowmanager * object)","Funname":"handle_quit","Returntype":"void","Args":"void * data,struct::qt_windowmanager * object"},{"Uniquefunname":"void init(struct::qt_windowmanager * object)","Funname":"init","Returntype":"void","Args":"struct::qt_windowmanager * object"},{"Uniquefunname":"void init(struct::wl_registry * registry,int id,int version)","Funname":"init","Returntype":"void","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"private init_listener()","Funname":"init_listener","Returntype":"private","Args":""},{"Uniquefunname":"const struct interface()","Funname":"interface","Returntype":"const struct","Args":""},{"Uniquefunname":"bool isInitialized()","Funname":"isInitialized","Returntype":"bool","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":"void open_url(uint32_t remaining,const QString \u0026 url)","Funname":"open_url","Returntype":"void","Args":"uint32_t remaining,const QString \u0026 url"},{"Uniquefunname":" qt_windowmanager()","Funname":"qt_windowmanager","Returntype":"","Args":""},{"Uniquefunname":" qt_windowmanager(struct::qt_windowmanager * object)","Funname":"qt_windowmanager","Returntype":"","Args":"struct::qt_windowmanager * object"},{"Uniquefunname":"public qt_windowmanager(struct::wl_registry * registry,int id,int version)","Funname":"qt_windowmanager","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"protected windowmanager_hints(int32_t show_is_fullscreen)","Funname":"windowmanager_hints","Returntype":"protected","Args":"int32_t show_is_fullscreen"},{"Uniquefunname":"virtual void windowmanager_quit()","Funname":"windowmanager_quit","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual ~qt_windowmanager()","Funname":"~qt_windowmanager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwayland-server-buffer-extension.h","Functions":[{"Uniquefunname":"void init(struct::qt_server_buffer * object)","Funname":"init","Returntype":"void","Args":"struct::qt_server_buffer * object"},{"Uniquefunname":"void init(struct::wl_registry * registry,int id,int version)","Funname":"init","Returntype":"void","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"const struct interface()","Funname":"interface","Returntype":"const struct","Args":""},{"Uniquefunname":"bool isInitialized()","Funname":"isInitialized","Returntype":"bool","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" qt_server_buffer()","Funname":"qt_server_buffer","Returntype":"","Args":""},{"Uniquefunname":" qt_server_buffer(struct::qt_server_buffer * object)","Funname":"qt_server_buffer","Returntype":"","Args":"struct::qt_server_buffer * object"},{"Uniquefunname":"public qt_server_buffer(struct::wl_registry * registry,int id,int version)","Funname":"qt_server_buffer","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"virtual ~qt_server_buffer()","Funname":"~qt_server_buffer","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwayland-surface-extension.h","Functions":[{"Uniquefunname":"virtual void extended_surface_close()","Funname":"extended_surface_close","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected extended_surface_onscreen_visibility(int32_t visible)","Funname":"extended_surface_onscreen_visibility","Returntype":"protected","Args":"int32_t visible"},{"Uniquefunname":"virtual void extended_surface_set_generic_property(const QString \u0026 name,wl_array * value)","Funname":"extended_surface_set_generic_property","Returntype":"virtual void","Args":"const QString \u0026 name,wl_array * value"},{"Uniquefunname":" get_extended_surface(struct::wl_surface * surface)","Funname":"get_extended_surface","Returntype":"","Args":"struct::wl_surface * surface"},{"Uniquefunname":"void handle_close(void * data,struct::qt_extended_surface * object)","Funname":"handle_close","Returntype":"void","Args":"void * data,struct::qt_extended_surface * object"},{"Uniquefunname":"void handle_onscreen_visibility(void * data,struct::qt_extended_surface * object,int32_t visible)","Funname":"handle_onscreen_visibility","Returntype":"void","Args":"void * data,struct::qt_extended_surface * object,int32_t visible"},{"Uniquefunname":"void handle_set_generic_property(void * data,struct::qt_extended_surface * object,const char * name,wl_array * value)","Funname":"handle_set_generic_property","Returntype":"void","Args":"void * data,struct::qt_extended_surface * object,const char * name,wl_array * value"},{"Uniquefunname":"void init(struct::qt_extended_surface * object)","Funname":"init","Returntype":"void","Args":"struct::qt_extended_surface * object"},{"Uniquefunname":"void init(struct::qt_surface_extension * object)","Funname":"init","Returntype":"void","Args":"struct::qt_surface_extension * object"},{"Uniquefunname":"void init(struct::wl_registry * registry,int id,int version)","Funname":"init","Returntype":"void","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"private init_listener()","Funname":"init_listener","Returntype":"private","Args":""},{"Uniquefunname":"const struct interface()","Funname":"interface","Returntype":"const struct","Args":""},{"Uniquefunname":"bool isInitialized()","Funname":"isInitialized","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" qt_extended_surface()","Funname":"qt_extended_surface","Returntype":"","Args":""},{"Uniquefunname":" qt_extended_surface(struct::qt_extended_surface * object)","Funname":"qt_extended_surface","Returntype":"","Args":"struct::qt_extended_surface * object"},{"Uniquefunname":"public qt_extended_surface(struct::wl_registry * registry,int id,int version)","Funname":"qt_extended_surface","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" qt_surface_extension()","Funname":"qt_surface_extension","Returntype":"","Args":""},{"Uniquefunname":" qt_surface_extension(struct::qt_surface_extension * object)","Funname":"qt_surface_extension","Returntype":"","Args":"struct::qt_surface_extension * object"},{"Uniquefunname":"public qt_surface_extension(struct::wl_registry * registry,int id,int version)","Funname":"qt_surface_extension","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"void set_content_orientation_mask(int32_t orientation)","Funname":"set_content_orientation_mask","Returntype":"void","Args":"int32_t orientation"},{"Uniquefunname":"void set_window_flags(int32_t flags)","Funname":"set_window_flags","Returntype":"void","Args":"int32_t flags"},{"Uniquefunname":"void update_generic_property(const QString \u0026 name,const QByteArray \u0026 value)","Funname":"update_generic_property","Returntype":"void","Args":"const QString \u0026 name,const QByteArray \u0026 value"},{"Uniquefunname":"virtual ~qt_extended_surface()","Funname":"~qt_extended_surface","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~qt_surface_extension()","Funname":"~qt_surface_extension","Returntype":"virtual","Args":""}],"Records":[{"Name":"enum:orientation","Fields":["orientation_InvertedLandscapeOrientation","orientation_InvertedPortraitOrientation","orientation_LandscapeOrientation","orientation_PortraitOrientation","orientation_PrimaryOrientation"]},{"Name":"enum:windowflag","Fields":["windowflag_BypassWindowManager","windowflag_OverridesSystemGestures","windowflag_StaysOnTop"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwayland-text-input-unstable-v2.h","Functions":[{"Uniquefunname":"void destroy()","Funname":"destroy","Returntype":"void","Args":""},{"Uniquefunname":"void disable(struct::wl_surface * surface)","Funname":"disable","Returntype":"void","Args":"struct::wl_surface * surface"},{"Uniquefunname":"void enable(struct::wl_surface * surface)","Funname":"enable","Returntype":"void","Args":"struct::wl_surface * surface"},{"Uniquefunname":" get_text_input(struct::wl_seat * seat)","Funname":"get_text_input","Returntype":"","Args":"struct::wl_seat * seat"},{"Uniquefunname":"void handle_commit_string(void * data,struct::zwp_text_input_v2 * object,const char * text)","Funname":"handle_commit_string","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,const char * text"},{"Uniquefunname":"void handle_configure_surrounding_text(void * data,struct::zwp_text_input_v2 * object,int32_t before_cursor,int32_t after_cursor)","Funname":"handle_configure_surrounding_text","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,int32_t before_cursor,int32_t after_cursor"},{"Uniquefunname":"void handle_cursor_position(void * data,struct::zwp_text_input_v2 * object,int32_t index,int32_t anchor)","Funname":"handle_cursor_position","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,int32_t index,int32_t anchor"},{"Uniquefunname":"void handle_delete_surrounding_text(void * data,struct::zwp_text_input_v2 * object,uint32_t before_length,uint32_t after_length)","Funname":"handle_delete_surrounding_text","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,uint32_t before_length,uint32_t after_length"},{"Uniquefunname":"void handle_enter(void * data,struct::zwp_text_input_v2 * object,uint32_t serial,struct::wl_surface * surface)","Funname":"handle_enter","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,uint32_t serial,struct::wl_surface * surface"},{"Uniquefunname":"void handle_input_method_changed(void * data,struct::zwp_text_input_v2 * object,uint32_t serial,uint32_t flags)","Funname":"handle_input_method_changed","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,uint32_t serial,uint32_t flags"},{"Uniquefunname":"void handle_input_panel_state(void * data,struct::zwp_text_input_v2 * object,uint32_t state,int32_t x,int32_t y,int32_t width,int32_t height)","Funname":"handle_input_panel_state","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,uint32_t state,int32_t x,int32_t y,int32_t width,int32_t height"},{"Uniquefunname":"void handle_keysym(void * data,struct::zwp_text_input_v2 * object,uint32_t time,uint32_t sym,uint32_t state,uint32_t modifiers)","Funname":"handle_keysym","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,uint32_t time,uint32_t sym,uint32_t state,uint32_t modifiers"},{"Uniquefunname":"void handle_language(void * data,struct::zwp_text_input_v2 * object,const char * language)","Funname":"handle_language","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,const char * language"},{"Uniquefunname":"void handle_leave(void * data,struct::zwp_text_input_v2 * object,uint32_t serial,struct::wl_surface * surface)","Funname":"handle_leave","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,uint32_t serial,struct::wl_surface * surface"},{"Uniquefunname":"void handle_modifiers_map(void * data,struct::zwp_text_input_v2 * object,wl_array * map)","Funname":"handle_modifiers_map","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,wl_array * map"},{"Uniquefunname":"void handle_preedit_cursor(void * data,struct::zwp_text_input_v2 * object,int32_t index)","Funname":"handle_preedit_cursor","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,int32_t index"},{"Uniquefunname":"void handle_preedit_string(void * data,struct::zwp_text_input_v2 * object,const char * text,const char * commit)","Funname":"handle_preedit_string","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,const char * text,const char * commit"},{"Uniquefunname":"void handle_preedit_styling(void * data,struct::zwp_text_input_v2 * object,uint32_t index,uint32_t length,uint32_t style)","Funname":"handle_preedit_styling","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,uint32_t index,uint32_t length,uint32_t style"},{"Uniquefunname":"void handle_text_direction(void * data,struct::zwp_text_input_v2 * object,uint32_t direction)","Funname":"handle_text_direction","Returntype":"void","Args":"void * data,struct::zwp_text_input_v2 * object,uint32_t direction"},{"Uniquefunname":"void hide_input_panel()","Funname":"hide_input_panel","Returntype":"void","Args":""},{"Uniquefunname":"void init(struct::wl_registry * registry,int id,int version)","Funname":"init","Returntype":"void","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"void init(struct::zwp_text_input_manager_v2 * object)","Funname":"init","Returntype":"void","Args":"struct::zwp_text_input_manager_v2 * object"},{"Uniquefunname":"void init(struct::zwp_text_input_v2 * object)","Funname":"init","Returntype":"void","Args":"struct::zwp_text_input_v2 * object"},{"Uniquefunname":"private init_listener()","Funname":"init_listener","Returntype":"private","Args":""},{"Uniquefunname":"const struct interface()","Funname":"interface","Returntype":"const struct","Args":""},{"Uniquefunname":"bool isInitialized()","Funname":"isInitialized","Returntype":"bool","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":"void set_content_type(uint32_t hint,uint32_t purpose)","Funname":"set_content_type","Returntype":"void","Args":"uint32_t hint,uint32_t purpose"},{"Uniquefunname":"void set_cursor_rectangle(int32_t x,int32_t y,int32_t width,int32_t height)","Funname":"set_cursor_rectangle","Returntype":"void","Args":"int32_t x,int32_t y,int32_t width,int32_t height"},{"Uniquefunname":"void set_preferred_language(const QString \u0026 language)","Funname":"set_preferred_language","Returntype":"void","Args":"const QString \u0026 language"},{"Uniquefunname":"void set_surrounding_text(const QString \u0026 text,int32_t cursor,int32_t anchor)","Funname":"set_surrounding_text","Returntype":"void","Args":"const QString \u0026 text,int32_t cursor,int32_t anchor"},{"Uniquefunname":"void show_input_panel()","Funname":"show_input_panel","Returntype":"void","Args":""},{"Uniquefunname":"void update_state(uint32_t serial,uint32_t reason)","Funname":"update_state","Returntype":"void","Args":"uint32_t serial,uint32_t reason"},{"Uniquefunname":" zwp_text_input_manager_v2()","Funname":"zwp_text_input_manager_v2","Returntype":"","Args":""},{"Uniquefunname":"public zwp_text_input_manager_v2(struct::wl_registry * registry,int id,int version)","Funname":"zwp_text_input_manager_v2","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" zwp_text_input_manager_v2(struct::zwp_text_input_manager_v2 * object)","Funname":"zwp_text_input_manager_v2","Returntype":"","Args":"struct::zwp_text_input_manager_v2 * object"},{"Uniquefunname":" zwp_text_input_v2()","Funname":"zwp_text_input_v2","Returntype":"","Args":""},{"Uniquefunname":"public zwp_text_input_v2(struct::wl_registry * registry,int id,int version)","Funname":"zwp_text_input_v2","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" zwp_text_input_v2(struct::zwp_text_input_v2 * object)","Funname":"zwp_text_input_v2","Returntype":"","Args":"struct::zwp_text_input_v2 * object"},{"Uniquefunname":"virtual void zwp_text_input_v2_commit_string(const QString \u0026 text)","Funname":"zwp_text_input_v2_commit_string","Returntype":"virtual void","Args":"const QString \u0026 text"},{"Uniquefunname":"virtual void zwp_text_input_v2_configure_surrounding_text(int32_t before_cursor,int32_t after_cursor)","Funname":"zwp_text_input_v2_configure_surrounding_text","Returntype":"virtual void","Args":"int32_t before_cursor,int32_t after_cursor"},{"Uniquefunname":"virtual void zwp_text_input_v2_cursor_position(int32_t index,int32_t anchor)","Funname":"zwp_text_input_v2_cursor_position","Returntype":"virtual void","Args":"int32_t index,int32_t anchor"},{"Uniquefunname":"virtual void zwp_text_input_v2_delete_surrounding_text(uint32_t before_length,uint32_t after_length)","Funname":"zwp_text_input_v2_delete_surrounding_text","Returntype":"virtual void","Args":"uint32_t before_length,uint32_t after_length"},{"Uniquefunname":"protected zwp_text_input_v2_enter(uint32_t serial,struct::wl_surface * surface)","Funname":"zwp_text_input_v2_enter","Returntype":"protected","Args":"uint32_t serial,struct::wl_surface * surface"},{"Uniquefunname":"virtual void zwp_text_input_v2_input_method_changed(uint32_t serial,uint32_t flags)","Funname":"zwp_text_input_v2_input_method_changed","Returntype":"virtual void","Args":"uint32_t serial,uint32_t flags"},{"Uniquefunname":"virtual void zwp_text_input_v2_input_panel_state(uint32_t state,int32_t x,int32_t y,int32_t width,int32_t height)","Funname":"zwp_text_input_v2_input_panel_state","Returntype":"virtual void","Args":"uint32_t state,int32_t x,int32_t y,int32_t width,int32_t height"},{"Uniquefunname":"virtual void zwp_text_input_v2_keysym(uint32_t time,uint32_t sym,uint32_t state,uint32_t modifiers)","Funname":"zwp_text_input_v2_keysym","Returntype":"virtual void","Args":"uint32_t time,uint32_t sym,uint32_t state,uint32_t modifiers"},{"Uniquefunname":"virtual void zwp_text_input_v2_language(const QString \u0026 language)","Funname":"zwp_text_input_v2_language","Returntype":"virtual void","Args":"const QString \u0026 language"},{"Uniquefunname":"virtual void zwp_text_input_v2_leave(uint32_t serial,struct::wl_surface * surface)","Funname":"zwp_text_input_v2_leave","Returntype":"virtual void","Args":"uint32_t serial,struct::wl_surface * surface"},{"Uniquefunname":"virtual void zwp_text_input_v2_modifiers_map(wl_array * map)","Funname":"zwp_text_input_v2_modifiers_map","Returntype":"virtual void","Args":"wl_array * map"},{"Uniquefunname":"virtual void zwp_text_input_v2_preedit_cursor(int32_t index)","Funname":"zwp_text_input_v2_preedit_cursor","Returntype":"virtual void","Args":"int32_t index"},{"Uniquefunname":"virtual void zwp_text_input_v2_preedit_string(const QString \u0026 text,const QString \u0026 commit)","Funname":"zwp_text_input_v2_preedit_string","Returntype":"virtual void","Args":"const QString \u0026 text,const QString \u0026 commit"},{"Uniquefunname":"virtual void zwp_text_input_v2_preedit_styling(uint32_t index,uint32_t length,uint32_t style)","Funname":"zwp_text_input_v2_preedit_styling","Returntype":"virtual void","Args":"uint32_t index,uint32_t length,uint32_t style"},{"Uniquefunname":"virtual void zwp_text_input_v2_text_direction(uint32_t direction)","Funname":"zwp_text_input_v2_text_direction","Returntype":"virtual void","Args":"uint32_t direction"},{"Uniquefunname":"virtual ~zwp_text_input_manager_v2()","Funname":"~zwp_text_input_manager_v2","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~zwp_text_input_v2()","Funname":"~zwp_text_input_v2","Returntype":"virtual","Args":""}],"Records":[{"Name":"enum:content_hint","Fields":["content_hint_auto_capitalization","content_hint_auto_completion","content_hint_auto_correction","content_hint_hidden_text","content_hint_latin","content_hint_lowercase","content_hint_multiline","content_hint_none","content_hint_sensitive_data","content_hint_titlecase","content_hint_uppercase"]},{"Name":"enum:content_purpose","Fields":["content_purpose_alpha","content_purpose_date","content_purpose_datetime","content_purpose_digits","content_purpose_email","content_purpose_name","content_purpose_normal","content_purpose_number","content_purpose_password","content_purpose_phone","content_purpose_terminal","content_purpose_time","content_purpose_url"]},{"Name":"enum:input_panel_visibility","Fields":["input_panel_visibility_hidden","input_panel_visibility_visible"]},{"Name":"enum:preedit_style","Fields":["preedit_style_active","preedit_style_default","preedit_style_highlight","preedit_style_inactive","preedit_style_incorrect","preedit_style_none","preedit_style_selection","preedit_style_underline"]},{"Name":"enum:text_direction","Fields":["text_direction_auto","text_direction_ltr","text_direction_rtl"]},{"Name":"enum:update_state","Fields":["update_state_change","update_state_enter","update_state_full","update_state_reset"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwayland-touch-extension.h","Functions":[{"Uniquefunname":"void dummy()","Funname":"dummy","Returntype":"void","Args":""},{"Uniquefunname":"void handle_configure(void * data,struct::qt_touch_extension * object,uint32_t flags)","Funname":"handle_configure","Returntype":"void","Args":"void * data,struct::qt_touch_extension * object,uint32_t flags"},{"Uniquefunname":"void handle_touch(void * data,struct::qt_touch_extension * object,uint32_t time,uint32_t id,uint32_t state,int32_t x,int32_t y,int32_t normalized_x,int32_t normalized_y,int32_t width,int32_t height,uint32_t pressure,int32_t velocity_x,int32_t velocity_y,uint32_t flags,wl_array * rawdata)","Funname":"handle_touch","Returntype":"void","Args":"void * data,struct::qt_touch_extension * object,uint32_t time,uint32_t id,uint32_t state,int32_t x,int32_t y,int32_t normalized_x,int32_t normalized_y,int32_t width,int32_t height,uint32_t pressure,int32_t velocity_x,int32_t velocity_y,uint32_t flags,wl_array * rawdata"},{"Uniquefunname":"void init(struct::qt_touch_extension * object)","Funname":"init","Returntype":"void","Args":"struct::qt_touch_extension * object"},{"Uniquefunname":"void init(struct::wl_registry * registry,int id,int version)","Funname":"init","Returntype":"void","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"private init_listener()","Funname":"init_listener","Returntype":"private","Args":""},{"Uniquefunname":"const struct interface()","Funname":"interface","Returntype":"const struct","Args":""},{"Uniquefunname":"bool isInitialized()","Funname":"isInitialized","Returntype":"bool","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" qt_touch_extension()","Funname":"qt_touch_extension","Returntype":"","Args":""},{"Uniquefunname":" qt_touch_extension(struct::qt_touch_extension * object)","Funname":"qt_touch_extension","Returntype":"","Args":"struct::qt_touch_extension * object"},{"Uniquefunname":"public qt_touch_extension(struct::wl_registry * registry,int id,int version)","Funname":"qt_touch_extension","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"virtual void touch_extension_configure(uint32_t flags)","Funname":"touch_extension_configure","Returntype":"virtual void","Args":"uint32_t flags"},{"Uniquefunname":"protected touch_extension_touch(uint32_t time,uint32_t id,uint32_t state,int32_t x,int32_t y,int32_t normalized_x,int32_t normalized_y,int32_t width,int32_t height,uint32_t pressure,int32_t velocity_x,int32_t velocity_y,uint32_t flags,wl_array * rawdata)","Funname":"touch_extension_touch","Returntype":"protected","Args":"uint32_t time,uint32_t id,uint32_t state,int32_t x,int32_t y,int32_t normalized_x,int32_t normalized_y,int32_t width,int32_t height,uint32_t pressure,int32_t velocity_x,int32_t velocity_y,uint32_t flags,wl_array * rawdata"},{"Uniquefunname":"virtual ~qt_touch_extension()","Funname":"~qt_touch_extension","Returntype":"virtual","Args":""}],"Records":[{"Name":"enum:flags","Fields":["flags_mouse_from_touch"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwayland-wayland.h","Functions":[{"Uniquefunname":"void accept(uint32_t serial,const QString \u0026 mime_type)","Funname":"accept","Returntype":"void","Args":"uint32_t serial,const QString \u0026 mime_type"},{"Uniquefunname":"void add(int32_t x,int32_t y,int32_t width,int32_t height)","Funname":"add","Returntype":"void","Args":"int32_t x,int32_t y,int32_t width,int32_t height"},{"Uniquefunname":"void attach(struct::wl_buffer * buffer,int32_t x,int32_t y)","Funname":"attach","Returntype":"void","Args":"struct::wl_buffer * buffer,int32_t x,int32_t y"},{"Uniquefunname":"void * bind(uint32_t name,const struct::wl_interface * interface,uint32_t version)","Funname":"bind","Returntype":"void *","Args":"uint32_t name,const struct::wl_interface * interface,uint32_t version"},{"Uniquefunname":"protected buffer_release()","Funname":"buffer_release","Returntype":"protected","Args":""},{"Uniquefunname":"protected callback_done(uint32_t callback_data)","Funname":"callback_done","Returntype":"protected","Args":"uint32_t callback_data"},{"Uniquefunname":"void commit()","Funname":"commit","Returntype":"void","Args":""},{"Uniquefunname":" create_buffer(int32_t offset,int32_t width,int32_t height,int32_t stride,uint32_t format)","Funname":"create_buffer","Returntype":"","Args":"int32_t offset,int32_t width,int32_t height,int32_t stride,uint32_t format"},{"Uniquefunname":" create_data_source()","Funname":"create_data_source","Returntype":"","Args":""},{"Uniquefunname":" create_pool(int32_t fd,int32_t size)","Funname":"create_pool","Returntype":"","Args":"int32_t fd,int32_t size"},{"Uniquefunname":" create_region()","Funname":"create_region","Returntype":"","Args":""},{"Uniquefunname":" create_surface()","Funname":"create_surface","Returntype":"","Args":""},{"Uniquefunname":"void damage(int32_t x,int32_t y,int32_t width,int32_t height)","Funname":"damage","Returntype":"void","Args":"int32_t x,int32_t y,int32_t width,int32_t height"},{"Uniquefunname":"protected data_device_data_offer(struct::wl_data_offer * id)","Funname":"data_device_data_offer","Returntype":"protected","Args":"struct::wl_data_offer * id"},{"Uniquefunname":"virtual void data_device_drop()","Funname":"data_device_drop","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual void data_device_enter(uint32_t serial,struct::wl_surface * surface,wl_fixed_t x,wl_fixed_t y,struct::wl_data_offer * id)","Funname":"data_device_enter","Returntype":"virtual void","Args":"uint32_t serial,struct::wl_surface * surface,wl_fixed_t x,wl_fixed_t y,struct::wl_data_offer * id"},{"Uniquefunname":"virtual void data_device_leave()","Funname":"data_device_leave","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual void data_device_motion(uint32_t time,wl_fixed_t x,wl_fixed_t y)","Funname":"data_device_motion","Returntype":"virtual void","Args":"uint32_t time,wl_fixed_t x,wl_fixed_t y"},{"Uniquefunname":"virtual void data_device_selection(struct::wl_data_offer * id)","Funname":"data_device_selection","Returntype":"virtual void","Args":"struct::wl_data_offer * id"},{"Uniquefunname":"protected data_offer_offer(const QString \u0026 mime_type)","Funname":"data_offer_offer","Returntype":"protected","Args":"const QString \u0026 mime_type"},{"Uniquefunname":"virtual void data_source_cancelled()","Funname":"data_source_cancelled","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual void data_source_send(const QString \u0026 mime_type,int32_t fd)","Funname":"data_source_send","Returntype":"virtual void","Args":"const QString \u0026 mime_type,int32_t fd"},{"Uniquefunname":"protected data_source_target(const QString \u0026 mime_type)","Funname":"data_source_target","Returntype":"protected","Args":"const QString \u0026 mime_type"},{"Uniquefunname":"void destroy()","Funname":"destroy","Returntype":"void","Args":""},{"Uniquefunname":" frame()","Funname":"frame","Returntype":"","Args":""},{"Uniquefunname":" get_data_device(struct::wl_seat * seat)","Funname":"get_data_device","Returntype":"","Args":"struct::wl_seat * seat"},{"Uniquefunname":" get_keyboard()","Funname":"get_keyboard","Returntype":"","Args":""},{"Uniquefunname":" get_pointer()","Funname":"get_pointer","Returntype":"","Args":""},{"Uniquefunname":" get_shell_surface(struct::wl_surface * surface)","Funname":"get_shell_surface","Returntype":"","Args":"struct::wl_surface * surface"},{"Uniquefunname":" get_subsurface(struct::wl_surface * surface,struct::wl_surface * parent)","Funname":"get_subsurface","Returntype":"","Args":"struct::wl_surface * surface,struct::wl_surface * parent"},{"Uniquefunname":" get_touch()","Funname":"get_touch","Returntype":"","Args":""},{"Uniquefunname":"void handle_axis(void * data,struct::wl_pointer * object,uint32_t time,uint32_t axis,wl_fixed_t value)","Funname":"handle_axis","Returntype":"void","Args":"void * data,struct::wl_pointer * object,uint32_t time,uint32_t axis,wl_fixed_t value"},{"Uniquefunname":"void handle_button(void * data,struct::wl_pointer * object,uint32_t serial,uint32_t time,uint32_t button,uint32_t state)","Funname":"handle_button","Returntype":"void","Args":"void * data,struct::wl_pointer * object,uint32_t serial,uint32_t time,uint32_t button,uint32_t state"},{"Uniquefunname":"void handle_cancel(void * data,struct::wl_touch * object)","Funname":"handle_cancel","Returntype":"void","Args":"void * data,struct::wl_touch * object"},{"Uniquefunname":"void handle_cancelled(void * data,struct::wl_data_source * object)","Funname":"handle_cancelled","Returntype":"void","Args":"void * data,struct::wl_data_source * object"},{"Uniquefunname":"void handle_capabilities(void * data,struct::wl_seat * object,uint32_t capabilities)","Funname":"handle_capabilities","Returntype":"void","Args":"void * data,struct::wl_seat * object,uint32_t capabilities"},{"Uniquefunname":"void handle_configure(void * data,struct::wl_shell_surface * object,uint32_t edges,int32_t width,int32_t height)","Funname":"handle_configure","Returntype":"void","Args":"void * data,struct::wl_shell_surface * object,uint32_t edges,int32_t width,int32_t height"},{"Uniquefunname":"void handle_data_offer(void * data,struct::wl_data_device * object,struct::wl_data_offer * id)","Funname":"handle_data_offer","Returntype":"void","Args":"void * data,struct::wl_data_device * object,struct::wl_data_offer * id"},{"Uniquefunname":"void handle_done(void * data,struct::wl_callback * object,uint32_t callback_data)","Funname":"handle_done","Returntype":"void","Args":"void * data,struct::wl_callback * object,uint32_t callback_data"},{"Uniquefunname":"void handle_done(void * data,struct::wl_output * object)","Funname":"handle_done","Returntype":"void","Args":"void * data,struct::wl_output * object"},{"Uniquefunname":"void handle_down(void * data,struct::wl_touch * object,uint32_t serial,uint32_t time,struct::wl_surface * surface,int32_t id,wl_fixed_t x,wl_fixed_t y)","Funname":"handle_down","Returntype":"void","Args":"void * data,struct::wl_touch * object,uint32_t serial,uint32_t time,struct::wl_surface * surface,int32_t id,wl_fixed_t x,wl_fixed_t y"},{"Uniquefunname":"void handle_drop(void * data,struct::wl_data_device * object)","Funname":"handle_drop","Returntype":"void","Args":"void * data,struct::wl_data_device * object"},{"Uniquefunname":"void handle_enter(void * data,struct::wl_data_device * object,uint32_t serial,struct::wl_surface * surface,wl_fixed_t x,wl_fixed_t y,struct::wl_data_offer * id)","Funname":"handle_enter","Returntype":"void","Args":"void * data,struct::wl_data_device * object,uint32_t serial,struct::wl_surface * surface,wl_fixed_t x,wl_fixed_t y,struct::wl_data_offer * id"},{"Uniquefunname":"void handle_enter(void * data,struct::wl_keyboard * object,uint32_t serial,struct::wl_surface * surface,wl_array * keys)","Funname":"handle_enter","Returntype":"void","Args":"void * data,struct::wl_keyboard * object,uint32_t serial,struct::wl_surface * surface,wl_array * keys"},{"Uniquefunname":"void handle_enter(void * data,struct::wl_pointer * object,uint32_t serial,struct::wl_surface * surface,wl_fixed_t surface_x,wl_fixed_t surface_y)","Funname":"handle_enter","Returntype":"void","Args":"void * data,struct::wl_pointer * object,uint32_t serial,struct::wl_surface * surface,wl_fixed_t surface_x,wl_fixed_t surface_y"},{"Uniquefunname":"void handle_enter(void * data,struct::wl_surface * object,struct::wl_output * output)","Funname":"handle_enter","Returntype":"void","Args":"void * data,struct::wl_surface * object,struct::wl_output * output"},{"Uniquefunname":"void handle_format(void * data,struct::wl_shm * object,uint32_t format)","Funname":"handle_format","Returntype":"void","Args":"void * data,struct::wl_shm * object,uint32_t format"},{"Uniquefunname":"void handle_frame(void * data,struct::wl_touch * object)","Funname":"handle_frame","Returntype":"void","Args":"void * data,struct::wl_touch * object"},{"Uniquefunname":"void handle_geometry(void * data,struct::wl_output * object,int32_t x,int32_t y,int32_t physical_width,int32_t physical_height,int32_t subpixel,const char * make,const char * model,int32_t transform)","Funname":"handle_geometry","Returntype":"void","Args":"void * data,struct::wl_output * object,int32_t x,int32_t y,int32_t physical_width,int32_t physical_height,int32_t subpixel,const char * make,const char * model,int32_t transform"},{"Uniquefunname":"void handle_global(void * data,struct::wl_registry * object,uint32_t name,const char * interface,uint32_t version)","Funname":"handle_global","Returntype":"void","Args":"void * data,struct::wl_registry * object,uint32_t name,const char * interface,uint32_t version"},{"Uniquefunname":"void handle_global_remove(void * data,struct::wl_registry * object,uint32_t name)","Funname":"handle_global_remove","Returntype":"void","Args":"void * data,struct::wl_registry * object,uint32_t name"},{"Uniquefunname":"void handle_key(void * data,struct::wl_keyboard * object,uint32_t serial,uint32_t time,uint32_t key,uint32_t state)","Funname":"handle_key","Returntype":"void","Args":"void * data,struct::wl_keyboard * object,uint32_t serial,uint32_t time,uint32_t key,uint32_t state"},{"Uniquefunname":"void handle_keymap(void * data,struct::wl_keyboard * object,uint32_t format,int32_t fd,uint32_t size)","Funname":"handle_keymap","Returntype":"void","Args":"void * data,struct::wl_keyboard * object,uint32_t format,int32_t fd,uint32_t size"},{"Uniquefunname":"void handle_leave(void * data,struct::wl_data_device * object)","Funname":"handle_leave","Returntype":"void","Args":"void * data,struct::wl_data_device * object"},{"Uniquefunname":"void handle_leave(void * data,struct::wl_keyboard * object,uint32_t serial,struct::wl_surface * surface)","Funname":"handle_leave","Returntype":"void","Args":"void * data,struct::wl_keyboard * object,uint32_t serial,struct::wl_surface * surface"},{"Uniquefunname":"void handle_leave(void * data,struct::wl_pointer * object,uint32_t serial,struct::wl_surface * surface)","Funname":"handle_leave","Returntype":"void","Args":"void * data,struct::wl_pointer * object,uint32_t serial,struct::wl_surface * surface"},{"Uniquefunname":"void handle_leave(void * data,struct::wl_surface * object,struct::wl_output * output)","Funname":"handle_leave","Returntype":"void","Args":"void * data,struct::wl_surface * object,struct::wl_output * output"},{"Uniquefunname":"void handle_mode(void * data,struct::wl_output * object,uint32_t flags,int32_t width,int32_t height,int32_t refresh)","Funname":"handle_mode","Returntype":"void","Args":"void * data,struct::wl_output * object,uint32_t flags,int32_t width,int32_t height,int32_t refresh"},{"Uniquefunname":"void handle_modifiers(void * data,struct::wl_keyboard * object,uint32_t serial,uint32_t mods_depressed,uint32_t mods_latched,uint32_t mods_locked,uint32_t group)","Funname":"handle_modifiers","Returntype":"void","Args":"void * data,struct::wl_keyboard * object,uint32_t serial,uint32_t mods_depressed,uint32_t mods_latched,uint32_t mods_locked,uint32_t group"},{"Uniquefunname":"void handle_motion(void * data,struct::wl_data_device * object,uint32_t time,wl_fixed_t x,wl_fixed_t y)","Funname":"handle_motion","Returntype":"void","Args":"void * data,struct::wl_data_device * object,uint32_t time,wl_fixed_t x,wl_fixed_t y"},{"Uniquefunname":"void handle_motion(void * data,struct::wl_pointer * object,uint32_t time,wl_fixed_t surface_x,wl_fixed_t surface_y)","Funname":"handle_motion","Returntype":"void","Args":"void * data,struct::wl_pointer * object,uint32_t time,wl_fixed_t surface_x,wl_fixed_t surface_y"},{"Uniquefunname":"void handle_motion(void * data,struct::wl_touch * object,uint32_t time,int32_t id,wl_fixed_t x,wl_fixed_t y)","Funname":"handle_motion","Returntype":"void","Args":"void * data,struct::wl_touch * object,uint32_t time,int32_t id,wl_fixed_t x,wl_fixed_t y"},{"Uniquefunname":"void handle_name(void * data,struct::wl_seat * object,const char * name)","Funname":"handle_name","Returntype":"void","Args":"void * data,struct::wl_seat * object,const char * name"},{"Uniquefunname":"void handle_offer(void * data,struct::wl_data_offer * object,const char * mime_type)","Funname":"handle_offer","Returntype":"void","Args":"void * data,struct::wl_data_offer * object,const char * mime_type"},{"Uniquefunname":"void handle_ping(void * data,struct::wl_shell_surface * object,uint32_t serial)","Funname":"handle_ping","Returntype":"void","Args":"void * data,struct::wl_shell_surface * object,uint32_t serial"},{"Uniquefunname":"void handle_popup_done(void * data,struct::wl_shell_surface * object)","Funname":"handle_popup_done","Returntype":"void","Args":"void * data,struct::wl_shell_surface * object"},{"Uniquefunname":"void handle_release(void * data,struct::wl_buffer * object)","Funname":"handle_release","Returntype":"void","Args":"void * data,struct::wl_buffer * object"},{"Uniquefunname":"void handle_repeat_info(void * data,struct::wl_keyboard * object,int32_t rate,int32_t delay)","Funname":"handle_repeat_info","Returntype":"void","Args":"void * data,struct::wl_keyboard * object,int32_t rate,int32_t delay"},{"Uniquefunname":"void handle_scale(void * data,struct::wl_output * object,int32_t factor)","Funname":"handle_scale","Returntype":"void","Args":"void * data,struct::wl_output * object,int32_t factor"},{"Uniquefunname":"void handle_selection(void * data,struct::wl_data_device * object,struct::wl_data_offer * id)","Funname":"handle_selection","Returntype":"void","Args":"void * data,struct::wl_data_device * object,struct::wl_data_offer * id"},{"Uniquefunname":"void handle_send(void * data,struct::wl_data_source * object,const char * mime_type,int32_t fd)","Funname":"handle_send","Returntype":"void","Args":"void * data,struct::wl_data_source * object,const char * mime_type,int32_t fd"},{"Uniquefunname":"void handle_target(void * data,struct::wl_data_source * object,const char * mime_type)","Funname":"handle_target","Returntype":"void","Args":"void * data,struct::wl_data_source * object,const char * mime_type"},{"Uniquefunname":"void handle_up(void * data,struct::wl_touch * object,uint32_t serial,uint32_t time,int32_t id)","Funname":"handle_up","Returntype":"void","Args":"void * data,struct::wl_touch * object,uint32_t serial,uint32_t time,int32_t id"},{"Uniquefunname":"void init(struct::wl_buffer * object)","Funname":"init","Returntype":"void","Args":"struct::wl_buffer * object"},{"Uniquefunname":"void init(struct::wl_callback * object)","Funname":"init","Returntype":"void","Args":"struct::wl_callback * object"},{"Uniquefunname":"void init(struct::wl_compositor * object)","Funname":"init","Returntype":"void","Args":"struct::wl_compositor * object"},{"Uniquefunname":"void init(struct::wl_data_device * object)","Funname":"init","Returntype":"void","Args":"struct::wl_data_device * object"},{"Uniquefunname":"void init(struct::wl_data_device_manager * object)","Funname":"init","Returntype":"void","Args":"struct::wl_data_device_manager * object"},{"Uniquefunname":"void init(struct::wl_data_offer * object)","Funname":"init","Returntype":"void","Args":"struct::wl_data_offer * object"},{"Uniquefunname":"void init(struct::wl_data_source * object)","Funname":"init","Returntype":"void","Args":"struct::wl_data_source * object"},{"Uniquefunname":"void init(struct::wl_keyboard * object)","Funname":"init","Returntype":"void","Args":"struct::wl_keyboard * object"},{"Uniquefunname":"void init(struct::wl_output * object)","Funname":"init","Returntype":"void","Args":"struct::wl_output * object"},{"Uniquefunname":"void init(struct::wl_pointer * object)","Funname":"init","Returntype":"void","Args":"struct::wl_pointer * object"},{"Uniquefunname":"void init(struct::wl_region * object)","Funname":"init","Returntype":"void","Args":"struct::wl_region * object"},{"Uniquefunname":"void init(struct::wl_registry * object)","Funname":"init","Returntype":"void","Args":"struct::wl_registry * object"},{"Uniquefunname":"void init(struct::wl_registry * registry,int id,int version)","Funname":"init","Returntype":"void","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"void init(struct::wl_seat * object)","Funname":"init","Returntype":"void","Args":"struct::wl_seat * object"},{"Uniquefunname":"void init(struct::wl_shell * object)","Funname":"init","Returntype":"void","Args":"struct::wl_shell * object"},{"Uniquefunname":"void init(struct::wl_shell_surface * object)","Funname":"init","Returntype":"void","Args":"struct::wl_shell_surface * object"},{"Uniquefunname":"void init(struct::wl_shm * object)","Funname":"init","Returntype":"void","Args":"struct::wl_shm * object"},{"Uniquefunname":"void init(struct::wl_shm_pool * object)","Funname":"init","Returntype":"void","Args":"struct::wl_shm_pool * object"},{"Uniquefunname":"void init(struct::wl_subcompositor * object)","Funname":"init","Returntype":"void","Args":"struct::wl_subcompositor * object"},{"Uniquefunname":"void init(struct::wl_subsurface * object)","Funname":"init","Returntype":"void","Args":"struct::wl_subsurface * object"},{"Uniquefunname":"void init(struct::wl_surface * object)","Funname":"init","Returntype":"void","Args":"struct::wl_surface * object"},{"Uniquefunname":"void init(struct::wl_touch * object)","Funname":"init","Returntype":"void","Args":"struct::wl_touch * object"},{"Uniquefunname":"private init_listener()","Funname":"init_listener","Returntype":"private","Args":""},{"Uniquefunname":"const struct interface()","Funname":"interface","Returntype":"const struct","Args":""},{"Uniquefunname":"bool isInitialized()","Funname":"isInitialized","Returntype":"bool","Args":""},{"Uniquefunname":"virtual void keyboard_enter(uint32_t serial,struct::wl_surface * surface,wl_array * keys)","Funname":"keyboard_enter","Returntype":"virtual void","Args":"uint32_t serial,struct::wl_surface * surface,wl_array * keys"},{"Uniquefunname":"virtual void keyboard_key(uint32_t serial,uint32_t time,uint32_t key,uint32_t state)","Funname":"keyboard_key","Returntype":"virtual void","Args":"uint32_t serial,uint32_t time,uint32_t key,uint32_t state"},{"Uniquefunname":"protected keyboard_keymap(uint32_t format,int32_t fd,uint32_t size)","Funname":"keyboard_keymap","Returntype":"protected","Args":"uint32_t format,int32_t fd,uint32_t size"},{"Uniquefunname":"virtual void keyboard_leave(uint32_t serial,struct::wl_surface * surface)","Funname":"keyboard_leave","Returntype":"virtual void","Args":"uint32_t serial,struct::wl_surface * surface"},{"Uniquefunname":"virtual void keyboard_modifiers(uint32_t serial,uint32_t mods_depressed,uint32_t mods_latched,uint32_t mods_locked,uint32_t group)","Funname":"keyboard_modifiers","Returntype":"virtual void","Args":"uint32_t serial,uint32_t mods_depressed,uint32_t mods_latched,uint32_t mods_locked,uint32_t group"},{"Uniquefunname":"virtual void keyboard_repeat_info(int32_t rate,int32_t delay)","Funname":"keyboard_repeat_info","Returntype":"virtual void","Args":"int32_t rate,int32_t delay"},{"Uniquefunname":"void move(struct::wl_seat * seat,uint32_t serial)","Funname":"move","Returntype":"void","Args":"struct::wl_seat * seat,uint32_t serial"},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":"void offer(const QString \u0026 mime_type)","Funname":"offer","Returntype":"void","Args":"const QString \u0026 mime_type"},{"Uniquefunname":"virtual void output_done()","Funname":"output_done","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected output_geometry(int32_t x,int32_t y,int32_t physical_width,int32_t physical_height,int32_t subpixel,const QString \u0026 make,const QString \u0026 model,int32_t transform)","Funname":"output_geometry","Returntype":"protected","Args":"int32_t x,int32_t y,int32_t physical_width,int32_t physical_height,int32_t subpixel,const QString \u0026 make,const QString \u0026 model,int32_t transform"},{"Uniquefunname":"virtual void output_mode(uint32_t flags,int32_t width,int32_t height,int32_t refresh)","Funname":"output_mode","Returntype":"virtual void","Args":"uint32_t flags,int32_t width,int32_t height,int32_t refresh"},{"Uniquefunname":"virtual void output_scale(int32_t factor)","Funname":"output_scale","Returntype":"virtual void","Args":"int32_t factor"},{"Uniquefunname":"void place_above(struct::wl_surface * sibling)","Funname":"place_above","Returntype":"void","Args":"struct::wl_surface * sibling"},{"Uniquefunname":"void place_below(struct::wl_surface * sibling)","Funname":"place_below","Returntype":"void","Args":"struct::wl_surface * sibling"},{"Uniquefunname":"virtual void pointer_axis(uint32_t time,uint32_t axis,wl_fixed_t value)","Funname":"pointer_axis","Returntype":"virtual void","Args":"uint32_t time,uint32_t axis,wl_fixed_t value"},{"Uniquefunname":"virtual void pointer_button(uint32_t serial,uint32_t time,uint32_t button,uint32_t state)","Funname":"pointer_button","Returntype":"virtual void","Args":"uint32_t serial,uint32_t time,uint32_t button,uint32_t state"},{"Uniquefunname":"protected pointer_enter(uint32_t serial,struct::wl_surface * surface,wl_fixed_t surface_x,wl_fixed_t surface_y)","Funname":"pointer_enter","Returntype":"protected","Args":"uint32_t serial,struct::wl_surface * surface,wl_fixed_t surface_x,wl_fixed_t surface_y"},{"Uniquefunname":"virtual void pointer_leave(uint32_t serial,struct::wl_surface * surface)","Funname":"pointer_leave","Returntype":"virtual void","Args":"uint32_t serial,struct::wl_surface * surface"},{"Uniquefunname":"virtual void pointer_motion(uint32_t time,wl_fixed_t surface_x,wl_fixed_t surface_y)","Funname":"pointer_motion","Returntype":"virtual void","Args":"uint32_t time,wl_fixed_t surface_x,wl_fixed_t surface_y"},{"Uniquefunname":"void pong(uint32_t serial)","Funname":"pong","Returntype":"void","Args":"uint32_t serial"},{"Uniquefunname":"void receive(const QString \u0026 mime_type,int32_t fd)","Funname":"receive","Returntype":"void","Args":"const QString \u0026 mime_type,int32_t fd"},{"Uniquefunname":"protected registry_global(uint32_t name,const QString \u0026 interface,uint32_t version)","Funname":"registry_global","Returntype":"protected","Args":"uint32_t name,const QString \u0026 interface,uint32_t version"},{"Uniquefunname":"virtual void registry_global_remove(uint32_t name)","Funname":"registry_global_remove","Returntype":"virtual void","Args":"uint32_t name"},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void resize(int32_t size)","Funname":"resize","Returntype":"void","Args":"int32_t size"},{"Uniquefunname":"void resize(struct::wl_seat * seat,uint32_t serial,uint32_t edges)","Funname":"resize","Returntype":"void","Args":"struct::wl_seat * seat,uint32_t serial,uint32_t edges"},{"Uniquefunname":"protected seat_capabilities(uint32_t capabilities)","Funname":"seat_capabilities","Returntype":"protected","Args":"uint32_t capabilities"},{"Uniquefunname":"virtual void seat_name(const QString \u0026 name)","Funname":"seat_name","Returntype":"virtual void","Args":"const QString \u0026 name"},{"Uniquefunname":"void set_buffer_scale(int32_t scale)","Funname":"set_buffer_scale","Returntype":"void","Args":"int32_t scale"},{"Uniquefunname":"void set_buffer_transform(int32_t transform)","Funname":"set_buffer_transform","Returntype":"void","Args":"int32_t transform"},{"Uniquefunname":"void set_class(const QString \u0026 class_)","Funname":"set_class","Returntype":"void","Args":"const QString \u0026 class_"},{"Uniquefunname":"void set_cursor(uint32_t serial,struct::wl_surface * surface,int32_t hotspot_x,int32_t hotspot_y)","Funname":"set_cursor","Returntype":"void","Args":"uint32_t serial,struct::wl_surface * surface,int32_t hotspot_x,int32_t hotspot_y"},{"Uniquefunname":"void set_desync()","Funname":"set_desync","Returntype":"void","Args":""},{"Uniquefunname":"void set_fullscreen(uint32_t method,uint32_t framerate,struct::wl_output * output)","Funname":"set_fullscreen","Returntype":"void","Args":"uint32_t method,uint32_t framerate,struct::wl_output * output"},{"Uniquefunname":"void set_input_region(struct::wl_region * region)","Funname":"set_input_region","Returntype":"void","Args":"struct::wl_region * region"},{"Uniquefunname":"void set_maximized(struct::wl_output * output)","Funname":"set_maximized","Returntype":"void","Args":"struct::wl_output * output"},{"Uniquefunname":"void set_opaque_region(struct::wl_region * region)","Funname":"set_opaque_region","Returntype":"void","Args":"struct::wl_region * region"},{"Uniquefunname":"void set_popup(struct::wl_seat * seat,uint32_t serial,struct::wl_surface * parent,int32_t x,int32_t y,uint32_t flags)","Funname":"set_popup","Returntype":"void","Args":"struct::wl_seat * seat,uint32_t serial,struct::wl_surface * parent,int32_t x,int32_t y,uint32_t flags"},{"Uniquefunname":"void set_position(int32_t x,int32_t y)","Funname":"set_position","Returntype":"void","Args":"int32_t x,int32_t y"},{"Uniquefunname":"void set_selection(struct::wl_data_source * source,uint32_t serial)","Funname":"set_selection","Returntype":"void","Args":"struct::wl_data_source * source,uint32_t serial"},{"Uniquefunname":"void set_sync()","Funname":"set_sync","Returntype":"void","Args":""},{"Uniquefunname":"void set_title(const QString \u0026 title)","Funname":"set_title","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void set_toplevel()","Funname":"set_toplevel","Returntype":"void","Args":""},{"Uniquefunname":"void set_transient(struct::wl_surface * parent,int32_t x,int32_t y,uint32_t flags)","Funname":"set_transient","Returntype":"void","Args":"struct::wl_surface * parent,int32_t x,int32_t y,uint32_t flags"},{"Uniquefunname":"virtual void shell_surface_configure(uint32_t edges,int32_t width,int32_t height)","Funname":"shell_surface_configure","Returntype":"virtual void","Args":"uint32_t edges,int32_t width,int32_t height"},{"Uniquefunname":"protected shell_surface_ping(uint32_t serial)","Funname":"shell_surface_ping","Returntype":"protected","Args":"uint32_t serial"},{"Uniquefunname":"virtual void shell_surface_popup_done()","Funname":"shell_surface_popup_done","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected shm_format(uint32_t format)","Funname":"shm_format","Returntype":"protected","Args":"uint32_t format"},{"Uniquefunname":"void start_drag(struct::wl_data_source * source,struct::wl_surface * origin,struct::wl_surface * icon,uint32_t serial)","Funname":"start_drag","Returntype":"void","Args":"struct::wl_data_source * source,struct::wl_surface * origin,struct::wl_surface * icon,uint32_t serial"},{"Uniquefunname":"void subtract(int32_t x,int32_t y,int32_t width,int32_t height)","Funname":"subtract","Returntype":"void","Args":"int32_t x,int32_t y,int32_t width,int32_t height"},{"Uniquefunname":"protected surface_enter(struct::wl_output * output)","Funname":"surface_enter","Returntype":"protected","Args":"struct::wl_output * output"},{"Uniquefunname":"virtual void surface_leave(struct::wl_output * output)","Funname":"surface_leave","Returntype":"virtual void","Args":"struct::wl_output * output"},{"Uniquefunname":"virtual void touch_cancel()","Funname":"touch_cancel","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected touch_down(uint32_t serial,uint32_t time,struct::wl_surface * surface,int32_t id,wl_fixed_t x,wl_fixed_t y)","Funname":"touch_down","Returntype":"protected","Args":"uint32_t serial,uint32_t time,struct::wl_surface * surface,int32_t id,wl_fixed_t x,wl_fixed_t y"},{"Uniquefunname":"virtual void touch_frame()","Funname":"touch_frame","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual void touch_motion(uint32_t time,int32_t id,wl_fixed_t x,wl_fixed_t y)","Funname":"touch_motion","Returntype":"virtual void","Args":"uint32_t time,int32_t id,wl_fixed_t x,wl_fixed_t y"},{"Uniquefunname":"virtual void touch_up(uint32_t serial,uint32_t time,int32_t id)","Funname":"touch_up","Returntype":"virtual void","Args":"uint32_t serial,uint32_t time,int32_t id"},{"Uniquefunname":" wl_buffer()","Funname":"wl_buffer","Returntype":"","Args":""},{"Uniquefunname":" wl_buffer(struct::wl_buffer * object)","Funname":"wl_buffer","Returntype":"","Args":"struct::wl_buffer * object"},{"Uniquefunname":"public wl_buffer(struct::wl_registry * registry,int id,int version)","Funname":"wl_buffer","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_callback()","Funname":"wl_callback","Returntype":"","Args":""},{"Uniquefunname":" wl_callback(struct::wl_callback * object)","Funname":"wl_callback","Returntype":"","Args":"struct::wl_callback * object"},{"Uniquefunname":"public wl_callback(struct::wl_registry * registry,int id,int version)","Funname":"wl_callback","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_compositor()","Funname":"wl_compositor","Returntype":"","Args":""},{"Uniquefunname":" wl_compositor(struct::wl_compositor * object)","Funname":"wl_compositor","Returntype":"","Args":"struct::wl_compositor * object"},{"Uniquefunname":"public wl_compositor(struct::wl_registry * registry,int id,int version)","Funname":"wl_compositor","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_data_device()","Funname":"wl_data_device","Returntype":"","Args":""},{"Uniquefunname":" wl_data_device(struct::wl_data_device * object)","Funname":"wl_data_device","Returntype":"","Args":"struct::wl_data_device * object"},{"Uniquefunname":"public wl_data_device(struct::wl_registry * registry,int id,int version)","Funname":"wl_data_device","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_data_device_manager()","Funname":"wl_data_device_manager","Returntype":"","Args":""},{"Uniquefunname":" wl_data_device_manager(struct::wl_data_device_manager * object)","Funname":"wl_data_device_manager","Returntype":"","Args":"struct::wl_data_device_manager * object"},{"Uniquefunname":"public wl_data_device_manager(struct::wl_registry * registry,int id,int version)","Funname":"wl_data_device_manager","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_data_offer()","Funname":"wl_data_offer","Returntype":"","Args":""},{"Uniquefunname":" wl_data_offer(struct::wl_data_offer * object)","Funname":"wl_data_offer","Returntype":"","Args":"struct::wl_data_offer * object"},{"Uniquefunname":"public wl_data_offer(struct::wl_registry * registry,int id,int version)","Funname":"wl_data_offer","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_data_source()","Funname":"wl_data_source","Returntype":"","Args":""},{"Uniquefunname":" wl_data_source(struct::wl_data_source * object)","Funname":"wl_data_source","Returntype":"","Args":"struct::wl_data_source * object"},{"Uniquefunname":"public wl_data_source(struct::wl_registry * registry,int id,int version)","Funname":"wl_data_source","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_keyboard()","Funname":"wl_keyboard","Returntype":"","Args":""},{"Uniquefunname":" wl_keyboard(struct::wl_keyboard * object)","Funname":"wl_keyboard","Returntype":"","Args":"struct::wl_keyboard * object"},{"Uniquefunname":"public wl_keyboard(struct::wl_registry * registry,int id,int version)","Funname":"wl_keyboard","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_output()","Funname":"wl_output","Returntype":"","Args":""},{"Uniquefunname":" wl_output(struct::wl_output * object)","Funname":"wl_output","Returntype":"","Args":"struct::wl_output * object"},{"Uniquefunname":"public wl_output(struct::wl_registry * registry,int id,int version)","Funname":"wl_output","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_pointer()","Funname":"wl_pointer","Returntype":"","Args":""},{"Uniquefunname":" wl_pointer(struct::wl_pointer * object)","Funname":"wl_pointer","Returntype":"","Args":"struct::wl_pointer * object"},{"Uniquefunname":"public wl_pointer(struct::wl_registry * registry,int id,int version)","Funname":"wl_pointer","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_region()","Funname":"wl_region","Returntype":"","Args":""},{"Uniquefunname":" wl_region(struct::wl_region * object)","Funname":"wl_region","Returntype":"","Args":"struct::wl_region * object"},{"Uniquefunname":"public wl_region(struct::wl_registry * registry,int id,int version)","Funname":"wl_region","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_registry()","Funname":"wl_registry","Returntype":"","Args":""},{"Uniquefunname":" wl_registry(struct::wl_registry * object)","Funname":"wl_registry","Returntype":"","Args":"struct::wl_registry * object"},{"Uniquefunname":"public wl_registry(struct::wl_registry * registry,int id,int version)","Funname":"wl_registry","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_seat()","Funname":"wl_seat","Returntype":"","Args":""},{"Uniquefunname":"public wl_seat(struct::wl_registry * registry,int id,int version)","Funname":"wl_seat","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_seat(struct::wl_seat * object)","Funname":"wl_seat","Returntype":"","Args":"struct::wl_seat * object"},{"Uniquefunname":" wl_shell()","Funname":"wl_shell","Returntype":"","Args":""},{"Uniquefunname":"public wl_shell(struct::wl_registry * registry,int id,int version)","Funname":"wl_shell","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_shell(struct::wl_shell * object)","Funname":"wl_shell","Returntype":"","Args":"struct::wl_shell * object"},{"Uniquefunname":" wl_shell_surface()","Funname":"wl_shell_surface","Returntype":"","Args":""},{"Uniquefunname":"public wl_shell_surface(struct::wl_registry * registry,int id,int version)","Funname":"wl_shell_surface","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_shell_surface(struct::wl_shell_surface * object)","Funname":"wl_shell_surface","Returntype":"","Args":"struct::wl_shell_surface * object"},{"Uniquefunname":" wl_shm()","Funname":"wl_shm","Returntype":"","Args":""},{"Uniquefunname":"public wl_shm(struct::wl_registry * registry,int id,int version)","Funname":"wl_shm","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_shm(struct::wl_shm * object)","Funname":"wl_shm","Returntype":"","Args":"struct::wl_shm * object"},{"Uniquefunname":" wl_shm_pool()","Funname":"wl_shm_pool","Returntype":"","Args":""},{"Uniquefunname":"public wl_shm_pool(struct::wl_registry * registry,int id,int version)","Funname":"wl_shm_pool","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_shm_pool(struct::wl_shm_pool * object)","Funname":"wl_shm_pool","Returntype":"","Args":"struct::wl_shm_pool * object"},{"Uniquefunname":" wl_subcompositor()","Funname":"wl_subcompositor","Returntype":"","Args":""},{"Uniquefunname":"public wl_subcompositor(struct::wl_registry * registry,int id,int version)","Funname":"wl_subcompositor","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_subcompositor(struct::wl_subcompositor * object)","Funname":"wl_subcompositor","Returntype":"","Args":"struct::wl_subcompositor * object"},{"Uniquefunname":" wl_subsurface()","Funname":"wl_subsurface","Returntype":"","Args":""},{"Uniquefunname":"public wl_subsurface(struct::wl_registry * registry,int id,int version)","Funname":"wl_subsurface","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_subsurface(struct::wl_subsurface * object)","Funname":"wl_subsurface","Returntype":"","Args":"struct::wl_subsurface * object"},{"Uniquefunname":" wl_surface()","Funname":"wl_surface","Returntype":"","Args":""},{"Uniquefunname":"public wl_surface(struct::wl_registry * registry,int id,int version)","Funname":"wl_surface","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_surface(struct::wl_surface * object)","Funname":"wl_surface","Returntype":"","Args":"struct::wl_surface * object"},{"Uniquefunname":" wl_touch()","Funname":"wl_touch","Returntype":"","Args":""},{"Uniquefunname":"public wl_touch(struct::wl_registry * registry,int id,int version)","Funname":"wl_touch","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" wl_touch(struct::wl_touch * object)","Funname":"wl_touch","Returntype":"","Args":"struct::wl_touch * object"},{"Uniquefunname":"virtual ~wl_buffer()","Funname":"~wl_buffer","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_callback()","Funname":"~wl_callback","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_compositor()","Funname":"~wl_compositor","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_data_device()","Funname":"~wl_data_device","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_data_device_manager()","Funname":"~wl_data_device_manager","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_data_offer()","Funname":"~wl_data_offer","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_data_source()","Funname":"~wl_data_source","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_keyboard()","Funname":"~wl_keyboard","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_output()","Funname":"~wl_output","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_pointer()","Funname":"~wl_pointer","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_region()","Funname":"~wl_region","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_registry()","Funname":"~wl_registry","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_seat()","Funname":"~wl_seat","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_shell()","Funname":"~wl_shell","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_shell_surface()","Funname":"~wl_shell_surface","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_shm()","Funname":"~wl_shm","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_shm_pool()","Funname":"~wl_shm_pool","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_subcompositor()","Funname":"~wl_subcompositor","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_subsurface()","Funname":"~wl_subsurface","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_surface()","Funname":"~wl_surface","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~wl_touch()","Funname":"~wl_touch","Returntype":"virtual","Args":""}],"Records":[{"Name":"enum:axis","Fields":["axis_horizontal_scroll","axis_vertical_scroll"]},{"Name":"enum:button_state","Fields":["button_state_pressed","button_state_released"]},{"Name":"enum:capability","Fields":["capability_keyboard","capability_pointer","capability_touch"]},{"Name":"enum:error","Fields":["error_bad_surface","error_bad_surface","error_invalid_fd","error_invalid_format","error_invalid_scale","error_invalid_stride","error_invalid_transform"]},{"Name":"enum:format","Fields":["format_abgr1555","format_abgr2101010","format_abgr4444","format_abgr8888","format_argb1555","format_argb2101010","format_argb4444","format_argb8888","format_ayuv","format_bgr233","format_bgr565","format_bgr888","format_bgra1010102","format_bgra4444","format_bgra5551","format_bgra8888","format_bgrx1010102","format_bgrx4444","format_bgrx5551","format_bgrx8888","format_c8","format_nv12","format_nv16","format_nv21","format_nv61","format_rgb332","format_rgb565","format_rgb888","format_rgba1010102","format_rgba4444","format_rgba5551","format_rgba8888","format_rgbx1010102","format_rgbx4444","format_rgbx5551","format_rgbx8888","format_uyvy","format_vyuy","format_xbgr1555","format_xbgr2101010","format_xbgr4444","format_xbgr8888","format_xrgb1555","format_xrgb2101010","format_xrgb4444","format_xrgb8888","format_yuv410","format_yuv411","format_yuv420","format_yuv422","format_yuv444","format_yuyv","format_yvu410","format_yvu411","format_yvu420","format_yvu422","format_yvu444","format_yvyu"]},{"Name":"enum:fullscreen_method","Fields":["fullscreen_method_default","fullscreen_method_driver","fullscreen_method_fill","fullscreen_method_scale"]},{"Name":"enum:key_state","Fields":["key_state_pressed","key_state_released"]},{"Name":"enum:keymap_format","Fields":["keymap_format_no_keymap","keymap_format_xkb_v1"]},{"Name":"enum:mode","Fields":["mode_current","mode_preferred"]},{"Name":"enum:resize","Fields":["resize_bottom","resize_bottom_left","resize_bottom_right","resize_left","resize_none","resize_right","resize_top","resize_top_left","resize_top_right"]},{"Name":"enum:subpixel","Fields":["subpixel_horizontal_bgr","subpixel_horizontal_rgb","subpixel_none","subpixel_unknown","subpixel_vertical_bgr","subpixel_vertical_rgb"]},{"Name":"enum:transform","Fields":["transform_180","transform_270","transform_90","transform_flipped","transform_flipped_180","transform_flipped_270","transform_flipped_90","transform_normal"]},{"Name":"enum:transient","Fields":["transient_inactive"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwayland-xdg-output-unstable-v1.h","Functions":[{"Uniquefunname":"void destroy()","Funname":"destroy","Returntype":"void","Args":""},{"Uniquefunname":" get_xdg_output(struct::wl_output * output)","Funname":"get_xdg_output","Returntype":"","Args":"struct::wl_output * output"},{"Uniquefunname":"void handle_description(void * data,struct::zxdg_output_v1 * object,const char * description)","Funname":"handle_description","Returntype":"void","Args":"void * data,struct::zxdg_output_v1 * object,const char * description"},{"Uniquefunname":"void handle_done(void * data,struct::zxdg_output_v1 * object)","Funname":"handle_done","Returntype":"void","Args":"void * data,struct::zxdg_output_v1 * object"},{"Uniquefunname":"void handle_logical_position(void * data,struct::zxdg_output_v1 * object,int32_t x,int32_t y)","Funname":"handle_logical_position","Returntype":"void","Args":"void * data,struct::zxdg_output_v1 * object,int32_t x,int32_t y"},{"Uniquefunname":"void handle_logical_size(void * data,struct::zxdg_output_v1 * object,int32_t width,int32_t height)","Funname":"handle_logical_size","Returntype":"void","Args":"void * data,struct::zxdg_output_v1 * object,int32_t width,int32_t height"},{"Uniquefunname":"void handle_name(void * data,struct::zxdg_output_v1 * object,const char * name)","Funname":"handle_name","Returntype":"void","Args":"void * data,struct::zxdg_output_v1 * object,const char * name"},{"Uniquefunname":"void init(struct::wl_registry * registry,int id,int version)","Funname":"init","Returntype":"void","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"void init(struct::zxdg_output_manager_v1 * object)","Funname":"init","Returntype":"void","Args":"struct::zxdg_output_manager_v1 * object"},{"Uniquefunname":"void init(struct::zxdg_output_v1 * object)","Funname":"init","Returntype":"void","Args":"struct::zxdg_output_v1 * object"},{"Uniquefunname":"private init_listener()","Funname":"init_listener","Returntype":"private","Args":""},{"Uniquefunname":"const struct interface()","Funname":"interface","Returntype":"const struct","Args":""},{"Uniquefunname":"bool isInitialized()","Funname":"isInitialized","Returntype":"bool","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":"const struct object()","Funname":"object","Returntype":"const struct","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" object()","Funname":"object","Returntype":"","Args":""},{"Uniquefunname":" zxdg_output_manager_v1()","Funname":"zxdg_output_manager_v1","Returntype":"","Args":""},{"Uniquefunname":"public zxdg_output_manager_v1(struct::wl_registry * registry,int id,int version)","Funname":"zxdg_output_manager_v1","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" zxdg_output_manager_v1(struct::zxdg_output_manager_v1 * object)","Funname":"zxdg_output_manager_v1","Returntype":"","Args":"struct::zxdg_output_manager_v1 * object"},{"Uniquefunname":" zxdg_output_v1()","Funname":"zxdg_output_v1","Returntype":"","Args":""},{"Uniquefunname":"public zxdg_output_v1(struct::wl_registry * registry,int id,int version)","Funname":"zxdg_output_v1","Returntype":"public","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":" zxdg_output_v1(struct::zxdg_output_v1 * object)","Funname":"zxdg_output_v1","Returntype":"","Args":"struct::zxdg_output_v1 * object"},{"Uniquefunname":"virtual void zxdg_output_v1_description(const QString \u0026 description)","Funname":"zxdg_output_v1_description","Returntype":"virtual void","Args":"const QString \u0026 description"},{"Uniquefunname":"virtual void zxdg_output_v1_done()","Funname":"zxdg_output_v1_done","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected zxdg_output_v1_logical_position(int32_t x,int32_t y)","Funname":"zxdg_output_v1_logical_position","Returntype":"protected","Args":"int32_t x,int32_t y"},{"Uniquefunname":"virtual void zxdg_output_v1_logical_size(int32_t width,int32_t height)","Funname":"zxdg_output_v1_logical_size","Returntype":"virtual void","Args":"int32_t width,int32_t height"},{"Uniquefunname":"virtual void zxdg_output_v1_name(const QString \u0026 name)","Funname":"zxdg_output_v1_name","Returntype":"virtual void","Args":"const QString \u0026 name"},{"Uniquefunname":"virtual ~zxdg_output_manager_v1()","Funname":"~zxdg_output_manager_v1","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~zxdg_output_v1()","Funname":"~zxdg_output_v1","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandabstractdecoration_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QWaylandAbstractDecoration)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QWaylandAbstractDecoration"},{"Uniquefunname":"const QImage \u0026 contentImage()","Funname":"contentImage","Returntype":"const QImage \u0026","Args":""},{"Uniquefunname":"virtual bool handleMouse(QWaylandInputDevice * inputDevice,const QPointF \u0026 local,const QPointF \u0026 global,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"handleMouse","Returntype":"virtual bool","Args":"QWaylandInputDevice * inputDevice,const QPointF \u0026 local,const QPointF \u0026 global,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"virtual bool handleTouch(QWaylandInputDevice * inputDevice,const QPointF \u0026 local,const QPointF \u0026 global,Qt::TouchPointState state,Qt::KeyboardModifiers mods)","Funname":"handleTouch","Returntype":"virtual bool","Args":"QWaylandInputDevice * inputDevice,const QPointF \u0026 local,const QPointF \u0026 global,Qt::TouchPointState state,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool isDirty()","Funname":"isDirty","Returntype":"bool","Args":""},{"Uniquefunname":"bool isLeftClicked(Qt::MouseButtons newMouseButtonState)","Funname":"isLeftClicked","Returntype":"bool","Args":"Qt::MouseButtons newMouseButtonState"},{"Uniquefunname":"bool isLeftReleased(Qt::MouseButtons newMouseButtonState)","Funname":"isLeftReleased","Returntype":"bool","Args":"Qt::MouseButtons newMouseButtonState"},{"Uniquefunname":"virtual QMargins margins()","Funname":"margins","Returntype":"virtual QMargins","Args":""},{"Uniquefunname":"protected paint(QPaintDevice * device)","Funname":"paint","Returntype":"protected","Args":"QPaintDevice * device"},{"Uniquefunname":"void setMouseButtons(Qt::MouseButtons mb)","Funname":"setMouseButtons","Returntype":"void","Args":"Qt::MouseButtons mb"},{"Uniquefunname":"void setWaylandWindow(QWaylandWindow * window)","Funname":"setWaylandWindow","Returntype":"void","Args":"QWaylandWindow * window"},{"Uniquefunname":"void startMove(QWaylandInputDevice * inputDevice,Qt::MouseButtons buttons)","Funname":"startMove","Returntype":"void","Args":"QWaylandInputDevice * inputDevice,Qt::MouseButtons buttons"},{"Uniquefunname":"void startResize(QWaylandInputDevice * inputDevice,enum wl_shell_surface_resize resize,Qt::MouseButtons buttons)","Funname":"startResize","Returntype":"void","Args":"QWaylandInputDevice * inputDevice,enum wl_shell_surface_resize resize,Qt::MouseButtons buttons"},{"Uniquefunname":"void update()","Funname":"update","Returntype":"void","Args":""},{"Uniquefunname":"QWaylandWindow * waylandWindow()","Funname":"waylandWindow","Returntype":"QWaylandWindow *","Args":""},{"Uniquefunname":"QWindow * window()","Funname":"window","Returntype":"QWindow *","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandbuffer_p.h","Functions":[{"Uniquefunname":"public QWaylandBuffer()","Funname":"QWaylandBuffer","Returntype":"public","Args":""},{"Uniquefunname":"wl_buffer * buffer()","Funname":"buffer","Returntype":"wl_buffer *","Args":""},{"Uniquefunname":"bool busy()","Funname":"busy","Returntype":"bool","Args":""},{"Uniquefunname":"bool committed()","Funname":"committed","Returntype":"bool","Args":""},{"Uniquefunname":"void init(wl_buffer * buf)","Funname":"init","Returntype":"void","Args":"wl_buffer * buf"},{"Uniquefunname":"void release(void * data,wl_buffer *)","Funname":"release","Returntype":"void","Args":"void * data,wl_buffer *"},{"Uniquefunname":"virtual int scale()","Funname":"scale","Returntype":"virtual int","Args":""},{"Uniquefunname":"void setBusy()","Funname":"setBusy","Returntype":"void","Args":""},{"Uniquefunname":"void setCommitted()","Funname":"setCommitted","Returntype":"void","Args":""},{"Uniquefunname":"virtual QSize size()","Funname":"size","Returntype":"virtual QSize","Args":""},{"Uniquefunname":"virtual ~QWaylandBuffer()","Funname":"~QWaylandBuffer","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandclientbufferintegration_p.h","Functions":[{"Uniquefunname":"public QWaylandClientBufferIntegration()","Funname":"QWaylandClientBufferIntegration","Returntype":"public","Args":""},{"Uniquefunname":"virtual QWaylandWindow * createEglWindow(QWindow * window)","Funname":"createEglWindow","Returntype":"virtual QWaylandWindow *","Args":"QWindow * window"},{"Uniquefunname":"virtual QPlatformOpenGLContext * createPlatformOpenGLContext(const QSurfaceFormat \u0026 glFormat,QPlatformOpenGLContext * share)","Funname":"createPlatformOpenGLContext","Returntype":"virtual QPlatformOpenGLContext *","Args":"const QSurfaceFormat \u0026 glFormat,QPlatformOpenGLContext * share"},{"Uniquefunname":"virtual void initialize(QWaylandDisplay * display)","Funname":"initialize","Returntype":"virtual void","Args":"QWaylandDisplay * display"},{"Uniquefunname":"virtual bool isValid()","Funname":"isValid","Returntype":"virtual bool","Args":""},{"Uniquefunname":"virtual void * nativeResource(NativeResource)","Funname":"nativeResource","Returntype":"virtual void *","Args":"NativeResource"},{"Uniquefunname":"virtual void * nativeResourceForContext(NativeResource,QPlatformOpenGLContext *)","Funname":"nativeResourceForContext","Returntype":"virtual void *","Args":"NativeResource,QPlatformOpenGLContext *"},{"Uniquefunname":"virtual bool supportsThreadedOpenGL()","Funname":"supportsThreadedOpenGL","Returntype":"virtual bool","Args":""},{"Uniquefunname":"virtual bool supportsWindowDecoration()","Funname":"supportsWindowDecoration","Returntype":"virtual bool","Args":""},{"Uniquefunname":"virtual ~QWaylandClientBufferIntegration()","Funname":"~QWaylandClientBufferIntegration","Returntype":"virtual","Args":""}],"Records":[{"Name":"enum:NativeResource","Fields":["EglConfig","EglContext","EglDisplay"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandclientbufferintegrationplugin_p.h","Functions":[{"Uniquefunname":"virtual QWaylandClientBufferIntegration * create(const QString \u0026 key,const QStringList \u0026 paramList)","Funname":"create","Returntype":"virtual QWaylandClientBufferIntegration *","Args":"const QString \u0026 key,const QStringList \u0026 paramList"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandclientextension.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QWaylandClientExtension)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QWaylandClientExtension"},{"Uniquefunname":"    Q_DECLARE_PRIVATE(QWaylandClientExtensionTemplate)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QWaylandClientExtensionTemplate"},{"Uniquefunname":"void activeChanged()","Funname":"activeChanged","Returntype":"void","Args":""},{"Uniquefunname":"private Q_SLOTS addRegistryListener()","Funname":"addRegistryListener","Returntype":"private Q_SLOTS","Args":""},{"Uniquefunname":"virtual void bind(struct::wl_registry * registry,int id,int version)","Funname":"bind","Returntype":"virtual void","Args":"struct::wl_registry * registry,int id,int version"},{"Uniquefunname":"void bind(struct::wl_registry * registry,int id,int ver)","Funname":"bind","Returntype":"void","Args":"struct::wl_registry * registry,int id,int ver"},{"Uniquefunname":"const struct wl_interface * extensionInterface()","Funname":"extensionInterface","Returntype":"const struct wl_interface *","Args":""},{"Uniquefunname":"virtual const struct wl_interface * extensionInterface()","Funname":"extensionInterface","Returntype":"virtual const struct wl_interface *","Args":""},{"Uniquefunname":"QtWaylandClient integration()","Funname":"integration","Returntype":"QtWaylandClient","Args":""},{"Uniquefunname":"bool isActive()","Funname":"isActive","Returntype":"bool","Args":""},{"Uniquefunname":"protected setVersion(const int version)","Funname":"setVersion","Returntype":"protected","Args":"const int version"},{"Uniquefunname":"int version()","Funname":"version","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS versionChanged()","Funname":"versionChanged","Returntype":"Q_SIGNALS","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandclientextension_p.h","Functions":[{"Uniquefunname":"    QWaylandClientExtensionTemplatePrivate()","Funname":"QWaylandClientExtensionTemplatePrivate","Returntype":"public","Args":""},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QWaylandClientExtension)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QWaylandClientExtension"},{"Uniquefunname":"void handleRegistryGlobal(void * data,::wl_registry * registry,uint32_t id,const QString \u0026 interface,uint32_t version)","Funname":"handleRegistryGlobal","Returntype":"void","Args":"void * data,::wl_registry * registry,uint32_t id,const QString \u0026 interface,uint32_t version"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandclipboard_p.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(clipboard)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"clipboard"},{"Uniquefunname":"public QWaylandClipboard(QWaylandDisplay * display)","Funname":"QWaylandClipboard","Returntype":"public","Args":"QWaylandDisplay * display"},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandcursor_p.h","Functions":[{"Uniquefunname":"public QWaylandCursor(QWaylandScreen * screen)","Funname":"QWaylandCursor","Returntype":"public","Args":"QWaylandScreen * screen"},{"Uniquefunname":"explicit QWaylandCursorTheme(struct::wl_cursor_theme * theme)","Funname":"QWaylandCursorTheme","Returntype":"explicit","Args":"struct::wl_cursor_theme * theme"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"public create(QWaylandShm * shm,int size)","Funname":"create","Returntype":"public","Args":"QWaylandShm * shm,int size"},{"Uniquefunname":"QWaylandCursorTheme * create(QWaylandShm * shm,int size,const QString \u0026 themeName)","Funname":"create","Returntype":"QWaylandCursorTheme *","Args":"QWaylandShm * shm,int size,const QString \u0026 themeName"},{"Uniquefunname":"QSharedPointer\u003cQWaylandBuffer\u003e cursorBitmapImage(const QCursor * cursor)","Funname":"cursorBitmapImage","Returntype":"QSharedPointer\u003cQWaylandBuffer\u003e","Args":"const QCursor * cursor"},{"Uniquefunname":"wl_cursor_image * cursorImage(Qt::CursorShape shape)","Funname":"cursorImage","Returntype":"wl_cursor_image *","Args":"Qt::CursorShape shape"},{"Uniquefunname":"void pointerEvent(const QMouseEvent \u0026 event)","Funname":"pointerEvent","Returntype":"void","Args":"const QMouseEvent \u0026 event"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":" requestCursor(WaylandCursor shape)","Funname":"requestCursor","Returntype":"","Args":"WaylandCursor shape"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QWaylandCursorTheme()","Funname":"~QWaylandCursorTheme","Returntype":"","Args":""}],"Records":[{"Name":"enum:WaylandCursor","Fields":["ArrowCursor","BlankCursor","BusyCursor","ClosedHandCursor","CrossCursor","DragCopyCursor","DragLinkCursor","DragMoveCursor","ForbiddenCursor","IBeamCursor","OpenHandCursor","PointingHandCursor","ResizeEastCursor","ResizeNorthCursor","ResizeNorthEastCursor","ResizeNorthWestCursor","ResizeSouthCursor","ResizeSouthEastCursor","ResizeSouthWestCursor","ResizeWestCursor","SizeAllCursor","SizeBDiagCursor","SizeFDiagCursor","SizeHorCursor","SizeVerCursor","SplitHCursor","SplitVCursor","UpArrowCursor","WaitCursor","WhatsThisCursor"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylanddatadevice_p.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(wayland_datadevice)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"wayland_datadevice"},{"Uniquefunname":"Q_OBJECT public QWaylandDataDevice(QWaylandDataDeviceManager * manager,QWaylandInputDevice * inputDevice)","Funname":"QWaylandDataDevice","Returntype":"Q_OBJECT public","Args":"QWaylandDataDeviceManager * manager,QWaylandInputDevice * inputDevice"},{"Uniquefunname":"private calculateDragPosition(int x,int y,QWindow * wnd)","Funname":"calculateDragPosition","Returntype":"private","Args":"int x,int y,QWindow * wnd"},{"Uniquefunname":"void cancelDrag()","Funname":"cancelDrag","Returntype":"void","Args":""},{"Uniquefunname":"protected data_device_data_offer(struct::wl_data_offer * id)","Funname":"data_device_data_offer","Returntype":"protected","Args":"struct::wl_data_offer * id"},{"Uniquefunname":"void data_device_drop()","Funname":"data_device_drop","Returntype":"void","Args":""},{"Uniquefunname":"void data_device_enter(uint32_t serial,struct::wl_surface * surface,wl_fixed_t x,wl_fixed_t y,struct::wl_data_offer * id)","Funname":"data_device_enter","Returntype":"void","Args":"uint32_t serial,struct::wl_surface * surface,wl_fixed_t x,wl_fixed_t y,struct::wl_data_offer * id"},{"Uniquefunname":"void data_device_leave()","Funname":"data_device_leave","Returntype":"void","Args":""},{"Uniquefunname":"void data_device_motion(uint32_t time,wl_fixed_t x,wl_fixed_t y)","Funname":"data_device_motion","Returntype":"void","Args":"uint32_t time,wl_fixed_t x,wl_fixed_t y"},{"Uniquefunname":"void data_device_selection(struct::wl_data_offer * id)","Funname":"data_device_selection","Returntype":"void","Args":"struct::wl_data_offer * id"},{"Uniquefunname":"QWaylandDataOffer * dragOffer()","Funname":"dragOffer","Returntype":"QWaylandDataOffer *","Args":""},{"Uniquefunname":"void dragSourceCancelled()","Funname":"dragSourceCancelled","Returntype":"void","Args":""},{"Uniquefunname":"void dragSourceTargetChanged(const QString \u0026 mimeType)","Funname":"dragSourceTargetChanged","Returntype":"void","Args":"const QString \u0026 mimeType"},{"Uniquefunname":"void invalidateSelectionOffer()","Funname":"invalidateSelectionOffer","Returntype":"void","Args":""},{"Uniquefunname":"QWaylandDataOffer * selectionOffer()","Funname":"selectionOffer","Returntype":"QWaylandDataOffer *","Args":""},{"Uniquefunname":"QWaylandDataSource * selectionSource()","Funname":"selectionSource","Returntype":"QWaylandDataSource *","Args":""},{"Uniquefunname":"private Q_SLOTS selectionSourceCancelled()","Funname":"selectionSourceCancelled","Returntype":"private Q_SLOTS","Args":""},{"Uniquefunname":"void setSelectionSource(QWaylandDataSource * source)","Funname":"setSelectionSource","Returntype":"void","Args":"QWaylandDataSource * source"},{"Uniquefunname":"void startDrag(QMimeData * mimeData,QWaylandWindow * icon)","Funname":"startDrag","Returntype":"void","Args":"QMimeData * mimeData,QWaylandWindow * icon"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylanddatadevicemanager_p.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(wayland_datadevice)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"wayland_datadevice"},{"Uniquefunname":"public QWaylandDataDeviceManager(QWaylandDisplay * display,uint32_t id)","Funname":"QWaylandDataDeviceManager","Returntype":"public","Args":"QWaylandDisplay * display,uint32_t id"},{"Uniquefunname":"QWaylandDisplay * display()","Funname":"display","Returntype":"QWaylandDisplay *","Args":""},{"Uniquefunname":"QWaylandDataDevice * getDataDevice(QWaylandInputDevice * inputDevice)","Funname":"getDataDevice","Returntype":"QWaylandDataDevice *","Args":"QWaylandInputDevice * inputDevice"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylanddataoffer_p.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(wayland_datadevice)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"wayland_datadevice"},{"Uniquefunname":"public QWaylandDataOffer(QWaylandDisplay * display,struct::wl_data_offer * offer)","Funname":"QWaylandDataOffer","Returntype":"public","Args":"QWaylandDisplay * display,struct::wl_data_offer * offer"},{"Uniquefunname":"public QWaylandMimeData(QWaylandDataOffer * dataOffer,QWaylandDisplay * display)","Funname":"QWaylandMimeData","Returntype":"public","Args":"QWaylandDataOffer * dataOffer,QWaylandDisplay * display"},{"Uniquefunname":"void appendFormat(const QString \u0026 mimeType)","Funname":"appendFormat","Returntype":"void","Args":"const QString \u0026 mimeType"},{"Uniquefunname":"protected data_offer_offer(const QString \u0026 mime_type)","Funname":"data_offer_offer","Returntype":"protected","Args":"const QString \u0026 mime_type"},{"Uniquefunname":"QString firstFormat()","Funname":"firstFormat","Returntype":"QString","Args":""},{"Uniquefunname":"QStringList formats_sys()","Funname":"formats_sys","Returntype":"QStringList","Args":""},{"Uniquefunname":"protected hasFormat_sys(const QString \u0026 mimeType)","Funname":"hasFormat_sys","Returntype":"protected","Args":"const QString \u0026 mimeType"},{"Uniquefunname":"QMimeData * mimeData()","Funname":"mimeData","Returntype":"QMimeData *","Args":""},{"Uniquefunname":"private readData(int fd,QByteArray \u0026 data)","Funname":"readData","Returntype":"private","Args":"int fd,QByteArray \u0026 data"},{"Uniquefunname":"QVariant retrieveData_sys(const QString \u0026 mimeType,QVariant::Type type)","Funname":"retrieveData_sys","Returntype":"QVariant","Args":"const QString \u0026 mimeType,QVariant::Type type"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylanddatasource_p.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(wayland_datadevice)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"wayland_datadevice"},{"Uniquefunname":"Q_OBJECT public QWaylandDataSource(QWaylandDataDeviceManager * dataDeviceManager,QMimeData * mimeData)","Funname":"QWaylandDataSource","Returntype":"Q_OBJECT public","Args":"QWaylandDataDeviceManager * dataDeviceManager,QMimeData * mimeData"},{"Uniquefunname":"void cancelled()","Funname":"cancelled","Returntype":"void","Args":""},{"Uniquefunname":"protected data_source_cancelled()","Funname":"data_source_cancelled","Returntype":"protected","Args":""},{"Uniquefunname":"void data_source_send(const QString \u0026 mime_type,int32_t fd)","Funname":"data_source_send","Returntype":"void","Args":"const QString \u0026 mime_type,int32_t fd"},{"Uniquefunname":"void data_source_target(const QString \u0026 mime_type)","Funname":"data_source_target","Returntype":"void","Args":"const QString \u0026 mime_type"},{"Uniquefunname":"QMimeData * mimeData()","Funname":"mimeData","Returntype":"QMimeData *","Args":""},{"Uniquefunname":"Q_SIGNALS targetChanged(const QString \u0026 mime_type)","Funname":"targetChanged","Returntype":"Q_SIGNALS","Args":"const QString \u0026 mime_type"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylanddecorationplugin_p.h","Functions":[{"Uniquefunname":"virtual QWaylandAbstractDecoration * create(const QString \u0026 key,const QStringList \u0026 paramList)","Funname":"create","Returntype":"virtual QWaylandAbstractDecoration *","Args":"const QString \u0026 key,const QStringList \u0026 paramList"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylanddisplay_p.h","Functions":[{"Uniquefunname":"Q_OBJECT public QWaylandDisplay(QWaylandIntegration * waylandIntegration)","Funname":"QWaylandDisplay","Returntype":"Q_OBJECT public","Args":"QWaylandIntegration * waylandIntegration"},{"Uniquefunname":"Q_WAYLAND_CLIENT_EXPORT Q_DECLARE_LOGGING_CATEGORY(lcQpaWayland)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"Q_WAYLAND_CLIENT_EXPORT","Args":"lcQpaWayland"},{"Uniquefunname":" RegistryGlobal(uint32_t id_,const QString \u0026 interface_,uint32_t version_,struct::wl_registry * registry_)","Funname":"RegistryGlobal","Returntype":"","Args":"uint32_t id_,const QString \u0026 interface_,uint32_t version_,struct::wl_registry * registry_"},{"Uniquefunname":" RegistryGlobal::RegistryGlobal(uint32_t id_,const QString \u0026 interface_,uint32_t version_,struct::wl_registry * registry_)","Funname":"RegistryGlobal::RegistryGlobal","Returntype":"","Args":"uint32_t id_,const QString \u0026 interface_,uint32_t version_,struct::wl_registry * registry_"},{"Uniquefunname":"void addRegistryListener(RegistryListener listener,void * data)","Funname":"addRegistryListener","Returntype":"void","Args":"RegistryListener listener,void * data"},{"Uniquefunname":"public slots blockingReadEvents()","Funname":"blockingReadEvents","Returntype":"public slots","Args":""},{"Uniquefunname":"void checkError()","Funname":"checkError","Returntype":"void","Args":""},{"Uniquefunname":"QWaylandClientBufferIntegration * clientBufferIntegration()","Funname":"clientBufferIntegration","Returntype":"QWaylandClientBufferIntegration *","Args":""},{"Uniquefunname":"QtWayland compositor()","Funname":"compositor","Returntype":"QtWayland","Args":""},{"Uniquefunname":"int compositorVersion()","Funname":"compositorVersion","Returntype":"int","Args":""},{"Uniquefunname":" createRegion(const QRegion \u0026 qregion)","Funname":"createRegion","Returntype":"","Args":"const QRegion \u0026 qregion"},{"Uniquefunname":"QWaylandShellSurface * createShellSurface(QWaylandWindow * window)","Funname":"createShellSurface","Returntype":"QWaylandShellSurface *","Args":"QWaylandWindow * window"},{"Uniquefunname":" createSubSurface(QWaylandWindow * window,QWaylandWindow * parent)","Funname":"createSubSurface","Returntype":"","Args":"QWaylandWindow * window,QWaylandWindow * parent"},{"Uniquefunname":"wl_surface * createSurface(void * handle)","Funname":"createSurface","Returntype":"wl_surface *","Args":"void * handle"},{"Uniquefunname":"QWaylandInputDevice * currentInputDevice()","Funname":"currentInputDevice","Returntype":"QWaylandInputDevice *","Args":""},{"Uniquefunname":"uint32_t currentTimeMillisec()","Funname":"currentTimeMillisec","Returntype":"uint32_t","Args":""},{"Uniquefunname":"QWaylandInputDevice * defaultInputDevice()","Funname":"defaultInputDevice","Returntype":"QWaylandInputDevice *","Args":""},{"Uniquefunname":"QWaylandDataDeviceManager * dndSelectionHandler()","Funname":"dndSelectionHandler","Returntype":"QWaylandDataDeviceManager *","Args":""},{"Uniquefunname":"void exitWithError()","Funname":"exitWithError","Returntype":"void","Args":""},{"Uniquefunname":"void flushRequests()","Funname":"flushRequests","Returntype":"void","Args":""},{"Uniquefunname":"void forceRoundTrip()","Funname":"forceRoundTrip","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cRegistryGlobal\u003e globals()","Funname":"globals","Returntype":"QList\u003cRegistryGlobal\u003e","Args":""},{"Uniquefunname":"void handleKeyboardFocusChanged(QWaylandInputDevice * inputDevice)","Funname":"handleKeyboardFocusChanged","Returntype":"void","Args":"QWaylandInputDevice * inputDevice"},{"Uniquefunname":"void handleWaylandSync()","Funname":"handleWaylandSync","Returntype":"void","Args":""},{"Uniquefunname":"void handleWindowActivated(QWaylandWindow * window)","Funname":"handleWindowActivated","Returntype":"void","Args":"QWaylandWindow * window"},{"Uniquefunname":"void handleWindowDeactivated(QWaylandWindow * window)","Funname":"handleWindowDeactivated","Returntype":"void","Args":"QWaylandWindow * window"},{"Uniquefunname":"void handleWindowDestroyed(QWaylandWindow * window)","Funname":"handleWindowDestroyed","Returntype":"void","Args":"QWaylandWindow * window"},{"Uniquefunname":"QWaylandHardwareIntegration * hardwareIntegration()","Funname":"hardwareIntegration","Returntype":"QWaylandHardwareIntegration *","Args":""},{"Uniquefunname":"bool hasRegistryGlobal(const QString \u0026 interfaceName)","Funname":"hasRegistryGlobal","Returntype":"bool","Args":"const QString \u0026 interfaceName"},{"Uniquefunname":"QList\u003cQWaylandInputDevice * \u003e inputDevices()","Funname":"inputDevices","Returntype":"QList\u003cQWaylandInputDevice * \u003e","Args":""},{"Uniquefunname":"QWaylandInputDevice * lastInputDevice()","Funname":"lastInputDevice","Returntype":"QWaylandInputDevice *","Args":""},{"Uniquefunname":"uint32_t lastInputSerial()","Funname":"lastInputSerial","Returntype":"uint32_t","Args":""},{"Uniquefunname":"QWaylandWindow * lastInputWindow()","Funname":"lastInputWindow","Returntype":"QWaylandWindow *","Args":""},{"Uniquefunname":"QWaylandCursorTheme * loadCursorTheme(qreal devicePixelRatio)","Funname":"loadCursorTheme","Returntype":"QWaylandCursorTheme *","Args":"qreal devicePixelRatio"},{"Uniquefunname":"void registry_global(uint32_t id,const QString \u0026 interface,uint32_t version)","Funname":"registry_global","Returntype":"void","Args":"uint32_t id,const QString \u0026 interface,uint32_t version"},{"Uniquefunname":"void registry_global_remove(uint32_t id)","Funname":"registry_global_remove","Returntype":"void","Args":"uint32_t id"},{"Uniquefunname":"void requestWaylandSync()","Funname":"requestWaylandSync","Returntype":"void","Args":""},{"Uniquefunname":"QWaylandScreen * screenForOutput(struct wl_output * output)","Funname":"screenForOutput","Returntype":"QWaylandScreen *","Args":"struct wl_output * output"},{"Uniquefunname":"QList\u003cQWaylandScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQWaylandScreen * \u003e","Args":""},{"Uniquefunname":"void setCursor(const QSharedPointer\u003cQWaylandBuffer\u003e \u0026 buffer,const QPoint \u0026 hotSpot,qreal dpr)","Funname":"setCursor","Returntype":"void","Args":"const QSharedPointer\u003cQWaylandBuffer\u003e \u0026 buffer,const QPoint \u0026 hotSpot,qreal dpr"},{"Uniquefunname":"void setCursor(struct wl_buffer * buffer,struct wl_cursor_image * image,qreal dpr)","Funname":"setCursor","Returntype":"void","Args":"struct wl_buffer * buffer,struct wl_cursor_image * image,qreal dpr"},{"Uniquefunname":"void setLastInputDevice(QWaylandInputDevice * device,uint32_t serial,QWaylandWindow * window)","Funname":"setLastInputDevice","Returntype":"void","Args":"QWaylandInputDevice * device,uint32_t serial,QWaylandWindow * window"},{"Uniquefunname":"void shellHandleConfigure(void * data,struct wl_shell * shell,uint32_t time,uint32_t edges,struct wl_surface * surface,int32_t width,int32_t height)","Funname":"shellHandleConfigure","Returntype":"void","Args":"void * data,struct wl_shell * shell,uint32_t time,uint32_t edges,struct wl_surface * surface,int32_t width,int32_t height"},{"Uniquefunname":"QWaylandShm * shm()","Funname":"shm","Returntype":"QWaylandShm *","Args":""},{"Uniquefunname":"bool supportsWindowDecoration()","Funname":"supportsWindowDecoration","Returntype":"bool","Args":""},{"Uniquefunname":"QtWayland textInputManager()","Funname":"textInputManager","Returntype":"QtWayland","Args":""},{"Uniquefunname":"QWaylandTouchExtension * touchExtension()","Funname":"touchExtension","Returntype":"QWaylandTouchExtension *","Args":""},{"Uniquefunname":"private waitForScreens()","Funname":"waitForScreens","Returntype":"private","Args":""},{"Uniquefunname":"QtWayland windowExtension()","Funname":"windowExtension","Returntype":"QtWayland","Args":""},{"Uniquefunname":"QWaylandWindowManagerIntegration * windowManagerIntegration()","Funname":"windowManagerIntegration","Returntype":"QWaylandWindowManagerIntegration *","Args":""},{"Uniquefunname":"const struct wl_compositor * wl_compositor()","Funname":"wl_compositor","Returntype":"const struct wl_compositor *","Args":""},{"Uniquefunname":"wl_display * wl_display()","Funname":"wl_display","Returntype":"wl_display *","Args":""},{"Uniquefunname":" wl_registry()","Funname":"wl_registry","Returntype":"","Args":""},{"Uniquefunname":"QtWayland xdgOutputManager()","Funname":"xdgOutputManager","Returntype":"QtWayland","Args":""}],"Records":[{"Name":"struct:Listener","Fields":["void *","RegistryListener"]},{"Name":"struct:RegistryGlobal","Fields":["uint32_t","QString","::wl_registry *","uint32_t"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylanddnd_p.h","Functions":[{"Uniquefunname":"public QWaylandDrag(QWaylandDisplay * display)","Funname":"QWaylandDrag","Returntype":"public","Args":"QWaylandDisplay * display"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"void finishDrag(const QPlatformDropQtResponse \u0026 response)","Funname":"finishDrag","Returntype":"void","Args":"const QPlatformDropQtResponse \u0026 response"},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void setResponse(const QPlatformDragQtResponse \u0026 response)","Funname":"setResponse","Returntype":"void","Args":"const QPlatformDragQtResponse \u0026 response"},{"Uniquefunname":"protected startDrag()","Funname":"startDrag","Returntype":"protected","Args":""},{"Uniquefunname":"void updateTarget(const QString \u0026 mimeType)","Funname":"updateTarget","Returntype":"void","Args":"const QString \u0026 mimeType"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandextendedsurface_p.h","Functions":[{"Uniquefunname":"public QWaylandExtendedSurface(QWaylandWindow * window)","Funname":"QWaylandExtendedSurface","Returntype":"public","Args":"QWaylandWindow * window"},{"Uniquefunname":"void extended_surface_close()","Funname":"extended_surface_close","Returntype":"void","Args":""},{"Uniquefunname":"private extended_surface_onscreen_visibility(int32_t visibility)","Funname":"extended_surface_onscreen_visibility","Returntype":"private","Args":"int32_t visibility"},{"Uniquefunname":"void extended_surface_set_generic_property(const QString \u0026 name,wl_array * value)","Funname":"extended_surface_set_generic_property","Returntype":"void","Args":"const QString \u0026 name,wl_array * value"},{"Uniquefunname":"void setContentOrientationMask(Qt::ScreenOrientations mask)","Funname":"setContentOrientationMask","Returntype":"void","Args":"Qt::ScreenOrientations mask"},{"Uniquefunname":"Qt setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"Qt","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void updateGenericProperty(const QString \u0026 name,const QVariant \u0026 value)","Funname":"updateGenericProperty","Returntype":"void","Args":"const QString \u0026 name,const QVariant \u0026 value"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandhardwareintegration_p.h","Functions":[{"Uniquefunname":"public QWaylandHardwareIntegration(struct::wl_registry * registry,int id)","Funname":"QWaylandHardwareIntegration","Returntype":"public","Args":"struct::wl_registry * registry,int id"},{"Uniquefunname":"QString clientBufferIntegration()","Funname":"clientBufferIntegration","Returntype":"QString","Args":""},{"Uniquefunname":"protected hardware_integration_client_backend(const QString \u0026 name)","Funname":"hardware_integration_client_backend","Returntype":"protected","Args":"const QString \u0026 name"},{"Uniquefunname":"void hardware_integration_server_backend(const QString \u0026 name)","Funname":"hardware_integration_server_backend","Returntype":"void","Args":"const QString \u0026 name"},{"Uniquefunname":"QString serverBufferIntegration()","Funname":"serverBufferIntegration","Returntype":"QString","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandinputcontext_p.h","Functions":[{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(qLcQpaInputMethods)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"qLcQpaInputMethods"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandinputdevice_p.h","Functions":[{"Uniquefunname":"Q_OBJECT public Keyboard(QWaylandInputDevice * p)","Funname":"Keyboard","Returntype":"Q_OBJECT public","Args":"QWaylandInputDevice * p"},{"Uniquefunname":"public Pointer(QWaylandInputDevice * p)","Funname":"Pointer","Returntype":"public","Args":"QWaylandInputDevice * p"},{"Uniquefunname":" QWaylandInputDevice(QWaylandDisplay * display,int version,uint32_t id)","Funname":"QWaylandInputDevice","Returntype":"","Args":"QWaylandDisplay * display,int version,uint32_t id"},{"Uniquefunname":" QWaylandPointerEvent(Type t,ulong ts,const QPointF \u0026 l,const QPointF \u0026 g,Qt::MouseButtons b,Qt::KeyboardModifiers m)","Funname":"QWaylandPointerEvent","Returntype":"","Args":"Type t,ulong ts,const QPointF \u0026 l,const QPointF \u0026 g,Qt::MouseButtons b,Qt::KeyboardModifiers m"},{"Uniquefunname":" QWaylandPointerEvent(Type t,ulong ts,const QPointF \u0026 l,const QPointF \u0026 g,const QPoint \u0026 pd,const QPoint \u0026 ad,Qt::KeyboardModifiers m)","Funname":"QWaylandPointerEvent","Returntype":"","Args":"Type t,ulong ts,const QPointF \u0026 l,const QPointF \u0026 g,const QPoint \u0026 pd,const QPoint \u0026 ad,Qt::KeyboardModifiers m"},{"Uniquefunname":"public Touch(QWaylandInputDevice * p)","Funname":"Touch","Returntype":"public","Args":"QWaylandInputDevice * p"},{"Uniquefunname":"bool allTouchPointsReleased()","Funname":"allTouchPointsReleased","Returntype":"bool","Args":""},{"Uniquefunname":"uint32_t capabilities()","Funname":"capabilities","Returntype":"uint32_t","Args":""},{"Uniquefunname":"void createComposeState()","Funname":"createComposeState","Returntype":"void","Args":""},{"Uniquefunname":"private createDefaultKeyMap()","Funname":"createDefaultKeyMap","Returntype":"private","Args":""},{"Uniquefunname":"virtual Keyboard * createKeyboard(QWaylandInputDevice * device)","Funname":"createKeyboard","Returntype":"virtual Keyboard *","Args":"QWaylandInputDevice * device"},{"Uniquefunname":"virtual Pointer * createPointer(QWaylandInputDevice * device)","Funname":"createPointer","Returntype":"virtual Pointer *","Args":"QWaylandInputDevice * device"},{"Uniquefunname":"virtual Touch * createTouch(QWaylandInputDevice * device)","Funname":"createTouch","Returntype":"virtual Touch *","Args":"QWaylandInputDevice * device"},{"Uniquefunname":"uint32_t cursorSerial()","Funname":"cursorSerial","Returntype":"uint32_t","Args":""},{"Uniquefunname":"QWaylandDataDevice * dataDevice()","Funname":"dataDevice","Returntype":"QWaylandDataDevice *","Args":""},{"Uniquefunname":"void handleEndDrag()","Funname":"handleEndDrag","Returntype":"void","Args":""},{"Uniquefunname":"void handleTouchPoint(int id,double x,double y,Qt::TouchPointState state)","Funname":"handleTouchPoint","Returntype":"void","Args":"int id,double x,double y,Qt::TouchPointState state"},{"Uniquefunname":"void handleWindowDestroyed(QWaylandWindow * window)","Funname":"handleWindowDestroyed","Returntype":"void","Args":"QWaylandWindow * window"},{"Uniquefunname":"QWaylandWindow * keyboardFocus()","Funname":"keyboardFocus","Returntype":"QWaylandWindow *","Args":""},{"Uniquefunname":"void keyboard_enter(uint32_t time,struct wl_surface * surface,struct wl_array * keys)","Funname":"keyboard_enter","Returntype":"void","Args":"uint32_t time,struct wl_surface * surface,struct wl_array * keys"},{"Uniquefunname":"void keyboard_key(uint32_t serial,uint32_t time,uint32_t key,uint32_t state)","Funname":"keyboard_key","Returntype":"void","Args":"uint32_t serial,uint32_t time,uint32_t key,uint32_t state"},{"Uniquefunname":"void keyboard_keymap(uint32_t format,int32_t fd,uint32_t size)","Funname":"keyboard_keymap","Returntype":"void","Args":"uint32_t format,int32_t fd,uint32_t size"},{"Uniquefunname":"void keyboard_leave(uint32_t time,struct wl_surface * surface)","Funname":"keyboard_leave","Returntype":"void","Args":"uint32_t time,struct wl_surface * surface"},{"Uniquefunname":"void keyboard_modifiers(uint32_t serial,uint32_t mods_depressed,uint32_t mods_latched,uint32_t mods_locked,uint32_t group)","Funname":"keyboard_modifiers","Returntype":"void","Args":"uint32_t serial,uint32_t mods_depressed,uint32_t mods_latched,uint32_t mods_locked,uint32_t group"},{"Uniquefunname":"Qt modifiers()","Funname":"modifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QWaylandWindow * pointerFocus()","Funname":"pointerFocus","Returntype":"QWaylandWindow *","Args":""},{"Uniquefunname":"void pointer_axis(uint32_t time,uint32_t axis,wl_fixed_t value)","Funname":"pointer_axis","Returntype":"void","Args":"uint32_t time,uint32_t axis,wl_fixed_t value"},{"Uniquefunname":"void pointer_button(uint32_t serial,uint32_t time,uint32_t button,uint32_t state)","Funname":"pointer_button","Returntype":"void","Args":"uint32_t serial,uint32_t time,uint32_t button,uint32_t state"},{"Uniquefunname":"void pointer_enter(uint32_t serial,struct wl_surface * surface,wl_fixed_t sx,wl_fixed_t sy)","Funname":"pointer_enter","Returntype":"void","Args":"uint32_t serial,struct wl_surface * surface,wl_fixed_t sx,wl_fixed_t sy"},{"Uniquefunname":"void pointer_leave(uint32_t time,struct wl_surface * surface)","Funname":"pointer_leave","Returntype":"void","Args":"uint32_t time,struct wl_surface * surface"},{"Uniquefunname":"void pointer_motion(uint32_t time,wl_fixed_t sx,wl_fixed_t sy)","Funname":"pointer_motion","Returntype":"void","Args":"uint32_t time,wl_fixed_t sx,wl_fixed_t sy"},{"Uniquefunname":"void releaseButtons()","Funname":"releaseButtons","Returntype":"void","Args":""},{"Uniquefunname":"void releaseComposeState()","Funname":"releaseComposeState","Returntype":"void","Args":""},{"Uniquefunname":"void releaseKeyMap()","Funname":"releaseKeyMap","Returntype":"void","Args":""},{"Uniquefunname":"void releasePoints()","Funname":"releasePoints","Returntype":"void","Args":""},{"Uniquefunname":"void removeMouseButtonFromState(Qt::MouseButton button)","Funname":"removeMouseButtonFromState","Returntype":"void","Args":"Qt::MouseButton button"},{"Uniquefunname":"private slots repeatKey()","Funname":"repeatKey","Returntype":"private slots","Args":""},{"Uniquefunname":"void seat_capabilities(uint32_t caps)","Funname":"seat_capabilities","Returntype":"void","Args":"uint32_t caps"},{"Uniquefunname":"uint32_t serial()","Funname":"serial","Returntype":"uint32_t","Args":""},{"Uniquefunname":"uint32_t QWaylandInputDevice serial()","Funname":"serial","Returntype":"uint32_t QWaylandInputDevice","Args":""},{"Uniquefunname":"private setCursor(Qt::CursorShape cursor,QWaylandScreen * screen)","Funname":"setCursor","Returntype":"private","Args":"Qt::CursorShape cursor,QWaylandScreen * screen"},{"Uniquefunname":"void setCursor(const QCursor \u0026 cursor,QWaylandScreen * screen)","Funname":"setCursor","Returntype":"void","Args":"const QCursor \u0026 cursor,QWaylandScreen * screen"},{"Uniquefunname":"void setCursor(const QSharedPointer\u003cQWaylandBuffer\u003e \u0026 buffer,const QPoint \u0026 hotSpot,int bufferScale)","Funname":"setCursor","Returntype":"void","Args":"const QSharedPointer\u003cQWaylandBuffer\u003e \u0026 buffer,const QPoint \u0026 hotSpot,int bufferScale"},{"Uniquefunname":"void setCursor(struct wl_buffer * buffer,const QPoint \u0026 hotSpot,const QSize \u0026 size,int bufferScale)","Funname":"setCursor","Returntype":"void","Args":"struct wl_buffer * buffer,const QPoint \u0026 hotSpot,const QSize \u0026 size,int bufferScale"},{"Uniquefunname":"void setCursor(struct wl_buffer * buffer,struct::wl_cursor_image * image,int bufferScale)","Funname":"setCursor","Returntype":"void","Args":"struct wl_buffer * buffer,struct::wl_cursor_image * image,int bufferScale"},{"Uniquefunname":"void setDataDevice(QWaylandDataDevice * device)","Funname":"setDataDevice","Returntype":"void","Args":"QWaylandDataDevice * device"},{"Uniquefunname":"void setTextInput(QWaylandTextInput * textInput)","Funname":"setTextInput","Returntype":"void","Args":"QWaylandTextInput * textInput"},{"Uniquefunname":"void stopRepeat()","Funname":"stopRepeat","Returntype":"void","Args":""},{"Uniquefunname":"QWaylandTextInput * textInput()","Funname":"textInput","Returntype":"QWaylandTextInput *","Args":""},{"Uniquefunname":"QWaylandWindow * touchFocus()","Funname":"touchFocus","Returntype":"QWaylandWindow *","Args":""},{"Uniquefunname":"void touch_cancel()","Funname":"touch_cancel","Returntype":"void","Args":""},{"Uniquefunname":"void touch_down(uint32_t serial,uint32_t time,struct wl_surface * surface,int32_t id,wl_fixed_t x,wl_fixed_t y)","Funname":"touch_down","Returntype":"void","Args":"uint32_t serial,uint32_t time,struct wl_surface * surface,int32_t id,wl_fixed_t x,wl_fixed_t y"},{"Uniquefunname":"void touch_frame()","Funname":"touch_frame","Returntype":"void","Args":""},{"Uniquefunname":"void touch_motion(uint32_t time,int32_t id,wl_fixed_t x,wl_fixed_t y)","Funname":"touch_motion","Returntype":"void","Args":"uint32_t time,int32_t id,wl_fixed_t x,wl_fixed_t y"},{"Uniquefunname":"void touch_up(uint32_t serial,uint32_t time,int32_t id)","Funname":"touch_up","Returntype":"void","Args":"uint32_t serial,uint32_t time,int32_t id"},{"Uniquefunname":" wl_seat()","Funname":"wl_seat","Returntype":"","Args":""}],"Records":[{"Name":"enum:Type","Fields":["Enter","Motion","Wheel"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandinputdeviceintegration_p.h","Functions":[{"Uniquefunname":"public QWaylandInputDeviceIntegration()","Funname":"QWaylandInputDeviceIntegration","Returntype":"public","Args":""},{"Uniquefunname":"virtual QWaylandInputDevice * createInputDevice(QWaylandDisplay * d,int version,uint32_t id)","Funname":"createInputDevice","Returntype":"virtual QWaylandInputDevice *","Args":"QWaylandDisplay * d,int version,uint32_t id"},{"Uniquefunname":"virtual ~QWaylandInputDeviceIntegration()","Funname":"~QWaylandInputDeviceIntegration","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandinputdeviceintegrationplugin_p.h","Functions":[{"Uniquefunname":"virtual QWaylandInputDeviceIntegration * create(const QString \u0026 key,const QStringList \u0026 paramList)","Funname":"create","Returntype":"virtual QWaylandInputDeviceIntegration *","Args":"const QString \u0026 key,const QStringList \u0026 paramList"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandintegration_p.h","Functions":[{"Uniquefunname":"public QWaylandIntegration()","Funname":"QWaylandIntegration","Returntype":"public","Args":""},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"virtual QWaylandClientBufferIntegration * clientBufferIntegration()","Funname":"clientBufferIntegration","Returntype":"virtual QWaylandClientBufferIntegration *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QWaylandInputDevice * createInputDevice(QWaylandDisplay * display,int version,uint32_t id)","Funname":"createInputDevice","Returntype":"QWaylandInputDevice *","Args":"QWaylandDisplay * display,int version,uint32_t id"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QWaylandShellIntegration * createShellIntegration(const QString \u0026 interfaceName)","Funname":"createShellIntegration","Returntype":"QWaylandShellIntegration *","Args":"const QString \u0026 interfaceName"},{"Uniquefunname":"QWaylandDisplay * display()","Funname":"display","Returntype":"QWaylandDisplay *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(QPlatformIntegration::Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"QPlatformIntegration::Capability cap"},{"Uniquefunname":"bool hasFailed()","Funname":"hasFailed","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"private initializeClientBufferIntegration()","Funname":"initializeClientBufferIntegration","Returntype":"private","Args":""},{"Uniquefunname":"void initializeInputDeviceIntegration()","Funname":"initializeInputDeviceIntegration","Returntype":"void","Args":""},{"Uniquefunname":"void initializeServerBufferIntegration()","Funname":"initializeServerBufferIntegration","Returntype":"void","Args":""},{"Uniquefunname":"void initializeShellIntegration()","Funname":"initializeShellIntegration","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"virtual QWaylandServerBufferIntegration * serverBufferIntegration()","Funname":"serverBufferIntegration","Returntype":"virtual QWaylandServerBufferIntegration *","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"virtual QWaylandShellIntegration * shellIntegration()","Funname":"shellIntegration","Returntype":"virtual QWaylandShellIntegration *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandnativeinterface_p.h","Functions":[{"Uniquefunname":"public QWaylandNativeInterface(QWaylandIntegration * integration)","Funname":"QWaylandNativeInterface","Returntype":"public","Args":"QWaylandIntegration * integration"},{"Uniquefunname":"void emitWindowPropertyChanged(QPlatformWindow * window,const QString \u0026 name)","Funname":"emitWindowPropertyChanged","Returntype":"void","Args":"QPlatformWindow * window,const QString \u0026 name"},{"Uniquefunname":"bool isSync(QWindow * window)","Funname":"isSync","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resourceString,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 resource)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void setDeSync(QWindow * window)","Funname":"setDeSync","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setSync(QWindow * window)","Funname":"setSync","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setWindowProperty(QPlatformWindow * window,const QString \u0026 name,const QVariant \u0026 value)","Funname":"setWindowProperty","Returntype":"void","Args":"QPlatformWindow * window,const QString \u0026 name,const QVariant \u0026 value"},{"Uniquefunname":"QVariantMap windowProperties(QPlatformWindow * window)","Funname":"windowProperties","Returntype":"QVariantMap","Args":"QPlatformWindow * window"},{"Uniquefunname":"QVariant windowProperty(QPlatformWindow * window,const QString \u0026 name)","Funname":"windowProperty","Returntype":"QVariant","Args":"QPlatformWindow * window,const QString \u0026 name"},{"Uniquefunname":"QVariant windowProperty(QPlatformWindow * window,const QString \u0026 name,const QVariant \u0026 defaultValue)","Funname":"windowProperty","Returntype":"QVariant","Args":"QPlatformWindow * window,const QString \u0026 name,const QVariant \u0026 defaultValue"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandqtkey_p.h","Functions":[{"Uniquefunname":"public QWaylandQtKeyExtension(QWaylandDisplay * display,uint32_t id)","Funname":"QWaylandQtKeyExtension","Returntype":"public","Args":"QWaylandDisplay * display,uint32_t id"},{"Uniquefunname":"void zqt_key_v1_key(struct wl_surface * surface,uint32_t time,uint32_t type,uint32_t key,uint32_t modifiers,uint32_t nativeScanCode,uint32_t nativeVirtualKey,uint32_t nativeModifiers,const QString \u0026 text,uint32_t autorep,uint32_t count)","Funname":"zqt_key_v1_key","Returntype":"void","Args":"struct wl_surface * surface,uint32_t time,uint32_t type,uint32_t key,uint32_t modifiers,uint32_t nativeScanCode,uint32_t nativeVirtualKey,uint32_t nativeModifiers,const QString \u0026 text,uint32_t autorep,uint32_t count"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandscreen_p.h","Functions":[{"Uniquefunname":"public QWaylandScreen(QWaylandDisplay * waylandDisplay,int version,uint32_t id)","Funname":"QWaylandScreen","Returntype":"public","Args":"QWaylandDisplay * waylandDisplay,int version,uint32_t id"},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"QWaylandDisplay * display()","Funname":"display","Returntype":"QWaylandDisplay *","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QWaylandScreen * fromWlOutput(::wl_output * output)","Funname":"fromWlOutput","Returntype":"QWaylandScreen *","Args":"::wl_output * output"},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"void initXdgOutput(QtWayland::zxdg_output_manager_v1 * xdgOutputManager)","Funname":"initXdgOutput","Returntype":"void","Args":"QtWayland::zxdg_output_manager_v1 * xdgOutputManager"},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":" output()","Funname":"output","Returntype":"","Args":""},{"Uniquefunname":"uint32_t outputId()","Funname":"outputId","Returntype":"uint32_t","Args":""},{"Uniquefunname":"void output_done()","Funname":"output_done","Returntype":"void","Args":""},{"Uniquefunname":"void output_geometry(int32_t x,int32_t y,int32_t width,int32_t height,int subpixel,const QString \u0026 make,const QString \u0026 model,int32_t transform)","Funname":"output_geometry","Returntype":"void","Args":"int32_t x,int32_t y,int32_t width,int32_t height,int subpixel,const QString \u0026 make,const QString \u0026 model,int32_t transform"},{"Uniquefunname":"private output_mode(uint32_t flags,int width,int height,int refresh)","Funname":"output_mode","Returntype":"private","Args":"uint32_t flags,int width,int height,int refresh"},{"Uniquefunname":"void output_scale(int32_t factor)","Funname":"output_scale","Returntype":"void","Args":"int32_t factor"},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"int scale()","Funname":"scale","Returntype":"int","Args":""},{"Uniquefunname":"void setOrientationUpdateMask(Qt::ScreenOrientations mask)","Funname":"setOrientationUpdateMask","Returntype":"void","Args":"Qt::ScreenOrientations mask"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QWaylandCursor * waylandCursor()","Funname":"waylandCursor","Returntype":"QWaylandCursor *","Args":""},{"Uniquefunname":"QWaylandScreen * waylandScreenFromWindow(QWindow * window)","Funname":"waylandScreenFromWindow","Returntype":"QWaylandScreen *","Args":"QWindow * window"},{"Uniquefunname":"void zxdg_output_v1_done()","Funname":"zxdg_output_v1_done","Returntype":"void","Args":""},{"Uniquefunname":"void zxdg_output_v1_logical_position(int32_t x,int32_t y)","Funname":"zxdg_output_v1_logical_position","Returntype":"void","Args":"int32_t x,int32_t y"},{"Uniquefunname":"void zxdg_output_v1_logical_size(int32_t width,int32_t height)","Funname":"zxdg_output_v1_logical_size","Returntype":"void","Args":"int32_t width,int32_t height"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandserverbufferintegration_p.h","Functions":[{"Uniquefunname":" QWaylandServerBuffer()","Funname":"QWaylandServerBuffer","Returntype":"","Args":""},{"Uniquefunname":"public QWaylandServerBufferIntegration()","Funname":"QWaylandServerBufferIntegration","Returntype":"public","Args":""},{"Uniquefunname":"Format format()","Funname":"format","Returntype":"Format","Args":""},{"Uniquefunname":"virtual void initialize(QWaylandDisplay * display)","Funname":"initialize","Returntype":"virtual void","Args":"QWaylandDisplay * display"},{"Uniquefunname":"virtual QWaylandServerBuffer * serverBuffer(struct qt_server_buffer * buffer)","Funname":"serverBuffer","Returntype":"virtual QWaylandServerBuffer *","Args":"struct qt_server_buffer * buffer"},{"Uniquefunname":"void setUserData(void * userData)","Funname":"setUserData","Returntype":"void","Args":"void * userData"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"virtual QOpenGLTexture * toOpenGlTexture()","Funname":"toOpenGlTexture","Returntype":"virtual QOpenGLTexture *","Args":""},{"Uniquefunname":"void * userData()","Funname":"userData","Returntype":"void *","Args":""},{"Uniquefunname":"virtual ~QWaylandServerBuffer()","Funname":"~QWaylandServerBuffer","Returntype":"virtual","Args":""},{"Uniquefunname":"virtual ~QWaylandServerBufferIntegration()","Funname":"~QWaylandServerBufferIntegration","Returntype":"virtual","Args":""}],"Records":[{"Name":"enum:Format","Fields":["A8","RGBA32"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandserverbufferintegrationplugin_p.h","Functions":[{"Uniquefunname":"virtual QWaylandServerBufferIntegration * create(const QString \u0026 key,const QStringList \u0026 paramList)","Funname":"create","Returntype":"virtual QWaylandServerBufferIntegration *","Args":"const QString \u0026 key,const QStringList \u0026 paramList"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandshellintegration_p.h","Functions":[{"Uniquefunname":"public QWaylandShellIntegration()","Funname":"QWaylandShellIntegration","Returntype":"public","Args":""},{"Uniquefunname":"virtual QWaylandShellSurface * createShellSurface(QWaylandWindow * window)","Funname":"createShellSurface","Returntype":"virtual QWaylandShellSurface *","Args":"QWaylandWindow * window"},{"Uniquefunname":"virtual void handleKeyboardFocusChanged(QWaylandWindow * newFocus,QWaylandWindow * oldFocus)","Funname":"handleKeyboardFocusChanged","Returntype":"virtual void","Args":"QWaylandWindow * newFocus,QWaylandWindow * oldFocus"},{"Uniquefunname":"virtual bool initialize(QWaylandDisplay * display)","Funname":"initialize","Returntype":"virtual bool","Args":"QWaylandDisplay * display"},{"Uniquefunname":"virtual void * nativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"virtual void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"virtual ~QWaylandShellIntegration()","Funname":"~QWaylandShellIntegration","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandshellintegrationplugin_p.h","Functions":[{"Uniquefunname":"virtual QWaylandShellIntegration * create(const QString \u0026 key,const QStringList \u0026 paramList)","Funname":"create","Returntype":"virtual QWaylandShellIntegration *","Args":"const QString \u0026 key,const QStringList \u0026 paramList"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandshellsurface_p.h","Functions":[{"Uniquefunname":"Q_OBJECT public QWaylandShellSurface(QWaylandWindow * window)","Funname":"QWaylandShellSurface","Returntype":"Q_OBJECT public","Args":"QWaylandWindow * window"},{"Uniquefunname":"virtual void applyConfigure()","Funname":"applyConfigure","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual bool handleExpose(const QRegion \u0026)","Funname":"handleExpose","Returntype":"virtual bool","Args":"const QRegion \u0026"},{"Uniquefunname":"virtual bool isExposed()","Funname":"isExposed","Returntype":"virtual bool","Args":""},{"Uniquefunname":"virtual void lower()","Funname":"lower","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual bool move(QWaylandInputDevice *)","Funname":"move","Returntype":"virtual bool","Args":"QWaylandInputDevice *"},{"Uniquefunname":"virtual void raise()","Funname":"raise","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual void requestWindowStates(Qt::WindowStates states)","Funname":"requestWindowStates","Returntype":"virtual void","Args":"Qt::WindowStates states"},{"Uniquefunname":"virtual void resize(QWaylandInputDevice *,enum wl_shell_surface_resize)","Funname":"resize","Returntype":"virtual void","Args":"QWaylandInputDevice *,enum wl_shell_surface_resize"},{"Uniquefunname":"virtual void sendProperty(const QString \u0026 name,const QVariant \u0026 value)","Funname":"sendProperty","Returntype":"virtual void","Args":"const QString \u0026 name,const QVariant \u0026 value"},{"Uniquefunname":"virtual void setAppId(const QString \u0026)","Funname":"setAppId","Returntype":"virtual void","Args":"const QString \u0026"},{"Uniquefunname":"virtual void setContentOrientationMask(Qt::ScreenOrientations orientation)","Funname":"setContentOrientationMask","Returntype":"virtual void","Args":"Qt::ScreenOrientations orientation"},{"Uniquefunname":"virtual void setTitle(const QString \u0026)","Funname":"setTitle","Returntype":"virtual void","Args":"const QString \u0026"},{"Uniquefunname":"virtual void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"virtual void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"virtual bool wantsDecorations()","Funname":"wantsDecorations","Returntype":"virtual bool","Args":""},{"Uniquefunname":"QWaylandWindow * window()","Funname":"window","Returntype":"QWaylandWindow *","Args":""},{"Uniquefunname":" ~QWaylandShellSurface()","Funname":"~QWaylandShellSurface","Returntype":"","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandshm_p.h","Functions":[{"Uniquefunname":"public QWaylandShm(QWaylandDisplay * display,int version,uint32_t id)","Funname":"QWaylandShm","Returntype":"public","Args":"QWaylandDisplay * display,int version,uint32_t id"},{"Uniquefunname":"QImage formatFrom(wl_shm_format format)","Funname":"formatFrom","Returntype":"QImage","Args":"wl_shm_format format"},{"Uniquefunname":"wl_shm_format formatFrom(QImage::Format format)","Funname":"formatFrom","Returntype":"wl_shm_format","Args":"QImage::Format format"},{"Uniquefunname":"bool formatSupported(QImage::Format format)","Funname":"formatSupported","Returntype":"bool","Args":"QImage::Format format"},{"Uniquefunname":"bool formatSupported(wl_shm_format format)","Funname":"formatSupported","Returntype":"bool","Args":"wl_shm_format format"},{"Uniquefunname":"protected shm_format(uint32_t format)","Funname":"shm_format","Returntype":"protected","Args":"uint32_t format"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandshmbackingstore_p.h","Functions":[{"Uniquefunname":"public QWaylandShmBackingStore(QWindow * window)","Funname":"QWaylandShmBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026 region)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"QImage * contentSurface()","Funname":"contentSurface","Returntype":"QImage *","Args":""},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void ensureSize()","Funname":"ensureSize","Returntype":"void","Args":""},{"Uniquefunname":"QImage * entireSurface()","Funname":"entireSurface","Returntype":"QImage *","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QWaylandShmBuffer * getBuffer(const QSize \u0026 size)","Funname":"getBuffer","Returntype":"QWaylandShmBuffer *","Args":"const QSize \u0026 size"},{"Uniquefunname":"QImage * image()","Funname":"image","Returntype":"QImage *","Args":""},{"Uniquefunname":"QImage * imageInsideMargins(const QMargins \u0026 margins)","Funname":"imageInsideMargins","Returntype":"QImage *","Args":"const QMargins \u0026 margins"},{"Uniquefunname":"void iterateBuffer()","Funname":"iterateBuffer","Returntype":"void","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"int scale()","Funname":"scale","Returntype":"int","Args":""},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":"private updateDecorations()","Funname":"updateDecorations","Returntype":"private","Args":""},{"Uniquefunname":"QWaylandWindow * waylandWindow()","Funname":"waylandWindow","Returntype":"QWaylandWindow *","Args":""},{"Uniquefunname":"QWaylandAbstractDecoration * windowDecoration()","Funname":"windowDecoration","Returntype":"QWaylandAbstractDecoration *","Args":""},{"Uniquefunname":"QMargins windowDecorationMargins()","Funname":"windowDecorationMargins","Returntype":"QMargins","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandshmwindow_p.h","Functions":[{"Uniquefunname":"public QWaylandShmWindow(QWindow * window)","Funname":"QWaylandShmWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"WindowType windowType()","Funname":"windowType","Returntype":"WindowType","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandsubsurface_p.h","Functions":[{"Uniquefunname":"public QWaylandSubSurface(QWaylandWindow * window,QWaylandWindow * parent,::wl_subsurface * subsurface)","Funname":"QWaylandSubSurface","Returntype":"public","Args":"QWaylandWindow * window,QWaylandWindow * parent,::wl_subsurface * subsurface"},{"Uniquefunname":"bool isSync()","Funname":"isSync","Returntype":"bool","Args":""},{"Uniquefunname":"QWaylandWindow * parent()","Funname":"parent","Returntype":"QWaylandWindow *","Args":""},{"Uniquefunname":"void setDeSync()","Funname":"setDeSync","Returntype":"void","Args":""},{"Uniquefunname":"void setSync()","Funname":"setSync","Returntype":"void","Args":""},{"Uniquefunname":"void set_desync()","Funname":"set_desync","Returntype":"void","Args":""},{"Uniquefunname":"private set_sync()","Funname":"set_sync","Returntype":"private","Args":""},{"Uniquefunname":"QMutex * syncMutex()","Funname":"syncMutex","Returntype":"QMutex *","Args":""},{"Uniquefunname":"QWaylandWindow * window()","Funname":"window","Returntype":"QWaylandWindow *","Args":""}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandtouch_p.h","Functions":[{"Uniquefunname":"public QWaylandTouchExtension(QWaylandDisplay * display,uint32_t id)","Funname":"QWaylandTouchExtension","Returntype":"public","Args":"QWaylandDisplay * display,uint32_t id"},{"Uniquefunname":"private registerDevice(int caps)","Funname":"registerDevice","Returntype":"private","Args":"int caps"},{"Uniquefunname":"void sendTouchEvent()","Funname":"sendTouchEvent","Returntype":"void","Args":""},{"Uniquefunname":"void touchCanceled()","Funname":"touchCanceled","Returntype":"void","Args":""},{"Uniquefunname":"void touch_extension_configure(uint32_t flags)","Funname":"touch_extension_configure","Returntype":"void","Args":"uint32_t flags"},{"Uniquefunname":"void touch_extension_touch(uint32_t time,uint32_t id,uint32_t state,int32_t x,int32_t y,int32_t normalized_x,int32_t normalized_y,int32_t width,int32_t height,uint32_t pressure,int32_t velocity_x,int32_t velocity_y,uint32_t flags,struct wl_array * rawdata)","Funname":"touch_extension_touch","Returntype":"void","Args":"uint32_t time,uint32_t id,uint32_t state,int32_t x,int32_t y,int32_t normalized_x,int32_t normalized_y,int32_t width,int32_t height,uint32_t pressure,int32_t velocity_x,int32_t velocity_y,uint32_t flags,struct wl_array * rawdata"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandwindow_p.h","Functions":[{"Uniquefunname":" QWaylandWindow(QWindow * window)","Funname":"QWaylandWindow","Returntype":"","Args":"QWindow * window"},{"Uniquefunname":"void addAttachOffset(const QPoint point)","Funname":"addAttachOffset","Returntype":"void","Args":"const QPoint point"},{"Uniquefunname":"public slots applyConfigure()","Funname":"applyConfigure","Returntype":"public slots","Args":""},{"Uniquefunname":"void applyConfigureWhenPossible()","Funname":"applyConfigureWhenPossible","Returntype":"void","Args":""},{"Uniquefunname":"void attach(QWaylandBuffer * buffer,int x,int y)","Funname":"attach","Returntype":"void","Args":"QWaylandBuffer * buffer,int x,int y"},{"Uniquefunname":"QPoint attachOffset()","Funname":"attachOffset","Returntype":"QPoint","Args":""},{"Uniquefunname":"void attachOffset(QWaylandBuffer * buffer)","Funname":"attachOffset","Returntype":"void","Args":"QWaylandBuffer * buffer"},{"Uniquefunname":"QPoint QWaylandWindow attachOffset()","Funname":"attachOffset","Returntype":"QPoint QWaylandWindow","Args":""},{"Uniquefunname":"QWaylandShmBackingStore * backingStore()","Funname":"backingStore","Returntype":"QWaylandShmBackingStore *","Args":""},{"Uniquefunname":"QWaylandScreen * calculateScreenFromSurfaceEvents()","Funname":"calculateScreenFromSurfaceEvents","Returntype":"QWaylandScreen *","Args":""},{"Uniquefunname":"void closePopups(QWaylandWindow * parent)","Funname":"closePopups","Returntype":"void","Args":"QWaylandWindow * parent"},{"Uniquefunname":"void commit(QWaylandBuffer * buffer,const QRegion \u0026 damage)","Funname":"commit","Returntype":"void","Args":"QWaylandBuffer * buffer,const QRegion \u0026 damage"},{"Uniquefunname":"bool createDecoration()","Funname":"createDecoration","Returntype":"bool","Args":""},{"Uniquefunname":"void damage(const QRect \u0026 rect)","Funname":"damage","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"QWaylandAbstractDecoration * decoration()","Funname":"decoration","Returntype":"QWaylandAbstractDecoration *","Args":""},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"QWaylandDisplay * display()","Funname":"display","Returntype":"QWaylandDisplay *","Args":""},{"Uniquefunname":"void doApplyConfigure()","Funname":"doApplyConfigure","Returntype":"void","Args":""},{"Uniquefunname":"virtual void ensureSize()","Funname":"ensureSize","Returntype":"virtual void","Args":""},{"Uniquefunname":"void frameCallback(void * data,struct wl_callback * wl_callback,uint32_t time)","Funname":"frameCallback","Returntype":"void","Args":"void * data,struct wl_callback * wl_callback,uint32_t time"},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"QWaylandWindow * fromWlSurface(::wl_surface * surface)","Funname":"fromWlSurface","Returntype":"QWaylandWindow *","Args":"::wl_surface * surface"},{"Uniquefunname":"void handleContentOrientationChange(Qt::ScreenOrientation orientation)","Funname":"handleContentOrientationChange","Returntype":"void","Args":"Qt::ScreenOrientation orientation"},{"Uniquefunname":"void handleMouse(QWaylandInputDevice * inputDevice,const QWaylandPointerEvent \u0026 e)","Funname":"handleMouse","Returntype":"void","Args":"QWaylandInputDevice * inputDevice,const QWaylandPointerEvent \u0026 e"},{"Uniquefunname":"void handleMouseEventWithDecoration(QWaylandInputDevice * inputDevice,const QWaylandPointerEvent \u0026 e)","Funname":"handleMouseEventWithDecoration","Returntype":"void","Args":"QWaylandInputDevice * inputDevice,const QWaylandPointerEvent \u0026 e"},{"Uniquefunname":"void handleMouseLeave(QWaylandInputDevice * inputDevice)","Funname":"handleMouseLeave","Returntype":"void","Args":"QWaylandInputDevice * inputDevice"},{"Uniquefunname":"void handleScreenChanged()","Funname":"handleScreenChanged","Returntype":"void","Args":""},{"Uniquefunname":"private slots handleScreenRemoved(QScreen * qScreen)","Funname":"handleScreenRemoved","Returntype":"private slots","Args":"QScreen * qScreen"},{"Uniquefunname":"void handleWindowStatesChanged(Qt::WindowStates states)","Funname":"handleWindowStatesChanged","Returntype":"void","Args":"Qt::WindowStates states"},{"Uniquefunname":"void initWindow()","Funname":"initWindow","Returntype":"void","Args":""},{"Uniquefunname":"void initializeWlSurface()","Funname":"initializeWlSurface","Returntype":"void","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QWaylandWindow * mouseGrab()","Funname":"mouseGrab","Returntype":"QWaylandWindow *","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVariantMap properties()","Funname":"properties","Returntype":"QVariantMap","Args":""},{"Uniquefunname":"QVariant property(const QString \u0026 name)","Funname":"property","Returntype":"QVariant","Args":"const QString \u0026 name"},{"Uniquefunname":"QVariant property(const QString \u0026 name,const QVariant \u0026 defaultValue)","Funname":"property","Returntype":"QVariant","Args":"const QString \u0026 name,const QVariant \u0026 defaultValue"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"void requestUpdate()","Funname":"requestUpdate","Returntype":"void","Args":""},{"Uniquefunname":"QMutex * resizeMutex()","Funname":"resizeMutex","Returntype":"QMutex *","Args":""},{"Uniquefunname":"void restoreMouseCursor(QWaylandInputDevice * device)","Funname":"restoreMouseCursor","Returntype":"void","Args":"QWaylandInputDevice * device"},{"Uniquefunname":"int scale()","Funname":"scale","Returntype":"int","Args":""},{"Uniquefunname":"void sendExposeEvent(const QRect \u0026 rect)","Funname":"sendExposeEvent","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void sendProperty(const QString \u0026 name,const QVariant \u0026 value)","Funname":"sendProperty","Returntype":"void","Args":"const QString \u0026 name,const QVariant \u0026 value"},{"Uniquefunname":"void setBackingStore(QWaylandShmBackingStore * backingStore)","Funname":"setBackingStore","Returntype":"void","Args":"QWaylandShmBackingStore * backingStore"},{"Uniquefunname":"void setCanResize(bool canResize)","Funname":"setCanResize","Returntype":"void","Args":"bool canResize"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"private setGeometry_helper(const QRect \u0026 rect)","Funname":"setGeometry_helper","Returntype":"private","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMouseCursor(QWaylandInputDevice * device,const QCursor \u0026 cursor)","Funname":"setMouseCursor","Returntype":"void","Args":"QWaylandInputDevice * device,const QCursor \u0026 cursor"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setOrientationMask(Qt::ScreenOrientations mask)","Funname":"setOrientationMask","Returntype":"void","Args":"Qt::ScreenOrientations mask"},{"Uniquefunname":"void setParent(const QPlatformWindow * parent)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * parent"},{"Uniquefunname":"void setProperty(const QString \u0026 name,const QVariant \u0026 value)","Funname":"setProperty","Returntype":"void","Args":"const QString \u0026 name,const QVariant \u0026 value"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowState(Qt::WindowStates states)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates states"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"QWaylandShellSurface * shellSurface()","Funname":"shellSurface","Returntype":"QWaylandShellSurface *","Args":""},{"Uniquefunname":"bool shouldCreateShellSurface()","Funname":"shouldCreateShellSurface","Returntype":"bool","Args":""},{"Uniquefunname":"bool shouldCreateSubSurface()","Funname":"shouldCreateSubSurface","Returntype":"bool","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QWaylandSubSurface * subSurfaceWindow()","Funname":"subSurfaceWindow","Returntype":"QWaylandSubSurface *","Args":""},{"Uniquefunname":"QSize surfaceSize()","Funname":"surfaceSize","Returntype":"QSize","Args":""},{"Uniquefunname":"protected surface_enter(struct::wl_output * output)","Funname":"surface_enter","Returntype":"protected","Args":"struct::wl_output * output"},{"Uniquefunname":"void surface_leave(struct::wl_output * output)","Funname":"surface_leave","Returntype":"void","Args":"struct::wl_output * output"},{"Uniquefunname":"bool touchDragDecoration(QWaylandInputDevice * inputDevice,const QPointF \u0026 local,const QPointF \u0026 global,Qt::TouchPointState state,Qt::KeyboardModifiers mods)","Funname":"touchDragDecoration","Returntype":"bool","Args":"QWaylandInputDevice * inputDevice,const QPointF \u0026 local,const QPointF \u0026 global,Qt::TouchPointState state,Qt::KeyboardModifiers mods"},{"Uniquefunname":"QWaylandWindow * transientParent()","Funname":"transientParent","Returntype":"QWaylandWindow *","Args":""},{"Uniquefunname":"void unfocus()","Funname":"unfocus","Returntype":"void","Args":""},{"Uniquefunname":"void waitForFrameSync()","Funname":"waitForFrameSync","Returntype":"void","Args":""},{"Uniquefunname":"QWaylandScreen * waylandScreen()","Funname":"waylandScreen","Returntype":"QWaylandScreen *","Args":""},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"QRect windowGeometry()","Funname":"windowGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QIcon windowIcon()","Funname":"windowIcon","Returntype":"QIcon","Args":""},{"Uniquefunname":"QIcon QWaylandWindow windowIcon()","Funname":"windowIcon","Returntype":"QIcon QWaylandWindow","Args":""},{"Uniquefunname":"virtual WindowType windowType()","Funname":"windowType","Returntype":"virtual WindowType","Args":""}],"Records":[{"Name":"enum:WindowType","Fields":["Egl","Shm"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandwindowmanagerintegration_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QWaylandWindowManagerIntegration)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QWaylandWindowManagerIntegration"},{"Uniquefunname":"bool openDocument(const QUrl \u0026 url)","Funname":"openDocument","Returntype":"bool","Args":"const QUrl \u0026 url"},{"Uniquefunname":"bool openUrl(const QUrl \u0026 url)","Funname":"openUrl","Returntype":"bool","Args":"const QUrl \u0026 url"},{"Uniquefunname":"void openUrl_helper(const QUrl \u0026 url)","Funname":"openUrl_helper","Returntype":"void","Args":"const QUrl \u0026 url"},{"Uniquefunname":"bool showIsFullScreen()","Funname":"showIsFullScreen","Returntype":"bool","Args":""},{"Uniquefunname":"void windowmanager_hints(int32_t showIsFullScreen)","Funname":"windowmanager_hints","Returntype":"void","Args":"int32_t showIsFullScreen"},{"Uniquefunname":"void windowmanager_quit()","Funname":"windowmanager_quit","Returntype":"void","Args":""},{"Uniquefunname":"private wlHandleListenerGlobal(void * data,wl_registry * registry,uint32_t id,const QString \u0026 interface,uint32_t version)","Funname":"wlHandleListenerGlobal","Returntype":"private","Args":"void * data,wl_registry * registry,uint32_t id,const QString \u0026 interface,uint32_t version"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandwlshellintegration_p.h","Functions":[{"Uniquefunname":"private QWaylandWlShellIntegration(QWaylandDisplay * display)","Funname":"QWaylandWlShellIntegration","Returntype":"private","Args":"QWaylandDisplay * display"},{"Uniquefunname":"public create(QWaylandDisplay * display)","Funname":"create","Returntype":"public","Args":"QWaylandDisplay * display"},{"Uniquefunname":"QWaylandShellSurface * createShellSurface(QWaylandWindow * window)","Funname":"createShellSurface","Returntype":"QWaylandShellSurface *","Args":"QWaylandWindow * window"},{"Uniquefunname":"bool initialize(QWaylandDisplay *)","Funname":"initialize","Returntype":"bool","Args":"QWaylandDisplay *"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/qwaylandxdgshellv6integration_p.h","Functions":[{"Uniquefunname":"private QWaylandXdgShellV6Integration(QWaylandDisplay * display)","Funname":"QWaylandXdgShellV6Integration","Returntype":"private","Args":"QWaylandDisplay * display"},{"Uniquefunname":"public create(QWaylandDisplay * display)","Funname":"create","Returntype":"public","Args":"QWaylandDisplay * display"},{"Uniquefunname":"QWaylandShellSurface * createShellSurface(QWaylandWindow * window)","Funname":"createShellSurface","Returntype":"QWaylandShellSurface *","Args":"QWaylandWindow * window"},{"Uniquefunname":"bool initialize(QWaylandDisplay * display)","Funname":"initialize","Returntype":"bool","Args":"QWaylandDisplay * display"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/wayland-hardware-integration-client-protocol.h","Functions":[{"Uniquefunname":"int qt_hardware_integration_add_listener(struct qt_hardware_integration * qt_hardware_integration,const struct qt_hardware_integration_listener * listener,void * data)","Funname":"qt_hardware_integration_add_listener","Returntype":"int","Args":"struct qt_hardware_integration * qt_hardware_integration,const struct qt_hardware_integration_listener * listener,void * data"},{"Uniquefunname":"qt_hardware_integration_destroy(struct qt_hardware_integration *qt_hardware_integration)","Funname":"qt_hardware_integration_destroy","Returntype":"void","Args":"struct qt_hardware_integration * qt_hardware_integration"},{"Uniquefunname":"qt_hardware_integration_get_user_data(struct qt_hardware_integration *qt_hardware_integration)","Funname":"qt_hardware_integration_get_user_data","Returntype":"void *","Args":"struct qt_hardware_integration * qt_hardware_integration"},{"Uniquefunname":"qt_hardware_integration_get_version(struct qt_hardware_integration *qt_hardware_integration)","Funname":"qt_hardware_integration_get_version","Returntype":"uint32_t","Args":"struct qt_hardware_integration * qt_hardware_integration"},{"Uniquefunname":"void qt_hardware_integration_set_user_data(struct qt_hardware_integration * qt_hardware_integration,void * user_data)","Funname":"qt_hardware_integration_set_user_data","Returntype":"void","Args":"struct qt_hardware_integration * qt_hardware_integration,void * user_data"}],"Records":[{"Name":"struct:qt_hardware_integration_listener","Fields":["void (*)(void * data,struct qt_hardware_integration * qt_hardware_integration,const char * name)","void (*)(void * data,struct qt_hardware_integration * qt_hardware_integration,const char * name)"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/wayland-qt-key-unstable-v1-client-protocol.h","Functions":[{"Uniquefunname":"int zqt_key_v1_add_listener(struct zqt_key_v1 * zqt_key_v1,const struct zqt_key_v1_listener * listener,void * data)","Funname":"zqt_key_v1_add_listener","Returntype":"int","Args":"struct zqt_key_v1 * zqt_key_v1,const struct zqt_key_v1_listener * listener,void * data"},{"Uniquefunname":"zqt_key_v1_destroy(struct zqt_key_v1 *zqt_key_v1)","Funname":"zqt_key_v1_destroy","Returntype":"void","Args":"struct zqt_key_v1 * zqt_key_v1"},{"Uniquefunname":"zqt_key_v1_get_user_data(struct zqt_key_v1 *zqt_key_v1)","Funname":"zqt_key_v1_get_user_data","Returntype":"void *","Args":"struct zqt_key_v1 * zqt_key_v1"},{"Uniquefunname":"zqt_key_v1_get_version(struct zqt_key_v1 *zqt_key_v1)","Funname":"zqt_key_v1_get_version","Returntype":"uint32_t","Args":"struct zqt_key_v1 * zqt_key_v1"},{"Uniquefunname":"zqt_key_v1_set_user_data(struct zqt_key_v1 *zqt_key_v1, void *user_data)","Funname":"zqt_key_v1_set_user_data","Returntype":"void","Args":"struct zqt_key_v1 * zqt_key_v1,void * user_data"}],"Records":[{"Name":"struct:zqt_key_v1_listener","Fields":["void (*)(void * data,struct zqt_key_v1 * zqt_key_v1,struct wl_surface * surface,uint32_t time,uint32_t type,uint32_t key,uint32_t modifiers,uint32_t nativeScanCode,uint32_t nativeVirtualKey,uint32_t nativeModifiers,const char * text,uint32_t autorepeat,uint32_t count)"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/wayland-qt-windowmanager-client-protocol.h","Functions":[{"Uniquefunname":"int qt_windowmanager_add_listener(struct qt_windowmanager * qt_windowmanager,const struct qt_windowmanager_listener * listener,void * data)","Funname":"qt_windowmanager_add_listener","Returntype":"int","Args":"struct qt_windowmanager * qt_windowmanager,const struct qt_windowmanager_listener * listener,void * data"},{"Uniquefunname":"qt_windowmanager_destroy(struct qt_windowmanager *qt_windowmanager)","Funname":"qt_windowmanager_destroy","Returntype":"void","Args":"struct qt_windowmanager * qt_windowmanager"},{"Uniquefunname":"qt_windowmanager_get_user_data(struct qt_windowmanager *qt_windowmanager)","Funname":"qt_windowmanager_get_user_data","Returntype":"void *","Args":"struct qt_windowmanager * qt_windowmanager"},{"Uniquefunname":"qt_windowmanager_get_version(struct qt_windowmanager *qt_windowmanager)","Funname":"qt_windowmanager_get_version","Returntype":"uint32_t","Args":"struct qt_windowmanager * qt_windowmanager"},{"Uniquefunname":"void qt_windowmanager_open_url(struct qt_windowmanager * qt_windowmanager,uint32_t remaining,const char * url)","Funname":"qt_windowmanager_open_url","Returntype":"void","Args":"struct qt_windowmanager * qt_windowmanager,uint32_t remaining,const char * url"},{"Uniquefunname":"qt_windowmanager_set_user_data(struct qt_windowmanager *qt_windowmanager, void *user_data)","Funname":"qt_windowmanager_set_user_data","Returntype":"void","Args":"struct qt_windowmanager * qt_windowmanager,void * user_data"}],"Records":[{"Name":"struct:qt_windowmanager_listener","Fields":["void (*)(void * data,struct qt_windowmanager * qt_windowmanager,int32_t show_is_fullscreen)","void (*)(void * data,struct qt_windowmanager * qt_windowmanager)"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/wayland-server-buffer-extension-client-protocol.h","Functions":[{"Uniquefunname":"qt_server_buffer_destroy(struct qt_server_buffer *qt_server_buffer)","Funname":"qt_server_buffer_destroy","Returntype":"void","Args":"struct qt_server_buffer * qt_server_buffer"},{"Uniquefunname":"qt_server_buffer_get_user_data(struct qt_server_buffer *qt_server_buffer)","Funname":"qt_server_buffer_get_user_data","Returntype":"void *","Args":"struct qt_server_buffer * qt_server_buffer"},{"Uniquefunname":"qt_server_buffer_get_version(struct qt_server_buffer *qt_server_buffer)","Funname":"qt_server_buffer_get_version","Returntype":"uint32_t","Args":"struct qt_server_buffer * qt_server_buffer"},{"Uniquefunname":"qt_server_buffer_release(struct qt_server_buffer *qt_server_buffer)","Funname":"qt_server_buffer_release","Returntype":"void","Args":"struct qt_server_buffer * qt_server_buffer"},{"Uniquefunname":"qt_server_buffer_set_user_data(struct qt_server_buffer *qt_server_buffer, void *user_data)","Funname":"qt_server_buffer_set_user_data","Returntype":"void","Args":"struct qt_server_buffer * qt_server_buffer,void * user_data"}],"Records":null}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/wayland-surface-extension-client-protocol.h","Functions":[{"Uniquefunname":"int qt_extended_surface_add_listener(struct qt_extended_surface * qt_extended_surface,const struct qt_extended_surface_listener * listener,void * data)","Funname":"qt_extended_surface_add_listener","Returntype":"int","Args":"struct qt_extended_surface * qt_extended_surface,const struct qt_extended_surface_listener * listener,void * data"},{"Uniquefunname":"qt_extended_surface_destroy(struct qt_extended_surface *qt_extended_surface)","Funname":"qt_extended_surface_destroy","Returntype":"void","Args":"struct qt_extended_surface * qt_extended_surface"},{"Uniquefunname":"qt_extended_surface_get_user_data(struct qt_extended_surface *qt_extended_surface)","Funname":"qt_extended_surface_get_user_data","Returntype":"void *","Args":"struct qt_extended_surface * qt_extended_surface"},{"Uniquefunname":"qt_extended_surface_get_version(struct qt_extended_surface *qt_extended_surface)","Funname":"qt_extended_surface_get_version","Returntype":"uint32_t","Args":"struct qt_extended_surface * qt_extended_surface"},{"Uniquefunname":"qt_extended_surface_lower(struct qt_extended_surface *qt_extended_surface)","Funname":"qt_extended_surface_lower","Returntype":"void","Args":"struct qt_extended_surface * qt_extended_surface"},{"Uniquefunname":"qt_extended_surface_raise(struct qt_extended_surface *qt_extended_surface)","Funname":"qt_extended_surface_raise","Returntype":"void","Args":"struct qt_extended_surface * qt_extended_surface"},{"Uniquefunname":"void qt_extended_surface_set_content_orientation_mask(struct qt_extended_surface * qt_extended_surface,int32_t orientation)","Funname":"qt_extended_surface_set_content_orientation_mask","Returntype":"void","Args":"struct qt_extended_surface * qt_extended_surface,int32_t orientation"},{"Uniquefunname":"void qt_extended_surface_set_user_data(struct qt_extended_surface * qt_extended_surface,void * user_data)","Funname":"qt_extended_surface_set_user_data","Returntype":"void","Args":"struct qt_extended_surface * qt_extended_surface,void * user_data"},{"Uniquefunname":"void qt_extended_surface_set_window_flags(struct qt_extended_surface * qt_extended_surface,int32_t flags)","Funname":"qt_extended_surface_set_window_flags","Returntype":"void","Args":"struct qt_extended_surface * qt_extended_surface,int32_t flags"},{"Uniquefunname":"void qt_extended_surface_update_generic_property(struct qt_extended_surface * qt_extended_surface,const char * name,struct wl_array * value)","Funname":"qt_extended_surface_update_generic_property","Returntype":"void","Args":"struct qt_extended_surface * qt_extended_surface,const char * name,struct wl_array * value"},{"Uniquefunname":"qt_surface_extension_destroy(struct qt_surface_extension *qt_surface_extension)","Funname":"qt_surface_extension_destroy","Returntype":"void","Args":"struct qt_surface_extension * qt_surface_extension"},{"Uniquefunname":"qt_extended_surface * qt_surface_extension_get_extended_surface(struct qt_surface_extension * qt_surface_extension,struct wl_surface * surface)","Funname":"qt_surface_extension_get_extended_surface","Returntype":"qt_extended_surface *","Args":"struct qt_surface_extension * qt_surface_extension,struct wl_surface * surface"},{"Uniquefunname":"qt_surface_extension_get_user_data(struct qt_surface_extension *qt_surface_extension)","Funname":"qt_surface_extension_get_user_data","Returntype":"void *","Args":"struct qt_surface_extension * qt_surface_extension"},{"Uniquefunname":"qt_surface_extension_get_version(struct qt_surface_extension *qt_surface_extension)","Funname":"qt_surface_extension_get_version","Returntype":"uint32_t","Args":"struct qt_surface_extension * qt_surface_extension"},{"Uniquefunname":"void qt_surface_extension_set_user_data(struct qt_surface_extension * qt_surface_extension,void * user_data)","Funname":"qt_surface_extension_set_user_data","Returntype":"void","Args":"struct qt_surface_extension * qt_surface_extension,void * user_data"}],"Records":[{"Name":"enum:qt_extended_surface_orientation","Fields":["QT_EXTENDED_SURFACE_ORIENTATION_INVERTEDLANDSCAPEORIENTATION","QT_EXTENDED_SURFACE_ORIENTATION_INVERTEDPORTRAITORIENTATION","QT_EXTENDED_SURFACE_ORIENTATION_LANDSCAPEORIENTATION","QT_EXTENDED_SURFACE_ORIENTATION_PORTRAITORIENTATION","QT_EXTENDED_SURFACE_ORIENTATION_PRIMARYORIENTATION"]},{"Name":"enum:qt_extended_surface_windowflag","Fields":["QT_EXTENDED_SURFACE_WINDOWFLAG_BYPASSWINDOWMANAGER","QT_EXTENDED_SURFACE_WINDOWFLAG_OVERRIDESSYSTEMGESTURES","QT_EXTENDED_SURFACE_WINDOWFLAG_STAYSONTOP"]},{"Name":"struct:qt_extended_surface_listener","Fields":["void (*)(void * data,struct qt_extended_surface * qt_extended_surface)","void (*)(void * data,struct qt_extended_surface * qt_extended_surface,int32_t visible)","void (*)(void * data,struct qt_extended_surface * qt_extended_surface,const char * name,struct wl_array * value)"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/wayland-text-input-unstable-v2-client-protocol.h","Functions":[{"Uniquefunname":"zwp_text_input_manager_v2_destroy(struct zwp_text_input_manager_v2 *zwp_text_input_manager_v2)","Funname":"zwp_text_input_manager_v2_destroy","Returntype":"void","Args":"struct zwp_text_input_manager_v2 * zwp_text_input_manager_v2"},{"Uniquefunname":"zwp_text_input_v2 * zwp_text_input_manager_v2_get_text_input(struct zwp_text_input_manager_v2 * zwp_text_input_manager_v2,struct wl_seat * seat)","Funname":"zwp_text_input_manager_v2_get_text_input","Returntype":"zwp_text_input_v2 *","Args":"struct zwp_text_input_manager_v2 * zwp_text_input_manager_v2,struct wl_seat * seat"},{"Uniquefunname":"void * zwp_text_input_manager_v2_get_user_data(struct zwp_text_input_manager_v2 * zwp_text_input_manager_v2)","Funname":"zwp_text_input_manager_v2_get_user_data","Returntype":"void *","Args":"struct zwp_text_input_manager_v2 * zwp_text_input_manager_v2"},{"Uniquefunname":"uint32_t zwp_text_input_manager_v2_get_version(struct zwp_text_input_manager_v2 * zwp_text_input_manager_v2)","Funname":"zwp_text_input_manager_v2_get_version","Returntype":"uint32_t","Args":"struct zwp_text_input_manager_v2 * zwp_text_input_manager_v2"},{"Uniquefunname":"void zwp_text_input_manager_v2_set_user_data(struct zwp_text_input_manager_v2 * zwp_text_input_manager_v2,void * user_data)","Funname":"zwp_text_input_manager_v2_set_user_data","Returntype":"void","Args":"struct zwp_text_input_manager_v2 * zwp_text_input_manager_v2,void * user_data"},{"Uniquefunname":"int zwp_text_input_v2_add_listener(struct zwp_text_input_v2 * zwp_text_input_v2,const struct zwp_text_input_v2_listener * listener,void * data)","Funname":"zwp_text_input_v2_add_listener","Returntype":"int","Args":"struct zwp_text_input_v2 * zwp_text_input_v2,const struct zwp_text_input_v2_listener * listener,void * data"},{"Uniquefunname":"zwp_text_input_v2_destroy(struct zwp_text_input_v2 *zwp_text_input_v2)","Funname":"zwp_text_input_v2_destroy","Returntype":"void","Args":"struct zwp_text_input_v2 * zwp_text_input_v2"},{"Uniquefunname":"void zwp_text_input_v2_disable(struct zwp_text_input_v2 * zwp_text_input_v2,struct wl_surface * surface)","Funname":"zwp_text_input_v2_disable","Returntype":"void","Args":"struct zwp_text_input_v2 * zwp_text_input_v2,struct wl_surface * surface"},{"Uniquefunname":"void zwp_text_input_v2_enable(struct zwp_text_input_v2 * zwp_text_input_v2,struct wl_surface * surface)","Funname":"zwp_text_input_v2_enable","Returntype":"void","Args":"struct zwp_text_input_v2 * zwp_text_input_v2,struct wl_surface * surface"},{"Uniquefunname":"zwp_text_input_v2_get_user_data(struct zwp_text_input_v2 *zwp_text_input_v2)","Funname":"zwp_text_input_v2_get_user_data","Returntype":"void *","Args":"struct zwp_text_input_v2 * zwp_text_input_v2"},{"Uniquefunname":"zwp_text_input_v2_get_version(struct zwp_text_input_v2 *zwp_text_input_v2)","Funname":"zwp_text_input_v2_get_version","Returntype":"uint32_t","Args":"struct zwp_text_input_v2 * zwp_text_input_v2"},{"Uniquefunname":"zwp_text_input_v2_hide_input_panel(struct zwp_text_input_v2 *zwp_text_input_v2)","Funname":"zwp_text_input_v2_hide_input_panel","Returntype":"void","Args":"struct zwp_text_input_v2 * zwp_text_input_v2"},{"Uniquefunname":"void zwp_text_input_v2_set_content_type(struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t hint,uint32_t purpose)","Funname":"zwp_text_input_v2_set_content_type","Returntype":"void","Args":"struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t hint,uint32_t purpose"},{"Uniquefunname":"void zwp_text_input_v2_set_cursor_rectangle(struct zwp_text_input_v2 * zwp_text_input_v2,int32_t x,int32_t y,int32_t width,int32_t height)","Funname":"zwp_text_input_v2_set_cursor_rectangle","Returntype":"void","Args":"struct zwp_text_input_v2 * zwp_text_input_v2,int32_t x,int32_t y,int32_t width,int32_t height"},{"Uniquefunname":"void zwp_text_input_v2_set_preferred_language(struct zwp_text_input_v2 * zwp_text_input_v2,const char * language)","Funname":"zwp_text_input_v2_set_preferred_language","Returntype":"void","Args":"struct zwp_text_input_v2 * zwp_text_input_v2,const char * language"},{"Uniquefunname":"void zwp_text_input_v2_set_surrounding_text(struct zwp_text_input_v2 * zwp_text_input_v2,const char * text,int32_t cursor,int32_t anchor)","Funname":"zwp_text_input_v2_set_surrounding_text","Returntype":"void","Args":"struct zwp_text_input_v2 * zwp_text_input_v2,const char * text,int32_t cursor,int32_t anchor"},{"Uniquefunname":"zwp_text_input_v2_set_user_data(struct zwp_text_input_v2 *zwp_text_input_v2, void *user_data)","Funname":"zwp_text_input_v2_set_user_data","Returntype":"void","Args":"struct zwp_text_input_v2 * zwp_text_input_v2,void * user_data"},{"Uniquefunname":"zwp_text_input_v2_show_input_panel(struct zwp_text_input_v2 *zwp_text_input_v2)","Funname":"zwp_text_input_v2_show_input_panel","Returntype":"void","Args":"struct zwp_text_input_v2 * zwp_text_input_v2"},{"Uniquefunname":"void zwp_text_input_v2_update_state(struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t serial,uint32_t reason)","Funname":"zwp_text_input_v2_update_state","Returntype":"void","Args":"struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t serial,uint32_t reason"}],"Records":[{"Name":"enum:zwp_text_input_v2_content_hint","Fields":["ZWP_TEXT_INPUT_V2_CONTENT_HINT_AUTO_CAPITALIZATION","ZWP_TEXT_INPUT_V2_CONTENT_HINT_AUTO_COMPLETION","ZWP_TEXT_INPUT_V2_CONTENT_HINT_AUTO_CORRECTION","ZWP_TEXT_INPUT_V2_CONTENT_HINT_HIDDEN_TEXT","ZWP_TEXT_INPUT_V2_CONTENT_HINT_LATIN","ZWP_TEXT_INPUT_V2_CONTENT_HINT_LOWERCASE","ZWP_TEXT_INPUT_V2_CONTENT_HINT_MULTILINE","ZWP_TEXT_INPUT_V2_CONTENT_HINT_NONE","ZWP_TEXT_INPUT_V2_CONTENT_HINT_SENSITIVE_DATA","ZWP_TEXT_INPUT_V2_CONTENT_HINT_TITLECASE","ZWP_TEXT_INPUT_V2_CONTENT_HINT_UPPERCASE"]},{"Name":"enum:zwp_text_input_v2_content_purpose","Fields":["ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_ALPHA","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_DATE","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_DATETIME","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_DIGITS","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_EMAIL","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_NAME","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_NORMAL","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_NUMBER","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_PASSWORD","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_PHONE","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_TERMINAL","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_TIME","ZWP_TEXT_INPUT_V2_CONTENT_PURPOSE_URL"]},{"Name":"enum:zwp_text_input_v2_input_panel_visibility","Fields":["ZWP_TEXT_INPUT_V2_INPUT_PANEL_VISIBILITY_HIDDEN","ZWP_TEXT_INPUT_V2_INPUT_PANEL_VISIBILITY_VISIBLE"]},{"Name":"enum:zwp_text_input_v2_preedit_style","Fields":["ZWP_TEXT_INPUT_V2_PREEDIT_STYLE_ACTIVE","ZWP_TEXT_INPUT_V2_PREEDIT_STYLE_DEFAULT","ZWP_TEXT_INPUT_V2_PREEDIT_STYLE_HIGHLIGHT","ZWP_TEXT_INPUT_V2_PREEDIT_STYLE_INACTIVE","ZWP_TEXT_INPUT_V2_PREEDIT_STYLE_INCORRECT","ZWP_TEXT_INPUT_V2_PREEDIT_STYLE_NONE","ZWP_TEXT_INPUT_V2_PREEDIT_STYLE_SELECTION","ZWP_TEXT_INPUT_V2_PREEDIT_STYLE_UNDERLINE"]},{"Name":"enum:zwp_text_input_v2_text_direction","Fields":["ZWP_TEXT_INPUT_V2_TEXT_DIRECTION_AUTO","ZWP_TEXT_INPUT_V2_TEXT_DIRECTION_LTR","ZWP_TEXT_INPUT_V2_TEXT_DIRECTION_RTL"]},{"Name":"enum:zwp_text_input_v2_update_state","Fields":["ZWP_TEXT_INPUT_V2_UPDATE_STATE_CHANGE","ZWP_TEXT_INPUT_V2_UPDATE_STATE_ENTER","ZWP_TEXT_INPUT_V2_UPDATE_STATE_FULL","ZWP_TEXT_INPUT_V2_UPDATE_STATE_RESET"]},{"Name":"struct:zwp_text_input_v2_listener","Fields":["void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,const char * text)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,int32_t before_cursor,int32_t after_cursor)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,int32_t index,int32_t anchor)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t before_length,uint32_t after_length)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t serial,struct wl_surface * surface)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t serial,uint32_t flags)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t state,int32_t x,int32_t y,int32_t width,int32_t height)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t time,uint32_t sym,uint32_t state,uint32_t modifiers)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,const char * language)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t serial,struct wl_surface * surface)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,struct wl_array * map)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,int32_t index)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,const char * text,const char * commit)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t index,uint32_t length,uint32_t style)","void (*)(void * data,struct zwp_text_input_v2 * zwp_text_input_v2,uint32_t direction)"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/wayland-touch-extension-client-protocol.h","Functions":[{"Uniquefunname":"int qt_touch_extension_add_listener(struct qt_touch_extension * qt_touch_extension,const struct qt_touch_extension_listener * listener,void * data)","Funname":"qt_touch_extension_add_listener","Returntype":"int","Args":"struct qt_touch_extension * qt_touch_extension,const struct qt_touch_extension_listener * listener,void * data"},{"Uniquefunname":"qt_touch_extension_destroy(struct qt_touch_extension *qt_touch_extension)","Funname":"qt_touch_extension_destroy","Returntype":"void","Args":"struct qt_touch_extension * qt_touch_extension"},{"Uniquefunname":"qt_touch_extension_dummy(struct qt_touch_extension *qt_touch_extension)","Funname":"qt_touch_extension_dummy","Returntype":"void","Args":"struct qt_touch_extension * qt_touch_extension"},{"Uniquefunname":"qt_touch_extension_get_user_data(struct qt_touch_extension *qt_touch_extension)","Funname":"qt_touch_extension_get_user_data","Returntype":"void *","Args":"struct qt_touch_extension * qt_touch_extension"},{"Uniquefunname":"qt_touch_extension_get_version(struct qt_touch_extension *qt_touch_extension)","Funname":"qt_touch_extension_get_version","Returntype":"uint32_t","Args":"struct qt_touch_extension * qt_touch_extension"},{"Uniquefunname":"qt_touch_extension_set_user_data(struct qt_touch_extension *qt_touch_extension, void *user_data)","Funname":"qt_touch_extension_set_user_data","Returntype":"void","Args":"struct qt_touch_extension * qt_touch_extension,void * user_data"}],"Records":[{"Name":"enum:qt_touch_extension_flags","Fields":["QT_TOUCH_EXTENSION_FLAGS_MOUSE_FROM_TOUCH"]},{"Name":"struct:qt_touch_extension_listener","Fields":["void (*)(void * data,struct qt_touch_extension * qt_touch_extension,uint32_t flags)","void (*)(void * data,struct qt_touch_extension * qt_touch_extension,uint32_t time,uint32_t id,uint32_t state,int32_t x,int32_t y,int32_t normalized_x,int32_t normalized_y,int32_t width,int32_t height,uint32_t pressure,int32_t velocity_x,int32_t velocity_y,uint32_t flags,struct wl_array * rawdata)"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/wayland-wayland-client-protocol.h","Functions":[{"Uniquefunname":"int wl_buffer_add_listener(struct wl_buffer * wl_buffer,const struct wl_buffer_listener * listener,void * data)","Funname":"wl_buffer_add_listener","Returntype":"int","Args":"struct wl_buffer * wl_buffer,const struct wl_buffer_listener * listener,void * data"},{"Uniquefunname":"wl_buffer_destroy(struct wl_buffer *wl_buffer)","Funname":"wl_buffer_destroy","Returntype":"void","Args":"struct wl_buffer * wl_buffer"},{"Uniquefunname":"wl_buffer_get_user_data(struct wl_buffer *wl_buffer)","Funname":"wl_buffer_get_user_data","Returntype":"void *","Args":"struct wl_buffer * wl_buffer"},{"Uniquefunname":"wl_buffer_get_version(struct wl_buffer *wl_buffer)","Funname":"wl_buffer_get_version","Returntype":"uint32_t","Args":"struct wl_buffer * wl_buffer"},{"Uniquefunname":"wl_buffer_set_user_data(struct wl_buffer *wl_buffer, void *user_data)","Funname":"wl_buffer_set_user_data","Returntype":"void","Args":"struct wl_buffer * wl_buffer,void * user_data"},{"Uniquefunname":"int wl_callback_add_listener(struct wl_callback * wl_callback,const struct wl_callback_listener * listener,void * data)","Funname":"wl_callback_add_listener","Returntype":"int","Args":"struct wl_callback * wl_callback,const struct wl_callback_listener * listener,void * data"},{"Uniquefunname":"wl_callback_destroy(struct wl_callback *wl_callback)","Funname":"wl_callback_destroy","Returntype":"void","Args":"struct wl_callback * wl_callback"},{"Uniquefunname":"wl_callback_get_user_data(struct wl_callback *wl_callback)","Funname":"wl_callback_get_user_data","Returntype":"void *","Args":"struct wl_callback * wl_callback"},{"Uniquefunname":"wl_callback_get_version(struct wl_callback *wl_callback)","Funname":"wl_callback_get_version","Returntype":"uint32_t","Args":"struct wl_callback * wl_callback"},{"Uniquefunname":"wl_callback_set_user_data(struct wl_callback *wl_callback, void *user_data)","Funname":"wl_callback_set_user_data","Returntype":"void","Args":"struct wl_callback * wl_callback,void * user_data"},{"Uniquefunname":"wl_compositor_create_region(struct wl_compositor *wl_compositor)","Funname":"wl_compositor_create_region","Returntype":"wl_region *","Args":"struct wl_compositor * wl_compositor"},{"Uniquefunname":"wl_compositor_create_surface(struct wl_compositor *wl_compositor)","Funname":"wl_compositor_create_surface","Returntype":"wl_surface *","Args":"struct wl_compositor * wl_compositor"},{"Uniquefunname":"wl_compositor_destroy(struct wl_compositor *wl_compositor)","Funname":"wl_compositor_destroy","Returntype":"void","Args":"struct wl_compositor * wl_compositor"},{"Uniquefunname":"wl_compositor_get_user_data(struct wl_compositor *wl_compositor)","Funname":"wl_compositor_get_user_data","Returntype":"void *","Args":"struct wl_compositor * wl_compositor"},{"Uniquefunname":"wl_compositor_get_version(struct wl_compositor *wl_compositor)","Funname":"wl_compositor_get_version","Returntype":"uint32_t","Args":"struct wl_compositor * wl_compositor"},{"Uniquefunname":"wl_compositor_set_user_data(struct wl_compositor *wl_compositor, void *user_data)","Funname":"wl_compositor_set_user_data","Returntype":"void","Args":"struct wl_compositor * wl_compositor,void * user_data"},{"Uniquefunname":"int wl_data_device_add_listener(struct wl_data_device * wl_data_device,const struct wl_data_device_listener * listener,void * data)","Funname":"wl_data_device_add_listener","Returntype":"int","Args":"struct wl_data_device * wl_data_device,const struct wl_data_device_listener * listener,void * data"},{"Uniquefunname":"wl_data_device_destroy(struct wl_data_device *wl_data_device)","Funname":"wl_data_device_destroy","Returntype":"void","Args":"struct wl_data_device * wl_data_device"},{"Uniquefunname":"wl_data_device_get_user_data(struct wl_data_device *wl_data_device)","Funname":"wl_data_device_get_user_data","Returntype":"void *","Args":"struct wl_data_device * wl_data_device"},{"Uniquefunname":"wl_data_device_get_version(struct wl_data_device *wl_data_device)","Funname":"wl_data_device_get_version","Returntype":"uint32_t","Args":"struct wl_data_device * wl_data_device"},{"Uniquefunname":"wl_data_device_manager_create_data_source(struct wl_data_device_manager *wl_data_device_manager)","Funname":"wl_data_device_manager_create_data_source","Returntype":"wl_data_source *","Args":"struct wl_data_device_manager * wl_data_device_manager"},{"Uniquefunname":"wl_data_device_manager_destroy(struct wl_data_device_manager *wl_data_device_manager)","Funname":"wl_data_device_manager_destroy","Returntype":"void","Args":"struct wl_data_device_manager * wl_data_device_manager"},{"Uniquefunname":"wl_data_device * wl_data_device_manager_get_data_device(struct wl_data_device_manager * wl_data_device_manager,struct wl_seat * seat)","Funname":"wl_data_device_manager_get_data_device","Returntype":"wl_data_device *","Args":"struct wl_data_device_manager * wl_data_device_manager,struct wl_seat * seat"},{"Uniquefunname":"wl_data_device_manager_get_user_data(struct wl_data_device_manager *wl_data_device_manager)","Funname":"wl_data_device_manager_get_user_data","Returntype":"void *","Args":"struct wl_data_device_manager * wl_data_device_manager"},{"Uniquefunname":"wl_data_device_manager_get_version(struct wl_data_device_manager *wl_data_device_manager)","Funname":"wl_data_device_manager_get_version","Returntype":"uint32_t","Args":"struct wl_data_device_manager * wl_data_device_manager"},{"Uniquefunname":"void wl_data_device_manager_set_user_data(struct wl_data_device_manager * wl_data_device_manager,void * user_data)","Funname":"wl_data_device_manager_set_user_data","Returntype":"void","Args":"struct wl_data_device_manager * wl_data_device_manager,void * user_data"},{"Uniquefunname":"void wl_data_device_set_selection(struct wl_data_device * wl_data_device,struct wl_data_source * source,uint32_t serial)","Funname":"wl_data_device_set_selection","Returntype":"void","Args":"struct wl_data_device * wl_data_device,struct wl_data_source * source,uint32_t serial"},{"Uniquefunname":"wl_data_device_set_user_data(struct wl_data_device *wl_data_device, void *user_data)","Funname":"wl_data_device_set_user_data","Returntype":"void","Args":"struct wl_data_device * wl_data_device,void * user_data"},{"Uniquefunname":"void wl_data_device_start_drag(struct wl_data_device * wl_data_device,struct wl_data_source * source,struct wl_surface * origin,struct wl_surface * icon,uint32_t serial)","Funname":"wl_data_device_start_drag","Returntype":"void","Args":"struct wl_data_device * wl_data_device,struct wl_data_source * source,struct wl_surface * origin,struct wl_surface * icon,uint32_t serial"},{"Uniquefunname":"void wl_data_offer_accept(struct wl_data_offer * wl_data_offer,uint32_t serial,const char * mime_type)","Funname":"wl_data_offer_accept","Returntype":"void","Args":"struct wl_data_offer * wl_data_offer,uint32_t serial,const char * mime_type"},{"Uniquefunname":"int wl_data_offer_add_listener(struct wl_data_offer * wl_data_offer,const struct wl_data_offer_listener * listener,void * data)","Funname":"wl_data_offer_add_listener","Returntype":"int","Args":"struct wl_data_offer * wl_data_offer,const struct wl_data_offer_listener * listener,void * data"},{"Uniquefunname":"wl_data_offer_destroy(struct wl_data_offer *wl_data_offer)","Funname":"wl_data_offer_destroy","Returntype":"void","Args":"struct wl_data_offer * wl_data_offer"},{"Uniquefunname":"wl_data_offer_get_user_data(struct wl_data_offer *wl_data_offer)","Funname":"wl_data_offer_get_user_data","Returntype":"void *","Args":"struct wl_data_offer * wl_data_offer"},{"Uniquefunname":"wl_data_offer_get_version(struct wl_data_offer *wl_data_offer)","Funname":"wl_data_offer_get_version","Returntype":"uint32_t","Args":"struct wl_data_offer * wl_data_offer"},{"Uniquefunname":"wl_data_offer_receive(struct wl_data_offer *wl_data_offer, const char *mime_type, int32_t fd)","Funname":"wl_data_offer_receive","Returntype":"void","Args":"struct wl_data_offer * wl_data_offer,const char * mime_type,int32_t fd"},{"Uniquefunname":"wl_data_offer_set_user_data(struct wl_data_offer *wl_data_offer, void *user_data)","Funname":"wl_data_offer_set_user_data","Returntype":"void","Args":"struct wl_data_offer * wl_data_offer,void * user_data"},{"Uniquefunname":"int wl_data_source_add_listener(struct wl_data_source * wl_data_source,const struct wl_data_source_listener * listener,void * data)","Funname":"wl_data_source_add_listener","Returntype":"int","Args":"struct wl_data_source * wl_data_source,const struct wl_data_source_listener * listener,void * data"},{"Uniquefunname":"wl_data_source_destroy(struct wl_data_source *wl_data_source)","Funname":"wl_data_source_destroy","Returntype":"void","Args":"struct wl_data_source * wl_data_source"},{"Uniquefunname":"wl_data_source_get_user_data(struct wl_data_source *wl_data_source)","Funname":"wl_data_source_get_user_data","Returntype":"void *","Args":"struct wl_data_source * wl_data_source"},{"Uniquefunname":"wl_data_source_get_version(struct wl_data_source *wl_data_source)","Funname":"wl_data_source_get_version","Returntype":"uint32_t","Args":"struct wl_data_source * wl_data_source"},{"Uniquefunname":"wl_data_source_offer(struct wl_data_source *wl_data_source, const char *mime_type)","Funname":"wl_data_source_offer","Returntype":"void","Args":"struct wl_data_source * wl_data_source,const char * mime_type"},{"Uniquefunname":"wl_data_source_set_user_data(struct wl_data_source *wl_data_source, void *user_data)","Funname":"wl_data_source_set_user_data","Returntype":"void","Args":"struct wl_data_source * wl_data_source,void * user_data"},{"Uniquefunname":"int wl_display_add_listener(struct wl_display * wl_display,const struct wl_display_listener * listener,void * data)","Funname":"wl_display_add_listener","Returntype":"int","Args":"struct wl_display * wl_display,const struct wl_display_listener * listener,void * data"},{"Uniquefunname":"wl_display_get_registry(struct wl_display *wl_display)","Funname":"wl_display_get_registry","Returntype":"wl_registry *","Args":"struct wl_display * wl_display"},{"Uniquefunname":"wl_display_get_user_data(struct wl_display *wl_display)","Funname":"wl_display_get_user_data","Returntype":"void *","Args":"struct wl_display * wl_display"},{"Uniquefunname":"wl_display_get_version(struct wl_display *wl_display)","Funname":"wl_display_get_version","Returntype":"uint32_t","Args":"struct wl_display * wl_display"},{"Uniquefunname":"wl_display_set_user_data(struct wl_display *wl_display, void *user_data)","Funname":"wl_display_set_user_data","Returntype":"void","Args":"struct wl_display * wl_display,void * user_data"},{"Uniquefunname":"wl_display_sync(struct wl_display *wl_display)","Funname":"wl_display_sync","Returntype":"wl_callback *","Args":"struct wl_display * wl_display"},{"Uniquefunname":"int wl_keyboard_add_listener(struct wl_keyboard * wl_keyboard,const struct wl_keyboard_listener * listener,void * data)","Funname":"wl_keyboard_add_listener","Returntype":"int","Args":"struct wl_keyboard * wl_keyboard,const struct wl_keyboard_listener * listener,void * data"},{"Uniquefunname":"wl_keyboard_destroy(struct wl_keyboard *wl_keyboard)","Funname":"wl_keyboard_destroy","Returntype":"void","Args":"struct wl_keyboard * wl_keyboard"},{"Uniquefunname":"wl_keyboard_get_user_data(struct wl_keyboard *wl_keyboard)","Funname":"wl_keyboard_get_user_data","Returntype":"void *","Args":"struct wl_keyboard * wl_keyboard"},{"Uniquefunname":"wl_keyboard_get_version(struct wl_keyboard *wl_keyboard)","Funname":"wl_keyboard_get_version","Returntype":"uint32_t","Args":"struct wl_keyboard * wl_keyboard"},{"Uniquefunname":"wl_keyboard_release(struct wl_keyboard *wl_keyboard)","Funname":"wl_keyboard_release","Returntype":"void","Args":"struct wl_keyboard * wl_keyboard"},{"Uniquefunname":"wl_keyboard_set_user_data(struct wl_keyboard *wl_keyboard, void *user_data)","Funname":"wl_keyboard_set_user_data","Returntype":"void","Args":"struct wl_keyboard * wl_keyboard,void * user_data"},{"Uniquefunname":"int wl_output_add_listener(struct wl_output * wl_output,const struct wl_output_listener * listener,void * data)","Funname":"wl_output_add_listener","Returntype":"int","Args":"struct wl_output * wl_output,const struct wl_output_listener * listener,void * data"},{"Uniquefunname":"wl_output_destroy(struct wl_output *wl_output)","Funname":"wl_output_destroy","Returntype":"void","Args":"struct wl_output * wl_output"},{"Uniquefunname":"wl_output_get_user_data(struct wl_output *wl_output)","Funname":"wl_output_get_user_data","Returntype":"void *","Args":"struct wl_output * wl_output"},{"Uniquefunname":"wl_output_get_version(struct wl_output *wl_output)","Funname":"wl_output_get_version","Returntype":"uint32_t","Args":"struct wl_output * wl_output"},{"Uniquefunname":"wl_output_set_user_data(struct wl_output *wl_output, void *user_data)","Funname":"wl_output_set_user_data","Returntype":"void","Args":"struct wl_output * wl_output,void * user_data"},{"Uniquefunname":"int wl_pointer_add_listener(struct wl_pointer * wl_pointer,const struct wl_pointer_listener * listener,void * data)","Funname":"wl_pointer_add_listener","Returntype":"int","Args":"struct wl_pointer * wl_pointer,const struct wl_pointer_listener * listener,void * data"},{"Uniquefunname":"wl_pointer_destroy(struct wl_pointer *wl_pointer)","Funname":"wl_pointer_destroy","Returntype":"void","Args":"struct wl_pointer * wl_pointer"},{"Uniquefunname":"wl_pointer_get_user_data(struct wl_pointer *wl_pointer)","Funname":"wl_pointer_get_user_data","Returntype":"void *","Args":"struct wl_pointer * wl_pointer"},{"Uniquefunname":"wl_pointer_get_version(struct wl_pointer *wl_pointer)","Funname":"wl_pointer_get_version","Returntype":"uint32_t","Args":"struct wl_pointer * wl_pointer"},{"Uniquefunname":"wl_pointer_release(struct wl_pointer *wl_pointer)","Funname":"wl_pointer_release","Returntype":"void","Args":"struct wl_pointer * wl_pointer"},{"Uniquefunname":"void wl_pointer_set_cursor(struct wl_pointer * wl_pointer,uint32_t serial,struct wl_surface * surface,int32_t hotspot_x,int32_t hotspot_y)","Funname":"wl_pointer_set_cursor","Returntype":"void","Args":"struct wl_pointer * wl_pointer,uint32_t serial,struct wl_surface * surface,int32_t hotspot_x,int32_t hotspot_y"},{"Uniquefunname":"wl_pointer_set_user_data(struct wl_pointer *wl_pointer, void *user_data)","Funname":"wl_pointer_set_user_data","Returntype":"void","Args":"struct wl_pointer * wl_pointer,void * user_data"},{"Uniquefunname":"wl_region_add(struct wl_region *wl_region, int32_t x, int32_t y, int32_t width, int32_t height)","Funname":"wl_region_add","Returntype":"void","Args":"struct wl_region * wl_region,int32_t x,int32_t y,int32_t width,int32_t height"},{"Uniquefunname":"wl_region_destroy(struct wl_region *wl_region)","Funname":"wl_region_destroy","Returntype":"void","Args":"struct wl_region * wl_region"},{"Uniquefunname":"wl_region_get_user_data(struct wl_region *wl_region)","Funname":"wl_region_get_user_data","Returntype":"void *","Args":"struct wl_region * wl_region"},{"Uniquefunname":"wl_region_get_version(struct wl_region *wl_region)","Funname":"wl_region_get_version","Returntype":"uint32_t","Args":"struct wl_region * wl_region"},{"Uniquefunname":"wl_region_set_user_data(struct wl_region *wl_region, void *user_data)","Funname":"wl_region_set_user_data","Returntype":"void","Args":"struct wl_region * wl_region,void * user_data"},{"Uniquefunname":"void wl_region_subtract(struct wl_region * wl_region,int32_t x,int32_t y,int32_t width,int32_t height)","Funname":"wl_region_subtract","Returntype":"void","Args":"struct wl_region * wl_region,int32_t x,int32_t y,int32_t width,int32_t height"},{"Uniquefunname":"int wl_registry_add_listener(struct wl_registry * wl_registry,const struct wl_registry_listener * listener,void * data)","Funname":"wl_registry_add_listener","Returntype":"int","Args":"struct wl_registry * wl_registry,const struct wl_registry_listener * listener,void * data"},{"Uniquefunname":"void * wl_registry_bind(struct wl_registry * wl_registry,uint32_t name,const struct wl_interface * interface,uint32_t version)","Funname":"wl_registry_bind","Returntype":"void *","Args":"struct wl_registry * wl_registry,uint32_t name,const struct wl_interface * interface,uint32_t version"},{"Uniquefunname":"wl_registry_destroy(struct wl_registry *wl_registry)","Funname":"wl_registry_destroy","Returntype":"void","Args":"struct wl_registry * wl_registry"},{"Uniquefunname":"wl_registry_get_user_data(struct wl_registry *wl_registry)","Funname":"wl_registry_get_user_data","Returntype":"void *","Args":"struct wl_registry * wl_registry"},{"Uniquefunname":"wl_registry_get_version(struct wl_registry *wl_registry)","Funname":"wl_registry_get_version","Returntype":"uint32_t","Args":"struct wl_registry * wl_registry"},{"Uniquefunname":"wl_registry_set_user_data(struct wl_registry *wl_registry, void *user_data)","Funname":"wl_registry_set_user_data","Returntype":"void","Args":"struct wl_registry * wl_registry,void * user_data"},{"Uniquefunname":"int wl_seat_add_listener(struct wl_seat * wl_seat,const struct wl_seat_listener * listener,void * data)","Funname":"wl_seat_add_listener","Returntype":"int","Args":"struct wl_seat * wl_seat,const struct wl_seat_listener * listener,void * data"},{"Uniquefunname":"wl_seat_destroy(struct wl_seat *wl_seat)","Funname":"wl_seat_destroy","Returntype":"void","Args":"struct wl_seat * wl_seat"},{"Uniquefunname":"wl_seat_get_keyboard(struct wl_seat *wl_seat)","Funname":"wl_seat_get_keyboard","Returntype":"wl_keyboard *","Args":"struct wl_seat * wl_seat"},{"Uniquefunname":"wl_seat_get_pointer(struct wl_seat *wl_seat)","Funname":"wl_seat_get_pointer","Returntype":"wl_pointer *","Args":"struct wl_seat * wl_seat"},{"Uniquefunname":"wl_seat_get_touch(struct wl_seat *wl_seat)","Funname":"wl_seat_get_touch","Returntype":"wl_touch *","Args":"struct wl_seat * wl_seat"},{"Uniquefunname":"wl_seat_get_user_data(struct wl_seat *wl_seat)","Funname":"wl_seat_get_user_data","Returntype":"void *","Args":"struct wl_seat * wl_seat"},{"Uniquefunname":"wl_seat_get_version(struct wl_seat *wl_seat)","Funname":"wl_seat_get_version","Returntype":"uint32_t","Args":"struct wl_seat * wl_seat"},{"Uniquefunname":"wl_seat_set_user_data(struct wl_seat *wl_seat, void *user_data)","Funname":"wl_seat_set_user_data","Returntype":"void","Args":"struct wl_seat * wl_seat,void * user_data"},{"Uniquefunname":"wl_shell_destroy(struct wl_shell *wl_shell)","Funname":"wl_shell_destroy","Returntype":"void","Args":"struct wl_shell * wl_shell"},{"Uniquefunname":"wl_shell_get_shell_surface(struct wl_shell *wl_shell, struct wl_surface *surface)","Funname":"wl_shell_get_shell_surface","Returntype":"wl_shell_surface *","Args":"struct wl_shell * wl_shell,struct wl_surface * surface"},{"Uniquefunname":"wl_shell_get_user_data(struct wl_shell *wl_shell)","Funname":"wl_shell_get_user_data","Returntype":"void *","Args":"struct wl_shell * wl_shell"},{"Uniquefunname":"wl_shell_get_version(struct wl_shell *wl_shell)","Funname":"wl_shell_get_version","Returntype":"uint32_t","Args":"struct wl_shell * wl_shell"},{"Uniquefunname":"wl_shell_set_user_data(struct wl_shell *wl_shell, void *user_data)","Funname":"wl_shell_set_user_data","Returntype":"void","Args":"struct wl_shell * wl_shell,void * user_data"},{"Uniquefunname":"int wl_shell_surface_add_listener(struct wl_shell_surface * wl_shell_surface,const struct wl_shell_surface_listener * listener,void * data)","Funname":"wl_shell_surface_add_listener","Returntype":"int","Args":"struct wl_shell_surface * wl_shell_surface,const struct wl_shell_surface_listener * listener,void * data"},{"Uniquefunname":"wl_shell_surface_destroy(struct wl_shell_surface *wl_shell_surface)","Funname":"wl_shell_surface_destroy","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface"},{"Uniquefunname":"wl_shell_surface_get_user_data(struct wl_shell_surface *wl_shell_surface)","Funname":"wl_shell_surface_get_user_data","Returntype":"void *","Args":"struct wl_shell_surface * wl_shell_surface"},{"Uniquefunname":"wl_shell_surface_get_version(struct wl_shell_surface *wl_shell_surface)","Funname":"wl_shell_surface_get_version","Returntype":"uint32_t","Args":"struct wl_shell_surface * wl_shell_surface"},{"Uniquefunname":"void wl_shell_surface_move(struct wl_shell_surface * wl_shell_surface,struct wl_seat * seat,uint32_t serial)","Funname":"wl_shell_surface_move","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface,struct wl_seat * seat,uint32_t serial"},{"Uniquefunname":"wl_shell_surface_pong(struct wl_shell_surface *wl_shell_surface, uint32_t serial)","Funname":"wl_shell_surface_pong","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface,uint32_t serial"},{"Uniquefunname":"void wl_shell_surface_resize(struct wl_shell_surface * wl_shell_surface,struct wl_seat * seat,uint32_t serial,uint32_t edges)","Funname":"wl_shell_surface_resize","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface,struct wl_seat * seat,uint32_t serial,uint32_t edges"},{"Uniquefunname":"wl_shell_surface_set_class(struct wl_shell_surface *wl_shell_surface, const char *class_)","Funname":"wl_shell_surface_set_class","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface,const char * class_"},{"Uniquefunname":"void wl_shell_surface_set_fullscreen(struct wl_shell_surface * wl_shell_surface,uint32_t method,uint32_t framerate,struct wl_output * output)","Funname":"wl_shell_surface_set_fullscreen","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface,uint32_t method,uint32_t framerate,struct wl_output * output"},{"Uniquefunname":"void wl_shell_surface_set_maximized(struct wl_shell_surface * wl_shell_surface,struct wl_output * output)","Funname":"wl_shell_surface_set_maximized","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface,struct wl_output * output"},{"Uniquefunname":"void wl_shell_surface_set_popup(struct wl_shell_surface * wl_shell_surface,struct wl_seat * seat,uint32_t serial,struct wl_surface * parent,int32_t x,int32_t y,uint32_t flags)","Funname":"wl_shell_surface_set_popup","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface,struct wl_seat * seat,uint32_t serial,struct wl_surface * parent,int32_t x,int32_t y,uint32_t flags"},{"Uniquefunname":"wl_shell_surface_set_title(struct wl_shell_surface *wl_shell_surface, const char *title)","Funname":"wl_shell_surface_set_title","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface,const char * title"},{"Uniquefunname":"wl_shell_surface_set_toplevel(struct wl_shell_surface *wl_shell_surface)","Funname":"wl_shell_surface_set_toplevel","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface"},{"Uniquefunname":"void wl_shell_surface_set_transient(struct wl_shell_surface * wl_shell_surface,struct wl_surface * parent,int32_t x,int32_t y,uint32_t flags)","Funname":"wl_shell_surface_set_transient","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface,struct wl_surface * parent,int32_t x,int32_t y,uint32_t flags"},{"Uniquefunname":"wl_shell_surface_set_user_data(struct wl_shell_surface *wl_shell_surface, void *user_data)","Funname":"wl_shell_surface_set_user_data","Returntype":"void","Args":"struct wl_shell_surface * wl_shell_surface,void * user_data"},{"Uniquefunname":"int wl_shm_add_listener(struct wl_shm * wl_shm,const struct wl_shm_listener * listener,void * data)","Funname":"wl_shm_add_listener","Returntype":"int","Args":"struct wl_shm * wl_shm,const struct wl_shm_listener * listener,void * data"},{"Uniquefunname":"wl_shm_create_pool(struct wl_shm *wl_shm, int32_t fd, int32_t size)","Funname":"wl_shm_create_pool","Returntype":"wl_shm_pool *","Args":"struct wl_shm * wl_shm,int32_t fd,int32_t size"},{"Uniquefunname":"wl_shm_destroy(struct wl_shm *wl_shm)","Funname":"wl_shm_destroy","Returntype":"void","Args":"struct wl_shm * wl_shm"},{"Uniquefunname":"wl_shm_get_user_data(struct wl_shm *wl_shm)","Funname":"wl_shm_get_user_data","Returntype":"void *","Args":"struct wl_shm * wl_shm"},{"Uniquefunname":"wl_shm_get_version(struct wl_shm *wl_shm)","Funname":"wl_shm_get_version","Returntype":"uint32_t","Args":"struct wl_shm * wl_shm"},{"Uniquefunname":"wl_buffer * wl_shm_pool_create_buffer(struct wl_shm_pool * wl_shm_pool,int32_t offset,int32_t width,int32_t height,int32_t stride,uint32_t format)","Funname":"wl_shm_pool_create_buffer","Returntype":"wl_buffer *","Args":"struct wl_shm_pool * wl_shm_pool,int32_t offset,int32_t width,int32_t height,int32_t stride,uint32_t format"},{"Uniquefunname":"wl_shm_pool_destroy(struct wl_shm_pool *wl_shm_pool)","Funname":"wl_shm_pool_destroy","Returntype":"void","Args":"struct wl_shm_pool * wl_shm_pool"},{"Uniquefunname":"wl_shm_pool_get_user_data(struct wl_shm_pool *wl_shm_pool)","Funname":"wl_shm_pool_get_user_data","Returntype":"void *","Args":"struct wl_shm_pool * wl_shm_pool"},{"Uniquefunname":"wl_shm_pool_get_version(struct wl_shm_pool *wl_shm_pool)","Funname":"wl_shm_pool_get_version","Returntype":"uint32_t","Args":"struct wl_shm_pool * wl_shm_pool"},{"Uniquefunname":"wl_shm_pool_resize(struct wl_shm_pool *wl_shm_pool, int32_t size)","Funname":"wl_shm_pool_resize","Returntype":"void","Args":"struct wl_shm_pool * wl_shm_pool,int32_t size"},{"Uniquefunname":"wl_shm_pool_set_user_data(struct wl_shm_pool *wl_shm_pool, void *user_data)","Funname":"wl_shm_pool_set_user_data","Returntype":"void","Args":"struct wl_shm_pool * wl_shm_pool,void * user_data"},{"Uniquefunname":"wl_shm_set_user_data(struct wl_shm *wl_shm, void *user_data)","Funname":"wl_shm_set_user_data","Returntype":"void","Args":"struct wl_shm * wl_shm,void * user_data"},{"Uniquefunname":"wl_subcompositor_destroy(struct wl_subcompositor *wl_subcompositor)","Funname":"wl_subcompositor_destroy","Returntype":"void","Args":"struct wl_subcompositor * wl_subcompositor"},{"Uniquefunname":"wl_subsurface * wl_subcompositor_get_subsurface(struct wl_subcompositor * wl_subcompositor,struct wl_surface * surface,struct wl_surface * parent)","Funname":"wl_subcompositor_get_subsurface","Returntype":"wl_subsurface *","Args":"struct wl_subcompositor * wl_subcompositor,struct wl_surface * surface,struct wl_surface * parent"},{"Uniquefunname":"wl_subcompositor_get_user_data(struct wl_subcompositor *wl_subcompositor)","Funname":"wl_subcompositor_get_user_data","Returntype":"void *","Args":"struct wl_subcompositor * wl_subcompositor"},{"Uniquefunname":"wl_subcompositor_get_version(struct wl_subcompositor *wl_subcompositor)","Funname":"wl_subcompositor_get_version","Returntype":"uint32_t","Args":"struct wl_subcompositor * wl_subcompositor"},{"Uniquefunname":"wl_subcompositor_set_user_data(struct wl_subcompositor *wl_subcompositor, void *user_data)","Funname":"wl_subcompositor_set_user_data","Returntype":"void","Args":"struct wl_subcompositor * wl_subcompositor,void * user_data"},{"Uniquefunname":"wl_subsurface_destroy(struct wl_subsurface *wl_subsurface)","Funname":"wl_subsurface_destroy","Returntype":"void","Args":"struct wl_subsurface * wl_subsurface"},{"Uniquefunname":"wl_subsurface_get_user_data(struct wl_subsurface *wl_subsurface)","Funname":"wl_subsurface_get_user_data","Returntype":"void *","Args":"struct wl_subsurface * wl_subsurface"},{"Uniquefunname":"wl_subsurface_get_version(struct wl_subsurface *wl_subsurface)","Funname":"wl_subsurface_get_version","Returntype":"uint32_t","Args":"struct wl_subsurface * wl_subsurface"},{"Uniquefunname":"wl_subsurface_place_above(struct wl_subsurface *wl_subsurface, struct wl_surface *sibling)","Funname":"wl_subsurface_place_above","Returntype":"void","Args":"struct wl_subsurface * wl_subsurface,struct wl_surface * sibling"},{"Uniquefunname":"wl_subsurface_place_below(struct wl_subsurface *wl_subsurface, struct wl_surface *sibling)","Funname":"wl_subsurface_place_below","Returntype":"void","Args":"struct wl_subsurface * wl_subsurface,struct wl_surface * sibling"},{"Uniquefunname":"wl_subsurface_set_desync(struct wl_subsurface *wl_subsurface)","Funname":"wl_subsurface_set_desync","Returntype":"void","Args":"struct wl_subsurface * wl_subsurface"},{"Uniquefunname":"wl_subsurface_set_position(struct wl_subsurface *wl_subsurface, int32_t x, int32_t y)","Funname":"wl_subsurface_set_position","Returntype":"void","Args":"struct wl_subsurface * wl_subsurface,int32_t x,int32_t y"},{"Uniquefunname":"wl_subsurface_set_sync(struct wl_subsurface *wl_subsurface)","Funname":"wl_subsurface_set_sync","Returntype":"void","Args":"struct wl_subsurface * wl_subsurface"},{"Uniquefunname":"wl_subsurface_set_user_data(struct wl_subsurface *wl_subsurface, void *user_data)","Funname":"wl_subsurface_set_user_data","Returntype":"void","Args":"struct wl_subsurface * wl_subsurface,void * user_data"},{"Uniquefunname":"int wl_surface_add_listener(struct wl_surface * wl_surface,const struct wl_surface_listener * listener,void * data)","Funname":"wl_surface_add_listener","Returntype":"int","Args":"struct wl_surface * wl_surface,const struct wl_surface_listener * listener,void * data"},{"Uniquefunname":"wl_surface_attach(struct wl_surface *wl_surface, struct wl_buffer *buffer, int32_t x, int32_t y)","Funname":"wl_surface_attach","Returntype":"void","Args":"struct wl_surface * wl_surface,struct wl_buffer * buffer,int32_t x,int32_t y"},{"Uniquefunname":"wl_surface_commit(struct wl_surface *wl_surface)","Funname":"wl_surface_commit","Returntype":"void","Args":"struct wl_surface * wl_surface"},{"Uniquefunname":"void wl_surface_damage(struct wl_surface * wl_surface,int32_t x,int32_t y,int32_t width,int32_t height)","Funname":"wl_surface_damage","Returntype":"void","Args":"struct wl_surface * wl_surface,int32_t x,int32_t y,int32_t width,int32_t height"},{"Uniquefunname":"wl_surface_destroy(struct wl_surface *wl_surface)","Funname":"wl_surface_destroy","Returntype":"void","Args":"struct wl_surface * wl_surface"},{"Uniquefunname":"wl_surface_frame(struct wl_surface *wl_surface)","Funname":"wl_surface_frame","Returntype":"wl_callback *","Args":"struct wl_surface * wl_surface"},{"Uniquefunname":"wl_surface_get_user_data(struct wl_surface *wl_surface)","Funname":"wl_surface_get_user_data","Returntype":"void *","Args":"struct wl_surface * wl_surface"},{"Uniquefunname":"wl_surface_get_version(struct wl_surface *wl_surface)","Funname":"wl_surface_get_version","Returntype":"uint32_t","Args":"struct wl_surface * wl_surface"},{"Uniquefunname":"wl_surface_set_buffer_scale(struct wl_surface *wl_surface, int32_t scale)","Funname":"wl_surface_set_buffer_scale","Returntype":"void","Args":"struct wl_surface * wl_surface,int32_t scale"},{"Uniquefunname":"wl_surface_set_buffer_transform(struct wl_surface *wl_surface, int32_t transform)","Funname":"wl_surface_set_buffer_transform","Returntype":"void","Args":"struct wl_surface * wl_surface,int32_t transform"},{"Uniquefunname":"wl_surface_set_input_region(struct wl_surface *wl_surface, struct wl_region *region)","Funname":"wl_surface_set_input_region","Returntype":"void","Args":"struct wl_surface * wl_surface,struct wl_region * region"},{"Uniquefunname":"wl_surface_set_opaque_region(struct wl_surface *wl_surface, struct wl_region *region)","Funname":"wl_surface_set_opaque_region","Returntype":"void","Args":"struct wl_surface * wl_surface,struct wl_region * region"},{"Uniquefunname":"wl_surface_set_user_data(struct wl_surface *wl_surface, void *user_data)","Funname":"wl_surface_set_user_data","Returntype":"void","Args":"struct wl_surface * wl_surface,void * user_data"},{"Uniquefunname":"int wl_touch_add_listener(struct wl_touch * wl_touch,const struct wl_touch_listener * listener,void * data)","Funname":"wl_touch_add_listener","Returntype":"int","Args":"struct wl_touch * wl_touch,const struct wl_touch_listener * listener,void * data"},{"Uniquefunname":"wl_touch_destroy(struct wl_touch *wl_touch)","Funname":"wl_touch_destroy","Returntype":"void","Args":"struct wl_touch * wl_touch"},{"Uniquefunname":"wl_touch_get_user_data(struct wl_touch *wl_touch)","Funname":"wl_touch_get_user_data","Returntype":"void *","Args":"struct wl_touch * wl_touch"},{"Uniquefunname":"wl_touch_get_version(struct wl_touch *wl_touch)","Funname":"wl_touch_get_version","Returntype":"uint32_t","Args":"struct wl_touch * wl_touch"},{"Uniquefunname":"wl_touch_release(struct wl_touch *wl_touch)","Funname":"wl_touch_release","Returntype":"void","Args":"struct wl_touch * wl_touch"},{"Uniquefunname":"wl_touch_set_user_data(struct wl_touch *wl_touch, void *user_data)","Funname":"wl_touch_set_user_data","Returntype":"void","Args":"struct wl_touch * wl_touch,void * user_data"}],"Records":[{"Name":"enum:wl_display_error","Fields":["WL_DISPLAY_ERROR_INVALID_METHOD","WL_DISPLAY_ERROR_INVALID_OBJECT","WL_DISPLAY_ERROR_NO_MEMORY"]},{"Name":"enum:wl_keyboard_keymap_format","Fields":["WL_KEYBOARD_KEYMAP_FORMAT_NO_KEYMAP","WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1"]},{"Name":"enum:wl_keyboard_key_state","Fields":["WL_KEYBOARD_KEY_STATE_PRESSED","WL_KEYBOARD_KEY_STATE_RELEASED"]},{"Name":"enum:wl_output_mode","Fields":["WL_OUTPUT_MODE_CURRENT","WL_OUTPUT_MODE_PREFERRED"]},{"Name":"enum:wl_output_subpixel","Fields":["WL_OUTPUT_SUBPIXEL_HORIZONTAL_BGR","WL_OUTPUT_SUBPIXEL_HORIZONTAL_RGB","WL_OUTPUT_SUBPIXEL_NONE","WL_OUTPUT_SUBPIXEL_UNKNOWN","WL_OUTPUT_SUBPIXEL_VERTICAL_BGR","WL_OUTPUT_SUBPIXEL_VERTICAL_RGB"]},{"Name":"enum:wl_output_transform","Fields":["WL_OUTPUT_TRANSFORM_180","WL_OUTPUT_TRANSFORM_270","WL_OUTPUT_TRANSFORM_90","WL_OUTPUT_TRANSFORM_FLIPPED","WL_OUTPUT_TRANSFORM_FLIPPED_180","WL_OUTPUT_TRANSFORM_FLIPPED_270","WL_OUTPUT_TRANSFORM_FLIPPED_90","WL_OUTPUT_TRANSFORM_NORMAL"]},{"Name":"enum:wl_pointer_axis","Fields":["WL_POINTER_AXIS_HORIZONTAL_SCROLL","WL_POINTER_AXIS_VERTICAL_SCROLL"]},{"Name":"enum:wl_pointer_button_state","Fields":["WL_POINTER_BUTTON_STATE_PRESSED","WL_POINTER_BUTTON_STATE_RELEASED"]},{"Name":"enum:wl_seat_capability","Fields":["WL_SEAT_CAPABILITY_KEYBOARD","WL_SEAT_CAPABILITY_POINTER","WL_SEAT_CAPABILITY_TOUCH"]},{"Name":"enum:wl_shell_surface_fullscreen_method","Fields":["WL_SHELL_SURFACE_FULLSCREEN_METHOD_DEFAULT","WL_SHELL_SURFACE_FULLSCREEN_METHOD_DRIVER","WL_SHELL_SURFACE_FULLSCREEN_METHOD_FILL","WL_SHELL_SURFACE_FULLSCREEN_METHOD_SCALE"]},{"Name":"enum:wl_shell_surface_resize","Fields":["WL_SHELL_SURFACE_RESIZE_BOTTOM","WL_SHELL_SURFACE_RESIZE_BOTTOM_LEFT","WL_SHELL_SURFACE_RESIZE_BOTTOM_RIGHT","WL_SHELL_SURFACE_RESIZE_LEFT","WL_SHELL_SURFACE_RESIZE_NONE","WL_SHELL_SURFACE_RESIZE_RIGHT","WL_SHELL_SURFACE_RESIZE_TOP","WL_SHELL_SURFACE_RESIZE_TOP_LEFT","WL_SHELL_SURFACE_RESIZE_TOP_RIGHT"]},{"Name":"enum:wl_shell_surface_transient","Fields":["WL_SHELL_SURFACE_TRANSIENT_INACTIVE"]},{"Name":"enum:wl_shm_error","Fields":["WL_SHM_ERROR_INVALID_FD","WL_SHM_ERROR_INVALID_FORMAT","WL_SHM_ERROR_INVALID_STRIDE"]},{"Name":"enum:wl_shm_format","Fields":["WL_SHM_FORMAT_ABGR1555","WL_SHM_FORMAT_ABGR2101010","WL_SHM_FORMAT_ABGR4444","WL_SHM_FORMAT_ABGR8888","WL_SHM_FORMAT_ARGB1555","WL_SHM_FORMAT_ARGB2101010","WL_SHM_FORMAT_ARGB4444","WL_SHM_FORMAT_ARGB8888","WL_SHM_FORMAT_AYUV","WL_SHM_FORMAT_BGR233","WL_SHM_FORMAT_BGR565","WL_SHM_FORMAT_BGR888","WL_SHM_FORMAT_BGRA1010102","WL_SHM_FORMAT_BGRA4444","WL_SHM_FORMAT_BGRA5551","WL_SHM_FORMAT_BGRA8888","WL_SHM_FORMAT_BGRX1010102","WL_SHM_FORMAT_BGRX4444","WL_SHM_FORMAT_BGRX5551","WL_SHM_FORMAT_BGRX8888","WL_SHM_FORMAT_C8","WL_SHM_FORMAT_NV12","WL_SHM_FORMAT_NV16","WL_SHM_FORMAT_NV21","WL_SHM_FORMAT_NV61","WL_SHM_FORMAT_RGB332","WL_SHM_FORMAT_RGB565","WL_SHM_FORMAT_RGB888","WL_SHM_FORMAT_RGBA1010102","WL_SHM_FORMAT_RGBA4444","WL_SHM_FORMAT_RGBA5551","WL_SHM_FORMAT_RGBA8888","WL_SHM_FORMAT_RGBX1010102","WL_SHM_FORMAT_RGBX4444","WL_SHM_FORMAT_RGBX5551","WL_SHM_FORMAT_RGBX8888","WL_SHM_FORMAT_UYVY","WL_SHM_FORMAT_VYUY","WL_SHM_FORMAT_XBGR1555","WL_SHM_FORMAT_XBGR2101010","WL_SHM_FORMAT_XBGR4444","WL_SHM_FORMAT_XBGR8888","WL_SHM_FORMAT_XRGB1555","WL_SHM_FORMAT_XRGB2101010","WL_SHM_FORMAT_XRGB4444","WL_SHM_FORMAT_XRGB8888","WL_SHM_FORMAT_YUV410","WL_SHM_FORMAT_YUV411","WL_SHM_FORMAT_YUV420","WL_SHM_FORMAT_YUV422","WL_SHM_FORMAT_YUV444","WL_SHM_FORMAT_YUYV","WL_SHM_FORMAT_YVU410","WL_SHM_FORMAT_YVU411","WL_SHM_FORMAT_YVU420","WL_SHM_FORMAT_YVU422","WL_SHM_FORMAT_YVU444","WL_SHM_FORMAT_YVYU"]},{"Name":"enum:wl_subcompositor_error","Fields":["WL_SUBCOMPOSITOR_ERROR_BAD_SURFACE"]},{"Name":"enum:wl_subsurface_error","Fields":["WL_SUBSURFACE_ERROR_BAD_SURFACE"]},{"Name":"enum:wl_surface_error","Fields":["WL_SURFACE_ERROR_INVALID_SCALE","WL_SURFACE_ERROR_INVALID_TRANSFORM"]},{"Name":"struct:wl_buffer_listener","Fields":["void (*)(void * data,struct wl_buffer * wl_buffer)"]},{"Name":"struct:wl_callback_listener","Fields":["void (*)(void * data,struct wl_callback * wl_callback,uint32_t callback_data)"]},{"Name":"struct:wl_data_device_listener","Fields":["void (*)(void * data,struct wl_data_device * wl_data_device,struct wl_data_offer * id)","void (*)(void * data,struct wl_data_device * wl_data_device)","void (*)(void * data,struct wl_data_device * wl_data_device,uint32_t serial,struct wl_surface * surface,wl_fixed_t x,wl_fixed_t y,struct wl_data_offer * id)","void (*)(void * data,struct wl_data_device * wl_data_device)","void (*)(void * data,struct wl_data_device * wl_data_device,uint32_t time,wl_fixed_t x,wl_fixed_t y)","void (*)(void * data,struct wl_data_device * wl_data_device,struct wl_data_offer * id)"]},{"Name":"struct:wl_data_offer_listener","Fields":["void (*)(void * data,struct wl_data_offer * wl_data_offer,const char * mime_type)"]},{"Name":"struct:wl_data_source_listener","Fields":["void (*)(void * data,struct wl_data_source * wl_data_source)","void (*)(void * data,struct wl_data_source * wl_data_source,const char * mime_type,int32_t fd)","void (*)(void * data,struct wl_data_source * wl_data_source,const char * mime_type)"]},{"Name":"struct:wl_display_listener","Fields":["void (*)(void * data,struct wl_display * wl_display,uint32_t id)","void (*)(void * data,struct wl_display * wl_display,void * object_id,uint32_t code,const char * message)"]},{"Name":"struct:wl_keyboard_listener","Fields":["void (*)(void * data,struct wl_keyboard * wl_keyboard,uint32_t serial,struct wl_surface * surface,struct wl_array * keys)","void (*)(void * data,struct wl_keyboard * wl_keyboard,uint32_t serial,uint32_t time,uint32_t key,uint32_t state)","void (*)(void * data,struct wl_keyboard * wl_keyboard,uint32_t format,int32_t fd,uint32_t size)","void (*)(void * data,struct wl_keyboard * wl_keyboard,uint32_t serial,struct wl_surface * surface)","void (*)(void * data,struct wl_keyboard * wl_keyboard,uint32_t serial,uint32_t mods_depressed,uint32_t mods_latched,uint32_t mods_locked,uint32_t group)","void (*)(void * data,struct wl_keyboard * wl_keyboard,int32_t rate,int32_t delay)"]},{"Name":"struct:wl_output_listener","Fields":["void (*)(void * data,struct wl_output * wl_output)","void (*)(void * data,struct wl_output * wl_output,int32_t x,int32_t y,int32_t physical_width,int32_t physical_height,int32_t subpixel,const char * make,const char * model,int32_t transform)","void (*)(void * data,struct wl_output * wl_output,uint32_t flags,int32_t width,int32_t height,int32_t refresh)","void (*)(void * data,struct wl_output * wl_output,int32_t factor)"]},{"Name":"struct:wl_pointer_listener","Fields":["void (*)(void * data,struct wl_pointer * wl_pointer,uint32_t time,uint32_t axis,wl_fixed_t value)","void (*)(void * data,struct wl_pointer * wl_pointer,uint32_t serial,uint32_t time,uint32_t button,uint32_t state)","void (*)(void * data,struct wl_pointer * wl_pointer,uint32_t serial,struct wl_surface * surface,wl_fixed_t surface_x,wl_fixed_t surface_y)","void (*)(void * data,struct wl_pointer * wl_pointer,uint32_t serial,struct wl_surface * surface)","void (*)(void * data,struct wl_pointer * wl_pointer,uint32_t time,wl_fixed_t surface_x,wl_fixed_t surface_y)"]},{"Name":"struct:wl_registry_listener","Fields":["void (*)(void * data,struct wl_registry * wl_registry,uint32_t name,const char * interface,uint32_t version)","void (*)(void * data,struct wl_registry * wl_registry,uint32_t name)"]},{"Name":"struct:wl_seat_listener","Fields":["void (*)(void * data,struct wl_seat * wl_seat,uint32_t capabilities)","void (*)(void * data,struct wl_seat * wl_seat,const char * name)"]},{"Name":"struct:wl_shell_surface_listener","Fields":["void (*)(void * data,struct wl_shell_surface * wl_shell_surface,uint32_t edges,int32_t width,int32_t height)","void (*)(void * data,struct wl_shell_surface * wl_shell_surface,uint32_t serial)","void (*)(void * data,struct wl_shell_surface * wl_shell_surface)"]},{"Name":"struct:wl_shm_listener","Fields":["void (*)(void * data,struct wl_shm * wl_shm,uint32_t format)"]},{"Name":"struct:wl_surface_listener","Fields":["void (*)(void * data,struct wl_surface * wl_surface,struct wl_output * output)","void (*)(void * data,struct wl_surface * wl_surface,struct wl_output * output)"]},{"Name":"struct:wl_touch_listener","Fields":["void (*)(void * data,struct wl_touch * wl_touch)","void (*)(void * data,struct wl_touch * wl_touch,uint32_t serial,uint32_t time,struct wl_surface * surface,int32_t id,wl_fixed_t x,wl_fixed_t y)","void (*)(void * data,struct wl_touch * wl_touch)","void (*)(void * data,struct wl_touch * wl_touch,uint32_t time,int32_t id,wl_fixed_t x,wl_fixed_t y)","void (*)(void * data,struct wl_touch * wl_touch,uint32_t serial,uint32_t time,int32_t id)"]}]}
{"Filepath":"wayland/qtwayland-dev/QtWaylandClient/private/wayland-xdg-output-unstable-v1-client-protocol.h","Functions":[{"Uniquefunname":"zxdg_output_manager_v1_destroy(struct zxdg_output_manager_v1 *zxdg_output_manager_v1)","Funname":"zxdg_output_manager_v1_destroy","Returntype":"void","Args":"struct zxdg_output_manager_v1 * zxdg_output_manager_v1"},{"Uniquefunname":"zxdg_output_manager_v1_get_user_data(struct zxdg_output_manager_v1 *zxdg_output_manager_v1)","Funname":"zxdg_output_manager_v1_get_user_data","Returntype":"void *","Args":"struct zxdg_output_manager_v1 * zxdg_output_manager_v1"},{"Uniquefunname":"zxdg_output_manager_v1_get_version(struct zxdg_output_manager_v1 *zxdg_output_manager_v1)","Funname":"zxdg_output_manager_v1_get_version","Returntype":"uint32_t","Args":"struct zxdg_output_manager_v1 * zxdg_output_manager_v1"},{"Uniquefunname":"zxdg_output_v1 * zxdg_output_manager_v1_get_xdg_output(struct zxdg_output_manager_v1 * zxdg_output_manager_v1,struct wl_output * output)","Funname":"zxdg_output_manager_v1_get_xdg_output","Returntype":"zxdg_output_v1 *","Args":"struct zxdg_output_manager_v1 * zxdg_output_manager_v1,struct wl_output * output"},{"Uniquefunname":"void zxdg_output_manager_v1_set_user_data(struct zxdg_output_manager_v1 * zxdg_output_manager_v1,void * user_data)","Funname":"zxdg_output_manager_v1_set_user_data","Returntype":"void","Args":"struct zxdg_output_manager_v1 * zxdg_output_manager_v1,void * user_data"},{"Uniquefunname":"int zxdg_output_v1_add_listener(struct zxdg_output_v1 * zxdg_output_v1,const struct zxdg_output_v1_listener * listener,void * data)","Funname":"zxdg_output_v1_add_listener","Returntype":"int","Args":"struct zxdg_output_v1 * zxdg_output_v1,const struct zxdg_output_v1_listener * listener,void * data"},{"Uniquefunname":"zxdg_output_v1_destroy(struct zxdg_output_v1 *zxdg_output_v1)","Funname":"zxdg_output_v1_destroy","Returntype":"void","Args":"struct zxdg_output_v1 * zxdg_output_v1"},{"Uniquefunname":"zxdg_output_v1_get_user_data(struct zxdg_output_v1 *zxdg_output_v1)","Funname":"zxdg_output_v1_get_user_data","Returntype":"void *","Args":"struct zxdg_output_v1 * zxdg_output_v1"},{"Uniquefunname":"zxdg_output_v1_get_version(struct zxdg_output_v1 *zxdg_output_v1)","Funname":"zxdg_output_v1_get_version","Returntype":"uint32_t","Args":"struct zxdg_output_v1 * zxdg_output_v1"},{"Uniquefunname":"zxdg_output_v1_set_user_data(struct zxdg_output_v1 *zxdg_output_v1, void *user_data)","Funname":"zxdg_output_v1_set_user_data","Returntype":"void","Args":"struct zxdg_output_v1 * zxdg_output_v1,void * user_data"}],"Records":[{"Name":"struct:zxdg_output_v1_listener","Fields":["void (*)(void * data,struct zxdg_output_v1 * zxdg_output_v1,const char * description)","void (*)(void * data,struct zxdg_output_v1 * zxdg_output_v1)","void (*)(void * data,struct zxdg_output_v1 * zxdg_output_v1,int32_t x,int32_t y)","void (*)(void * data,struct zxdg_output_v1 * zxdg_output_v1,int32_t width,int32_t height)","void (*)(void * data,struct zxdg_output_v1 * zxdg_output_v1,const char * name)"]}]}
{"Filepath":"wayland/wayland-shell/qt5dwaylandplugin.h","Functions":[{"Uniquefunname":"public Qt5dwaylandplugin()","Funname":"Qt5dwaylandplugin","Returntype":"public","Args":""}],"Records":null}
{"Filepath":"xcb/dforeignplatformwindow.h","Functions":[{"Uniquefunname":"public DForeignPlatformWindow(QWindow * window,WId winId)","Funname":"DForeignPlatformWindow","Returntype":"public","Args":"QWindow * window,WId winId"},{"Uniquefunname":"private create()","Funname":"create","Returntype":"private","Args":""},{"Uniquefunname":"void destroy()","Funname":"destroy","Returntype":"void","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"QPlatformScreen * screenForGeometry(const QRect \u0026 newGeometry)","Funname":"screenForGeometry","Returntype":"QPlatformScreen *","Args":"const QRect \u0026 newGeometry"},{"Uniquefunname":"QNativeWindow * toWindow()","Funname":"toWindow","Returntype":"QNativeWindow *","Args":""},{"Uniquefunname":"void updateProcessId()","Funname":"updateProcessId","Returntype":"void","Args":""},{"Uniquefunname":"void updateTitle()","Funname":"updateTitle","Returntype":"void","Args":""},{"Uniquefunname":"void updateWindowState()","Funname":"updateWindowState","Returntype":"void","Args":""},{"Uniquefunname":"void updateWindowTypes()","Funname":"updateWindowTypes","Returntype":"void","Args":""},{"Uniquefunname":"void updateWmClass()","Funname":"updateWmClass","Returntype":"void","Args":""},{"Uniquefunname":"void updateWmDesktop()","Funname":"updateWmDesktop","Returntype":"void","Args":""},{"Uniquefunname":" ~DForeignPlatformWindow()","Funname":"~DForeignPlatformWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/dframewindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(DFrameWindow)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DFrameWindow"},{"Uniquefunname":"void adsorbCursor(Utility::CornerEdge cornerEdge)","Funname":"adsorbCursor","Returntype":"void","Args":"Utility::CornerEdge cornerEdge"},{"Uniquefunname":"QColor borderColor()","Funname":"borderColor","Returntype":"QColor","Args":""},{"Uniquefunname":"int borderWidth()","Funname":"borderWidth","Returntype":"int","Args":""},{"Uniquefunname":"bool canResize()","Funname":"canResize","Returntype":"bool","Args":""},{"Uniquefunname":"void cancelAdsorbCursor()","Funname":"cancelAdsorbCursor","Returntype":"void","Args":""},{"Uniquefunname":"QMargins contentMarginsHint()","Funname":"contentMarginsHint","Returntype":"QMargins","Args":""},{"Uniquefunname":"signals contentMarginsHintChanged(const QMargins \u0026 oldMargins)","Funname":"contentMarginsHintChanged","Returntype":"signals","Args":"const QMargins \u0026 oldMargins"},{"Uniquefunname":"QPoint contentOffsetHint()","Funname":"contentOffsetHint","Returntype":"QPoint","Args":""},{"Uniquefunname":"QPainterPath contentPath()","Funname":"contentPath","Returntype":"QPainterPath","Args":""},{"Uniquefunname":"QWindow * contentWindow()","Funname":"contentWindow","Returntype":"QWindow *","Args":""},{"Uniquefunname":"bool disableFrame()","Funname":"disableFrame","Returntype":"bool","Args":""},{"Uniquefunname":"void disableRepaintShadow()","Funname":"disableRepaintShadow","Returntype":"void","Args":""},{"Uniquefunname":"void drawShadowTo(QPaintDevice * device)","Funname":"drawShadowTo","Returntype":"void","Args":"QPaintDevice * device"},{"Uniquefunname":"void enableRepaintShadow()","Funname":"enableRepaintShadow","Returntype":"void","Args":""},{"Uniquefunname":"bool event(QEvent * event)","Funname":"event","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"bool isClearContentAreaForShadowPixmap()","Funname":"isClearContentAreaForShadowPixmap","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEnableSystemMove()","Funname":"isEnableSystemMove","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEnableSystemResize()","Funname":"isEnableSystemResize","Returntype":"bool","Args":""},{"Uniquefunname":"void mouseMoveEvent(QMouseEvent * event)","Funname":"mouseMoveEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void mouseReleaseEvent(QMouseEvent * event)","Funname":"mouseReleaseEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void onDevicePixelRatioChanged()","Funname":"onDevicePixelRatioChanged","Returntype":"void","Args":""},{"Uniquefunname":"protected paintEvent(QPaintEvent *)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent *"},{"Uniquefunname":"bool redirectContent()","Funname":"redirectContent","Returntype":"bool","Args":""},{"Uniquefunname":"private redirected(QPoint *)","Funname":"redirected","Returntype":"private","Args":"QPoint *"},{"Uniquefunname":"void resizeEvent(QResizeEvent * event)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * event"},{"Uniquefunname":"void setBorderColor(const QColor \u0026 color)","Funname":"setBorderColor","Returntype":"void","Args":"const QColor \u0026 color"},{"Uniquefunname":"void setBorderWidth(int width)","Funname":"setBorderWidth","Returntype":"void","Args":"int width"},{"Uniquefunname":"void setClearContentAreaForShadowPixmap(bool clear)","Funname":"setClearContentAreaForShadowPixmap","Returntype":"void","Args":"bool clear"},{"Uniquefunname":"void setContentPath(const QPainterPath \u0026 path)","Funname":"setContentPath","Returntype":"void","Args":"const QPainterPath \u0026 path"},{"Uniquefunname":"void setEnableSystemMove(bool enable)","Funname":"setEnableSystemMove","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"void setEnableSystemResize(bool enable)","Funname":"setEnableSystemResize","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"void setShadowColor(const QColor \u0026 color)","Funname":"setShadowColor","Returntype":"void","Args":"const QColor \u0026 color"},{"Uniquefunname":"void setShadowOffset(const QPoint \u0026 offset)","Funname":"setShadowOffset","Returntype":"void","Args":"const QPoint \u0026 offset"},{"Uniquefunname":"void setShadowRadius(int radius)","Funname":"setShadowRadius","Returntype":"void","Args":"int radius"},{"Uniquefunname":"QColor shadowColor()","Funname":"shadowColor","Returntype":"QColor","Args":""},{"Uniquefunname":"QPoint shadowOffset()","Funname":"shadowOffset","Returntype":"QPoint","Args":""},{"Uniquefunname":"int shadowRadius()","Funname":"shadowRadius","Returntype":"int","Args":""},{"Uniquefunname":"void showEvent(QShowEvent * event)","Funname":"showEvent","Returntype":"void","Args":"QShowEvent * event"},{"Uniquefunname":"void startCursorAnimation()","Funname":"startCursorAnimation","Returntype":"void","Args":""},{"Uniquefunname":"void timerEvent(QTimerEvent * event)","Funname":"timerEvent","Returntype":"void","Args":"QTimerEvent * event"},{"Uniquefunname":"void updateFrameMask()","Funname":"updateFrameMask","Returntype":"void","Args":""},{"Uniquefunname":"void updateFromContents(void *)","Funname":"updateFromContents","Returntype":"void","Args":"void *"},{"Uniquefunname":"void updateMask()","Funname":"updateMask","Returntype":"void","Args":""},{"Uniquefunname":"bool updateNativeWindowXPixmap(int width,int height)","Funname":"updateNativeWindowXPixmap","Returntype":"bool","Args":"int width,int height"},{"Uniquefunname":"void updateShadow()","Funname":"updateShadow","Returntype":"void","Args":""},{"Uniquefunname":" ~DFrameWindow()","Funname":"~DFrameWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/dhighdpi.h","Functions":[{"Uniquefunname":"public BackingStore(QPlatformBackingStore * proxy)","Funname":"BackingStore","Returntype":"public","Args":"QPlatformBackingStore * proxy"},{"Uniquefunname":"void beginPaint(const QRegion \u0026 region)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"qreal devicePixelRatio(QPlatformWindow * w)","Funname":"devicePixelRatio","Returntype":"qreal","Args":"QPlatformWindow * w"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"public fromNativePixels(const QPointF \u0026 pixelPoint,const QWindow * window)","Funname":"fromNativePixels","Returntype":"public","Args":"const QPointF \u0026 pixelPoint,const QWindow * window"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"bool isActive()","Funname":"isActive","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi(QXcbScreen * s)","Funname":"logicalDpi","Returntype":"QDpi","Args":"QXcbScreen * s"},{"Uniquefunname":"void onDPIChanged(xcb_connection_t * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"onDPIChanged","Returntype":"void","Args":"xcb_connection_t * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"bool overrideBackingStore()","Funname":"overrideBackingStore","Returntype":"bool","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"qreal pixelDensity(QXcbScreen * s)","Funname":"pixelDensity","Returntype":"qreal","Args":"QXcbScreen * s"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":"GLuint toTexture(const QRegion \u0026 dirtyRegion,QSize * textureSize,TextureFlags * flags)","Funname":"toTexture","Returntype":"GLuint","Args":"const QRegion \u0026 dirtyRegion,QSize * textureSize,TextureFlags * flags"}],"Records":null}
{"Filepath":"xcb/dnotitlebarwindowhelper.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(QString theme READ theme WRITE setTheme NOTIFY themeChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QString theme READ theme WRITE setTheme NOTIFY themeChanged"},{"Uniquefunname":"QColor borderColor()","Funname":"borderColor","Returntype":"QColor","Args":""},{"Uniquefunname":"void borderColorChanged()","Funname":"borderColorChanged","Returntype":"void","Args":""},{"Uniquefunname":"qreal borderWidth()","Funname":"borderWidth","Returntype":"qreal","Args":""},{"Uniquefunname":"void borderWidthChanged()","Funname":"borderWidthChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool isEnableSystemMove(quint32 winId)","Funname":"isEnableSystemMove","Returntype":"bool","Args":"quint32 winId"},{"Uniquefunname":"QMarginsF mouseInputAreaMargins()","Funname":"mouseInputAreaMargins","Returntype":"QMarginsF","Args":""},{"Uniquefunname":"void mouseInputAreaMarginsChanged()","Funname":"mouseInputAreaMarginsChanged","Returntype":"void","Args":""},{"Uniquefunname":"void onWindowSizeChanged()","Funname":"onWindowSizeChanged","Returntype":"void","Args":""},{"Uniquefunname":"void resetProperty(const QByteArray \u0026 property)","Funname":"resetProperty","Returntype":"void","Args":"const QByteArray \u0026 property"},{"Uniquefunname":"void setBorderColor(const QColor \u0026 borderColor)","Funname":"setBorderColor","Returntype":"void","Args":"const QColor \u0026 borderColor"},{"Uniquefunname":"void setBorderWidth(qreal borderWidth)","Funname":"setBorderWidth","Returntype":"void","Args":"qreal borderWidth"},{"Uniquefunname":"void setMouseInputAreaMargins(const QMarginsF \u0026 mouseInputAreaMargins)","Funname":"setMouseInputAreaMargins","Returntype":"void","Args":"const QMarginsF \u0026 mouseInputAreaMargins"},{"Uniquefunname":"void setShadowColor(const QColor \u0026 shadowColor)","Funname":"setShadowColor","Returntype":"void","Args":"const QColor \u0026 shadowColor"},{"Uniquefunname":"void setShadowOffect(const QPointF \u0026 shadowOffset)","Funname":"setShadowOffect","Returntype":"void","Args":"const QPointF \u0026 shadowOffset"},{"Uniquefunname":"void setShadowRadius(qreal shadowRadius)","Funname":"setShadowRadius","Returntype":"void","Args":"qreal shadowRadius"},{"Uniquefunname":"void setTheme(const QString \u0026 theme)","Funname":"setTheme","Returntype":"void","Args":"const QString \u0026 theme"},{"Uniquefunname":"void setWindowProperty(QWindow * window,const char * name,const QVariant \u0026 value)","Funname":"setWindowProperty","Returntype":"void","Args":"QWindow * window,const char * name,const QVariant \u0026 value"},{"Uniquefunname":"void setWindowRadius(const QPointF \u0026 windowRadius)","Funname":"setWindowRadius","Returntype":"void","Args":"const QPointF \u0026 windowRadius"},{"Uniquefunname":"QColor shadowColor()","Funname":"shadowColor","Returntype":"QColor","Args":""},{"Uniquefunname":"void shadowColorChanged()","Funname":"shadowColorChanged","Returntype":"void","Args":""},{"Uniquefunname":"void shadowOffectChanged()","Funname":"shadowOffectChanged","Returntype":"void","Args":""},{"Uniquefunname":"QPointF shadowOffset()","Funname":"shadowOffset","Returntype":"QPointF","Args":""},{"Uniquefunname":"qreal shadowRadius()","Funname":"shadowRadius","Returntype":"qreal","Args":""},{"Uniquefunname":"void shadowRadiusChanged()","Funname":"shadowRadiusChanged","Returntype":"void","Args":""},{"Uniquefunname":"void startMoveWindow(quint32 winId)","Funname":"startMoveWindow","Returntype":"void","Args":"quint32 winId"},{"Uniquefunname":"QString theme()","Funname":"theme","Returntype":"QString","Args":""},{"Uniquefunname":"signals themeChanged()","Funname":"themeChanged","Returntype":"signals","Args":""},{"Uniquefunname":"Q_SLOT void updateAutoInputMaskByClipPathFromProperty()","Funname":"updateAutoInputMaskByClipPathFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateBorderColorFromProperty()","Funname":"updateBorderColorFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateBorderWidthFromProperty()","Funname":"updateBorderWidthFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"private slots updateClipPathFromProperty()","Funname":"updateClipPathFromProperty","Returntype":"private slots","Args":""},{"Uniquefunname":"Q_SLOT void updateEnableBlurWindowFromProperty()","Funname":"updateEnableBlurWindowFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateEnableSystemMoveFromProperty()","Funname":"updateEnableSystemMoveFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateEnableSystemResizeFromProperty()","Funname":"updateEnableSystemResizeFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateFrameMaskFromProperty()","Funname":"updateFrameMaskFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"void updateMoveWindow(quint32 winId)","Funname":"updateMoveWindow","Returntype":"void","Args":"quint32 winId"},{"Uniquefunname":"Q_SLOT void updateShadowColorFromProperty()","Funname":"updateShadowColorFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateShadowOffsetFromProperty()","Funname":"updateShadowOffsetFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateShadowRadiusFromProperty()","Funname":"updateShadowRadiusFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"bool updateWindowBlurAreasForWM()","Funname":"updateWindowBlurAreasForWM","Returntype":"bool","Args":""},{"Uniquefunname":"Q_SLOT void updateWindowBlurAreasFromProperty()","Funname":"updateWindowBlurAreasFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateWindowBlurPathsFromProperty()","Funname":"updateWindowBlurPathsFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateWindowRadiusFromProperty()","Funname":"updateWindowRadiusFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"void updateWindowShape()","Funname":"updateWindowShape","Returntype":"void","Args":""},{"Uniquefunname":"QWindow * window()","Funname":"window","Returntype":"QWindow *","Args":""},{"Uniquefunname":"private windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"private","Args":"QEvent * event"},{"Uniquefunname":"QPointF windowRadius()","Funname":"windowRadius","Returntype":"QPointF","Args":""},{"Uniquefunname":"void windowRadiusChanged()","Funname":"windowRadiusChanged","Returntype":"void","Args":""},{"Uniquefunname":" ~DNoTitlebarWindowHelper()","Funname":"~DNoTitlebarWindowHelper","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/dplatformbackingstore.h","Functions":[{"Uniquefunname":"public DPlatformBackingStore(QWindow * window,QXcbBackingStore * proxy)","Funname":"DPlatformBackingStore","Returntype":"public","Args":"QWindow * window,QXcbBackingStore * proxy"},{"Uniquefunname":"void beginPaint(const QRegion \u0026 region)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"bool canResize()","Funname":"canResize","Returntype":"bool","Args":""},{"Uniquefunname":"bool canUseClipPath()","Funname":"canUseClipPath","Returntype":"bool","Args":""},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void composeAndFlushHelper(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlushHelper","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPoint getShadowOffset()","Funname":"getShadowOffset","Returntype":"QPoint","Args":""},{"Uniquefunname":"int getShadowRadius()","Funname":"getShadowRadius","Returntype":"int","Args":""},{"Uniquefunname":"int getWindowRadius()","Funname":"getWindowRadius","Returntype":"int","Args":""},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"private initUserProperties()","Funname":"initUserProperties","Returntype":"private","Args":""},{"Uniquefunname":"bool isWidgetWindow()","Funname":"isWidgetWindow","Returntype":"bool","Args":""},{"Uniquefunname":"bool isWidgetWindow(const QWindow * window)","Funname":"isWidgetWindow","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"void onWindowStateChanged()","Funname":"onWindowStateChanged","Returntype":"void","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void repaintWindowShadow()","Funname":"repaintWindowShadow","Returntype":"void","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"void setClipPah(const QPainterPath \u0026 path)","Funname":"setClipPah","Returntype":"void","Args":"const QPainterPath \u0026 path"},{"Uniquefunname":"void setWindowBlurArea(const QVector\u003cUtility::BlurArea\u003e \u0026 area)","Funname":"setWindowBlurArea","Returntype":"void","Args":"const QVector\u003cUtility::BlurArea\u003e \u0026 area"},{"Uniquefunname":"void setWindowMargins(const QMargins \u0026 margins)","Funname":"setWindowMargins","Returntype":"void","Args":"const QMargins \u0026 margins"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":"GLuint toTexture(const QRegion \u0026 dirtyRegion,QSize * textureSize)","Funname":"toTexture","Returntype":"GLuint","Args":"const QRegion \u0026 dirtyRegion,QSize * textureSize"},{"Uniquefunname":"GLuint toTexture(const QRegion \u0026 dirtyRegion,QSize * textureSize,TextureFlags * flags)","Funname":"toTexture","Returntype":"GLuint","Args":"const QRegion \u0026 dirtyRegion,QSize * textureSize,TextureFlags * flags"},{"Uniquefunname":"GLuint toTexture(const QRegion \u0026 dirtyRegion,QSize * textureSize,bool * needsSwizzle)","Funname":"toTexture","Returntype":"GLuint","Args":"const QRegion \u0026 dirtyRegion,QSize * textureSize,bool * needsSwizzle"},{"Uniquefunname":"void updateAutoInputMaskByClipPath()","Funname":"updateAutoInputMaskByClipPath","Returntype":"void","Args":""},{"Uniquefunname":"void updateBorderColor()","Funname":"updateBorderColor","Returntype":"void","Args":""},{"Uniquefunname":"void updateBorderWidth()","Funname":"updateBorderWidth","Returntype":"void","Args":""},{"Uniquefunname":"void updateClipPath()","Funname":"updateClipPath","Returntype":"void","Args":""},{"Uniquefunname":"void updateEnableBlurWindow()","Funname":"updateEnableBlurWindow","Returntype":"void","Args":""},{"Uniquefunname":"void updateEnableSystemMove()","Funname":"updateEnableSystemMove","Returntype":"void","Args":""},{"Uniquefunname":"void updateEnableSystemResize()","Funname":"updateEnableSystemResize","Returntype":"void","Args":""},{"Uniquefunname":"void updateFrameExtents()","Funname":"updateFrameExtents","Returntype":"void","Args":""},{"Uniquefunname":"void updateFrameMask()","Funname":"updateFrameMask","Returntype":"void","Args":""},{"Uniquefunname":"void updateInputShapeRegion()","Funname":"updateInputShapeRegion","Returntype":"void","Args":""},{"Uniquefunname":"void updateShadowColor()","Funname":"updateShadowColor","Returntype":"void","Args":""},{"Uniquefunname":"void updateShadowOffset()","Funname":"updateShadowOffset","Returntype":"void","Args":""},{"Uniquefunname":"void updateShadowRadius()","Funname":"updateShadowRadius","Returntype":"void","Args":""},{"Uniquefunname":"void updateTranslucentBackground()","Funname":"updateTranslucentBackground","Returntype":"void","Args":""},{"Uniquefunname":"void updateUserClipPath()","Funname":"updateUserClipPath","Returntype":"void","Args":""},{"Uniquefunname":"void updateWindowBlurAreas()","Funname":"updateWindowBlurAreas","Returntype":"void","Args":""},{"Uniquefunname":"bool updateWindowBlurAreasForWM()","Funname":"updateWindowBlurAreasForWM","Returntype":"bool","Args":""},{"Uniquefunname":"void updateWindowBlurPaths()","Funname":"updateWindowBlurPaths","Returntype":"void","Args":""},{"Uniquefunname":"void updateWindowRadius()","Funname":"updateWindowRadius","Returntype":"void","Args":""},{"Uniquefunname":"void updateWindowShadow()","Funname":"updateWindowShadow","Returntype":"void","Args":""},{"Uniquefunname":"QWidgetWindow * widgetWindow()","Funname":"widgetWindow","Returntype":"QWidgetWindow *","Args":""},{"Uniquefunname":"QRect windowGeometry()","Funname":"windowGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QPoint windowOffset()","Funname":"windowOffset","Returntype":"QPoint","Args":""},{"Uniquefunname":" ~DPlatformBackingStore()","Funname":"~DPlatformBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/dplatformbackingstorehelper.h","Functions":[{"Uniquefunname":"public DPlatformBackingStoreHelper()","Funname":"DPlatformBackingStoreHelper","Returntype":"public","Args":""},{"Uniquefunname":"bool addBackingStore(QPlatformBackingStore * store)","Funname":"addBackingStore","Returntype":"bool","Args":"QPlatformBackingStore * store"},{"Uniquefunname":"QPlatformBackingStore * backingStore()","Funname":"backingStore","Returntype":"QPlatformBackingStore *","Args":""},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"}],"Records":null}
{"Filepath":"xcb/dplatformintegration.h","Functions":[{"Uniquefunname":"public DPlatformIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"DPlatformIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"bool buildNativeSettings(QObject * object,quint32 settingWindow)","Funname":"buildNativeSettings","Returntype":"bool","Args":"QObject * object,quint32 settingWindow"},{"Uniquefunname":"void clearNativeSettings(quint32 settingWindow)","Funname":"clearNativeSettings","Returntype":"void","Args":"quint32 settingWindow"},{"Uniquefunname":"QPaintEngine * createImagePaintEngine(QPaintDevice * paintDevice)","Funname":"createImagePaintEngine","Returntype":"QPaintEngine *","Args":"QPaintDevice * paintDevice"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"bool enableCursorBlink()","Funname":"enableCursorBlink","Returntype":"bool","Args":""},{"Uniquefunname":"bool enableDxcb(QWindow * window)","Funname":"enableDxcb","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"    inline XcbNativeEventFilter *eventFilter()","Funname":"eventFilter","Returntype":"XcbNativeEventFilter *","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"    inline static DPlatformIntegration *instance()","Funname":"instance","Returntype":"DPlatformIntegration *","Args":""},{"Uniquefunname":"DPlatformIntegration * instance()","Funname":"instance","Returntype":"DPlatformIntegration *","Args":""},{"Uniquefunname":"bool isEnableDxcb(const QWindow * window)","Funname":"isEnableDxcb","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"bool isEnableNoTitlebar(const QWindow * window)","Funname":"isEnableNoTitlebar","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"private isWindowBlockedHandle(QWindow * window,QWindow ** blockingWindow)","Funname":"isWindowBlockedHandle","Returntype":"private","Args":"QWindow * window,QWindow ** blockingWindow"},{"Uniquefunname":"bool setEnableNoTitlebar(QWindow * window,bool enable)","Funname":"setEnableNoTitlebar","Returntype":"bool","Args":"QWindow * window,bool enable"},{"Uniquefunname":"void setWindowProperty(QWindow * window,const char * name,const QVariant \u0026 value)","Funname":"setWindowProperty","Returntype":"void","Args":"QWindow * window,const char * name,const QVariant \u0026 value"},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"DXcbXSettings * xSettings(QXcbConnection * connection)","Funname":"xSettings","Returntype":"DXcbXSettings *","Args":"QXcbConnection * connection"},{"Uniquefunname":"    inline static QXcbConnection *xcbConnection()","Funname":"xcbConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":" ~DPlatformIntegration()","Funname":"~DPlatformIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/dplatformnativeinterfacehook.h","Functions":[{"Uniquefunname":"public platformFunction(QPlatformNativeInterface * interface,const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"public","Args":"QPlatformNativeInterface * interface,const QByteArray \u0026 function"}],"Records":null}
{"Filepath":"xcb/dplatformopenglcontexthelper.h","Functions":[{"Uniquefunname":"public DPlatformOpenGLContextHelper()","Funname":"DPlatformOpenGLContextHelper","Returntype":"public","Args":""},{"Uniquefunname":"bool addOpenGLContext(QOpenGLContext * object,QPlatformOpenGLContext * context)","Funname":"addOpenGLContext","Returntype":"bool","Args":"QOpenGLContext * object,QPlatformOpenGLContext * context"},{"Uniquefunname":"QPlatformOpenGLContext * context()","Funname":"context","Returntype":"QPlatformOpenGLContext *","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"void swapBuffers(QPlatformSurface * surface)","Funname":"swapBuffers","Returntype":"void","Args":"QPlatformSurface * surface"}],"Records":null}
{"Filepath":"xcb/dplatformwindowhelper.h","Functions":[{"Uniquefunname":"Q_OBJECT public DPlatformWindowHelper(QNativeWindow * window)","Funname":"DPlatformWindowHelper","Returntype":"Q_OBJECT public","Args":"QNativeWindow * window"},{"Uniquefunname":"private eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"private","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"bool frameStrutEventsEnabled()","Funname":"frameStrutEventsEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QColor getBorderColor()","Funname":"getBorderColor","Returntype":"QColor","Args":""},{"Uniquefunname":"int getBorderWidth()","Funname":"getBorderWidth","Returntype":"int","Args":""},{"Uniquefunname":"int getShadowRadius()","Funname":"getShadowRadius","Returntype":"int","Args":""},{"Uniquefunname":"int getWindowRadius()","Funname":"getWindowRadius","Returntype":"int","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"DPlatformWindowHelper * me()","Funname":"me","Returntype":"DPlatformWindowHelper *","Args":""},{"Uniquefunname":"QRect normalGeometry()","Funname":"normalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"void onDevicePixelRatioChanged()","Funname":"onDevicePixelRatioChanged","Returntype":"void","Args":""},{"Uniquefunname":"void onFrameWindowContentMarginsHintChanged(const QMargins \u0026 old_margins)","Funname":"onFrameWindowContentMarginsHintChanged","Returntype":"void","Args":"const QMargins \u0026 old_margins"},{"Uniquefunname":"void onScreenChanged(QScreen * screen)","Funname":"onScreenChanged","Returntype":"void","Args":"QScreen * screen"},{"Uniquefunname":"void onWMHasCompositeChanged()","Funname":"onWMHasCompositeChanged","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setClipPath(const QPainterPath \u0026 path)","Funname":"setClipPath","Returntype":"void","Args":"const QPainterPath \u0026 path"},{"Uniquefunname":"void setFrameStrutEventsEnabled(bool enabled)","Funname":"setFrameStrutEventsEnabled","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFilePath(const QString \u0026 title)","Funname":"setWindowFilePath","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"bool setWindowModified(bool modified)","Funname":"setWindowModified","Returntype":"bool","Args":"bool modified"},{"Uniquefunname":"void setWindowProperty(QWindow * window,const char * name,const QVariant \u0026 value)","Funname":"setWindowProperty","Returntype":"void","Args":"QWindow * window,const char * name,const QVariant \u0026 value"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"bool startSystemResize(Qt::Edges edges)","Funname":"startSystemResize","Returntype":"bool","Args":"Qt::Edges edges"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"friend QWindow * topvelWindow(QWindow *)","Funname":"topvelWindow","Returntype":"friend QWindow *","Args":"QWindow *"},{"Uniquefunname":"Q_SLOT void updateAutoInputMaskByClipPathFromProperty()","Funname":"updateAutoInputMaskByClipPathFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateBorderColorFromProperty()","Funname":"updateBorderColorFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateBorderWidthFromProperty()","Funname":"updateBorderWidthFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"void updateClipPathByWindowRadius(const QSize \u0026 windowSize)","Funname":"updateClipPathByWindowRadius","Returntype":"void","Args":"const QSize \u0026 windowSize"},{"Uniquefunname":"Q_SLOT void updateClipPathFromProperty()","Funname":"updateClipPathFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"void updateContentPathForFrameWindow()","Funname":"updateContentPathForFrameWindow","Returntype":"void","Args":""},{"Uniquefunname":"void updateContentWindowGeometry()","Funname":"updateContentWindowGeometry","Returntype":"void","Args":""},{"Uniquefunname":"Q_SLOT void updateEnableBlurWindowFromProperty()","Funname":"updateEnableBlurWindowFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateEnableSystemMoveFromProperty()","Funname":"updateEnableSystemMoveFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateEnableSystemResizeFromProperty()","Funname":"updateEnableSystemResizeFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateFrameMaskFromProperty()","Funname":"updateFrameMaskFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateShadowColorFromProperty()","Funname":"updateShadowColorFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateShadowOffsetFromProperty()","Funname":"updateShadowOffsetFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateShadowRadiusFromProperty()","Funname":"updateShadowRadiusFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"void updateSizeHints()","Funname":"updateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"bool updateWindowBlurAreasForWM()","Funname":"updateWindowBlurAreasForWM","Returntype":"bool","Args":""},{"Uniquefunname":"Q_SLOT void updateWindowBlurAreasFromProperty()","Funname":"updateWindowBlurAreasFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"Q_SLOT void updateWindowBlurPathsFromProperty()","Funname":"updateWindowBlurPathsFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"void updateWindowNormalHints()","Funname":"updateWindowNormalHints","Returntype":"void","Args":""},{"Uniquefunname":"Q_SLOT void updateWindowRadiusFromProperty()","Funname":"updateWindowRadiusFromProperty","Returntype":"Q_SLOT void","Args":""},{"Uniquefunname":"void updateWindowShape()","Funname":"updateWindowShape","Returntype":"void","Args":""},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"QNativeWindow * window()","Funname":"window","Returntype":"QNativeWindow *","Args":""},{"Uniquefunname":"bool windowRedirectContent(QWindow * window)","Funname":"windowRedirectContent","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":" ~DPlatformWindowHelper()","Funname":"~DPlatformWindowHelper","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/dplatformwindowhook.h","Functions":[{"Uniquefunname":"Q_OBJECT public DPlatformWindowHook(QNativeWindow * window)","Funname":"DPlatformWindowHook","Returntype":"Q_OBJECT public","Args":"QNativeWindow * window"},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"DPlatformWindowHook * getHookByWindow(const QPlatformWindow * window)","Funname":"getHookByWindow","Returntype":"DPlatformWindowHook *","Args":"const QPlatformWindow * window"},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"DPlatformWindowHook * me()","Funname":"me","Returntype":"DPlatformWindowHook *","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"QNativeWindow * window()","Funname":"window","Returntype":"QNativeWindow *","Args":""},{"Uniquefunname":"signals windowGeometryAboutChanged(const QRect \u0026 rect)","Funname":"windowGeometryAboutChanged","Returntype":"signals","Args":"const QRect \u0026 rect"},{"Uniquefunname":" ~DPlatformWindowHook()","Funname":"~DPlatformWindowHook","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/dxcbwmsupport.h","Functions":[{"Uniquefunname":"protected DXcbWMSupport()","Funname":"DXcbWMSupport","Returntype":"protected","Args":""},{"Uniquefunname":"bool Global::hasBlurWindow()","Funname":"Global::hasBlurWindow","Returntype":"bool","Args":""},{"Uniquefunname":"bool Global::hasComposite()","Funname":"Global::hasComposite","Returntype":"bool","Args":""},{"Uniquefunname":"bool Global::hasNoTitlebar()","Funname":"Global::hasNoTitlebar","Returntype":"bool","Args":""},{"Uniquefunname":"bool Global::hasWindowAlpha()","Funname":"Global::hasWindowAlpha","Returntype":"bool","Args":""},{"Uniquefunname":"QString Global::windowManagerName()","Funname":"Global::windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QVector\u003cxcb_window_t\u003e allWindow()","Funname":"allWindow","Returntype":"QVector\u003cxcb_window_t\u003e","Args":""},{"Uniquefunname":"bool connectHasBlurWindowChanged(QObject * object,std::function\u003cvoid ()\u003e slot)","Funname":"connectHasBlurWindowChanged","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid ()\u003e slot"},{"Uniquefunname":"bool connectHasCompositeChanged(QObject * object,std::function\u003cvoid ()\u003e slot)","Funname":"connectHasCompositeChanged","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid ()\u003e slot"},{"Uniquefunname":"bool connectHasNoTitlebarChanged(QObject * object,std::function\u003cvoid ()\u003e slot)","Funname":"connectHasNoTitlebarChanged","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid ()\u003e slot"},{"Uniquefunname":"bool connectWindowListChanged(QObject * object,std::function\u003cvoid ()\u003e slot)","Funname":"connectWindowListChanged","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid ()\u003e slot"},{"Uniquefunname":"bool connectWindowManagerChangedSignal(QObject * object,std::function\u003cvoid ()\u003e slot)","Funname":"connectWindowManagerChangedSignal","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid ()\u003e slot"},{"Uniquefunname":"bool connectWindowMotifWMHintsChanged(QObject * object,std::function\u003cvoid (quint32 winId)\u003e slot)","Funname":"connectWindowMotifWMHintsChanged","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid (quint32 winId)\u003e slot"},{"Uniquefunname":"qint8 getHasWindowAlpha()","Funname":"getHasWindowAlpha","Returntype":"qint8","Args":""},{"Uniquefunname":"quint32 getMWMDecorations(quint32 winId)","Funname":"getMWMDecorations","Returntype":"quint32","Args":"quint32 winId"},{"Uniquefunname":"quint32 getMWMFunctions(quint32 winId)","Funname":"getMWMFunctions","Returntype":"quint32","Args":"quint32 winId"},{"Uniquefunname":"quint32 getRealWinId(quint32 winId)","Funname":"getRealWinId","Returntype":"quint32","Args":"quint32 winId"},{"Uniquefunname":"bool hasBlurWindow()","Funname":"hasBlurWindow","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasBlurWindow()","Funname":"hasBlurWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void hasBlurWindowChanged(bool hasBlurWindow)","Funname":"hasBlurWindowChanged","Returntype":"void","Args":"bool hasBlurWindow"},{"Uniquefunname":"bool hasComposite()","Funname":"hasComposite","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasComposite()","Funname":"hasComposite","Returntype":"bool","Args":""},{"Uniquefunname":"void hasCompositeChanged(bool hasComposite)","Funname":"hasCompositeChanged","Returntype":"void","Args":"bool hasComposite"},{"Uniquefunname":"bool hasNoTitlebar()","Funname":"hasNoTitlebar","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasNoTitlebar()","Funname":"hasNoTitlebar","Returntype":"bool","Args":""},{"Uniquefunname":"void hasNoTitlebarChanged(bool hasNoTitlebar)","Funname":"hasNoTitlebarChanged","Returntype":"void","Args":"bool hasNoTitlebar"},{"Uniquefunname":"bool hasScissorWindow()","Funname":"hasScissorWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void hasScissorWindowChanged(bool hasScissorWindow)","Funname":"hasScissorWindowChanged","Returntype":"void","Args":"bool hasScissorWindow"},{"Uniquefunname":"bool hasWindowAlpha()","Funname":"hasWindowAlpha","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasWindowAlpha()","Funname":"hasWindowAlpha","Returntype":"bool","Args":""},{"Uniquefunname":"DXcbWMSupport * instance()","Funname":"instance","Returntype":"DXcbWMSupport *","Args":""},{"Uniquefunname":"bool isContainsForRootWindow(xcb_atom_t atom)","Funname":"isContainsForRootWindow","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool isDeepinWM()","Funname":"isDeepinWM","Returntype":"bool","Args":""},{"Uniquefunname":"bool isKwin()","Funname":"isKwin","Returntype":"bool","Args":""},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void popupSystemWindowMenu(quint32 winId)","Funname":"popupSystemWindowMenu","Returntype":"void","Args":"quint32 winId"},{"Uniquefunname":"void setMWMDecorations(quint32 windId,quint32 decor)","Funname":"setMWMDecorations","Returntype":"void","Args":"quint32 windId,quint32 decor"},{"Uniquefunname":"void setMWMFunctions(quint32 winId,quint32 func)","Funname":"setMWMFunctions","Returntype":"void","Args":"quint32 winId,quint32 func"},{"Uniquefunname":"void updateHasBlurWindow()","Funname":"updateHasBlurWindow","Returntype":"void","Args":""},{"Uniquefunname":"void updateHasComposite()","Funname":"updateHasComposite","Returntype":"void","Args":""},{"Uniquefunname":"void updateHasNoTitlebar()","Funname":"updateHasNoTitlebar","Returntype":"void","Args":""},{"Uniquefunname":"void updateHasScissorWindow()","Funname":"updateHasScissorWindow","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateRootWindowProperties()","Funname":"updateRootWindowProperties","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t windowFromPoint(const QPoint \u0026 p)","Funname":"windowFromPoint","Returntype":"xcb_window_t","Args":"const QPoint \u0026 p"},{"Uniquefunname":"void windowListChanged()","Funname":"windowListChanged","Returntype":"void","Args":""},{"Uniquefunname":"signals windowManagerChanged()","Funname":"windowManagerChanged","Returntype":"signals","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowMotifWMHintsChanged(quint32 winId)","Funname":"windowMotifWMHintsChanged","Returntype":"void","Args":"quint32 winId"}],"Records":null}
{"Filepath":"xcb/utility.h","Functions":[{"Uniquefunname":"new_area.height= BlurArea::qRound64(height * scale)","Funname":"BlurArea::qRound64","Returntype":"new_area.height=","Args":"height * scale"},{"Uniquefunname":"new_area.width= BlurArea::qRound64(width * scale)","Funname":"BlurArea::qRound64","Returntype":"new_area.width=","Args":"width * scale"},{"Uniquefunname":"new_area.x= BlurArea::qRound64(x * scale)","Funname":"BlurArea::qRound64","Returntype":"new_area.x=","Args":"x * scale"},{"Uniquefunname":"new_area.xRadius= BlurArea::qRound64(xRadius * scale)","Funname":"BlurArea::qRound64","Returntype":"new_area.xRadius=","Args":"xRadius * scale"},{"Uniquefunname":"new_area.y= BlurArea::qRound64(y * scale)","Funname":"BlurArea::qRound64","Returntype":"new_area.y=","Args":"y * scale"},{"Uniquefunname":"new_area.yRaduis= BlurArea::qRound64(yRaduis * scale)","Funname":"BlurArea::qRound64","Returntype":"new_area.yRaduis=","Args":"yRaduis * scale"},{"Uniquefunname":"int XIconifyWindow(void * display,quint32 w,int screen_number)","Funname":"XIconifyWindow","Returntype":"int","Args":"void * display,quint32 w,int screen_number"},{"Uniquefunname":"bool blurWindowBackground(const quint32 WId,const QVector\u003cBlurArea\u003e \u0026 areas)","Funname":"blurWindowBackground","Returntype":"bool","Args":"const quint32 WId,const QVector\u003cBlurArea\u003e \u0026 areas"},{"Uniquefunname":"bool blurWindowBackgroundByImage(const quint32 WId,const QRect \u0026 blurRect,const QImage \u0026 maskImage)","Funname":"blurWindowBackgroundByImage","Returntype":"bool","Args":"const quint32 WId,const QRect \u0026 blurRect,const QImage \u0026 maskImage"},{"Uniquefunname":"bool blurWindowBackgroundByPaths(const quint32 WId,const QList\u003cQPainterPath\u003e \u0026 paths)","Funname":"blurWindowBackgroundByPaths","Returntype":"bool","Args":"const quint32 WId,const QList\u003cQPainterPath\u003e \u0026 paths"},{"Uniquefunname":"void cancelWindowMoveResize(quint32 WId)","Funname":"cancelWindowMoveResize","Returntype":"void","Args":"quint32 WId"},{"Uniquefunname":"void clearWindowBlur(const quint32 WId)","Funname":"clearWindowBlur","Returntype":"void","Args":"const quint32 WId"},{"Uniquefunname":"void clearWindowProperty(quint32 WId,xcb_atom_t propAtom)","Funname":"clearWindowProperty","Returntype":"void","Args":"quint32 WId,xcb_atom_t propAtom"},{"Uniquefunname":"quint32 clientLeader()","Funname":"clientLeader","Returntype":"quint32","Args":""},{"Uniquefunname":"quint32 createGroupWindow()","Funname":"createGroupWindow","Returntype":"quint32","Args":""},{"Uniquefunname":"void destoryGroupWindow(quint32 groupLeader)","Funname":"destoryGroupWindow","Returntype":"void","Args":"quint32 groupLeader"},{"Uniquefunname":"QImage dropShadow(const QPixmap \u0026 px,qreal radius,const QColor \u0026 color)","Funname":"dropShadow","Returntype":"QImage","Args":"const QPixmap \u0026 px,qreal radius,const QColor \u0026 color"},{"Uniquefunname":"const QPainterPath elementAt(i)","Funname":"elementAt","Returntype":"const QPainterPath","Args":"i"},{"Uniquefunname":"QVector\u003cquint32\u003e getCurrentWorkspaceWindows()","Funname":"getCurrentWorkspaceWindows","Returntype":"QVector\u003cquint32\u003e","Args":""},{"Uniquefunname":"QtMotifWmHints getMotifWmHints(quint32 WId)","Funname":"getMotifWmHints","Returntype":"QtMotifWmHints","Args":"quint32 WId"},{"Uniquefunname":"quint32 getNativeTopLevelWindow(quint32 WId)","Funname":"getNativeTopLevelWindow","Returntype":"quint32","Args":"quint32 WId"},{"Uniquefunname":"QWindow * getWindowById(quint32 WId)","Funname":"getWindowById","Returntype":"QWindow *","Args":"quint32 WId"},{"Uniquefunname":"qreal getWindowDevicePixelRatio(quint32 WId)","Funname":"getWindowDevicePixelRatio","Returntype":"qreal","Args":"quint32 WId"},{"Uniquefunname":"QVector\u003cquint32\u003e getWindows()","Funname":"getWindows","Returntype":"QVector\u003cquint32\u003e","Args":""},{"Uniquefunname":"qint32 getWorkspaceForWindow(quint32 WId)","Funname":"getWorkspaceForWindow","Returntype":"qint32","Args":"quint32 WId"},{"Uniquefunname":"new_area.height= qRound64(height * scale)","Funname":"qRound64","Returntype":"new_area.height=","Args":"height * scale"},{"Uniquefunname":"new_area.width= qRound64(width * scale)","Funname":"qRound64","Returntype":"new_area.width=","Args":"width * scale"},{"Uniquefunname":"new_area.x= qRound64(x * scale)","Funname":"qRound64","Returntype":"new_area.x=","Args":"x * scale"},{"Uniquefunname":"new_area.xRadius= qRound64(xRadius * scale)","Funname":"qRound64","Returntype":"new_area.xRadius=","Args":"xRadius * scale"},{"Uniquefunname":"new_area.y= qRound64(y * scale)","Funname":"qRound64","Returntype":"new_area.y=","Args":"y * scale"},{"Uniquefunname":"new_area.yRaduis= qRound64(yRaduis * scale)","Funname":"qRound64","Returntype":"new_area.yRaduis=","Args":"yRaduis * scale"},{"Uniquefunname":"bool setEnableBlurWindow(const quint32 WId,bool enable)","Funname":"setEnableBlurWindow","Returntype":"bool","Args":"const quint32 WId,bool enable"},{"Uniquefunname":"void setFrameExtents(WId wid,const QMargins \u0026 margins)","Funname":"setFrameExtents","Returntype":"void","Args":"WId wid,const QMargins \u0026 margins"},{"Uniquefunname":"void setMotifWmHints(quint32 WId,QtMotifWmHints hints)","Funname":"setMotifWmHints","Returntype":"void","Args":"quint32 WId,QtMotifWmHints hints"},{"Uniquefunname":"void setNoTitlebar(quint32 WId,bool on)","Funname":"setNoTitlebar","Returntype":"void","Args":"quint32 WId,bool on"},{"Uniquefunname":"bool setWindowCursor(quint32 WId,CornerEdge ce)","Funname":"setWindowCursor","Returntype":"bool","Args":"quint32 WId,CornerEdge ce"},{"Uniquefunname":"void setWindowGroup(quint32 window,quint32 groupLeader)","Funname":"setWindowGroup","Returntype":"void","Args":"quint32 window,quint32 groupLeader"},{"Uniquefunname":"void startWindowSystemMove(quint32 WId)","Funname":"startWindowSystemMove","Returntype":"void","Args":"quint32 WId"},{"Uniquefunname":"QList\u003cQRect\u003e sudokuByRect(const QRect \u0026 rect,QMargins borders)","Funname":"sudokuByRect","Returntype":"QList\u003cQRect\u003e","Args":"const QRect \u0026 rect,QMargins borders"},{"Uniquefunname":"QPoint translateCoordinates(const QPoint \u0026 pos,quint32 src,quint32 dst)","Funname":"translateCoordinates","Returntype":"QPoint","Args":"const QPoint \u0026 pos,quint32 src,quint32 dst"},{"Uniquefunname":"void updateMousePointForWindowMove(quint32 WId)","Funname":"updateMousePointForWindowMove","Returntype":"void","Args":"quint32 WId"},{"Uniquefunname":"quint32 windowFromPoint(const QPoint \u0026 p)","Funname":"windowFromPoint","Returntype":"quint32","Args":"const QPoint \u0026 p"},{"Uniquefunname":"QRect windowGeometry(quint32 WId)","Funname":"windowGeometry","Returntype":"QRect","Args":"quint32 WId"},{"Uniquefunname":"QByteArray windowProperty(quint32 WId,xcb_atom_t propAtom,xcb_atom_t typeAtom,quint32 len)","Funname":"windowProperty","Returntype":"QByteArray","Args":"quint32 WId,xcb_atom_t propAtom,xcb_atom_t typeAtom,quint32 len"}],"Records":[{"Name":"struct:BlurArea","Fields":["qint32","BlurArea","qint32","qint32","qint32","qint32","qint32"]},{"Name":"enum:CornerEdge","Fields":["BottomEdge","BottomLeftCorner","BottomRightCorner","LeftEdge","RightEdge","TopEdge","TopLeftCorner","TopRightCorner"]},{"Name":"struct:QtMotifWmHints","Fields":["quint32","quint32","quint32","qint32","quint32"]}]}
{"Filepath":"xcb/windoweventhook.h","Functions":[{"Uniquefunname":"void handleClientMessageEvent(QXcbWindowEventListener * el,const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"QXcbWindowEventListener * el,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(QXcbWindowEventListener * el,const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"QXcbWindowEventListener * el,const xcb_configure_notify_event_t *"},{"Uniquefunname":"void handleFocusInEvent(QXcbWindowEventListener * el,const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"QXcbWindowEventListener * el,const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(QXcbWindowEventListener * el,const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"QXcbWindowEventListener * el,const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleMapNotifyEvent(QXcbWindowEventListener * el,const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"QXcbWindowEventListener * el,const xcb_map_notify_event_t *"},{"Uniquefunname":"void handlePropertyNotifyEvent(QXcbWindowEventListener * el,const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"QXcbWindowEventListener * el,const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(QXcbWindowEventListener * el,xcb_ge_event_t * event)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"QXcbWindowEventListener * el,xcb_ge_event_t * event"},{"Uniquefunname":"public init(QXcbWindow * window,bool redirectContent)","Funname":"init","Returntype":"public","Args":"QXcbWindow * window,bool redirectContent"},{"Uniquefunname":"private relayFocusToModalWindow(QWindow * w,QXcbConnection * connection)","Funname":"relayFocusToModalWindow","Returntype":"private","Args":"QWindow * w,QXcbConnection * connection"},{"Uniquefunname":"bool windowEvent(QPlatformWindow * window,QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QPlatformWindow * window,QEvent * event"},{"Uniquefunname":"void windowEvent(QPlatformWindow * window,QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QPlatformWindow * window,QEvent * event"}],"Records":null}
{"Filepath":"xcb/xcbnativeeventfilter.h","Functions":[{"Uniquefunname":" XcbNativeEventFilter(QXcbConnection * connection)","Funname":"XcbNativeEventFilter","Returntype":"","Args":"QXcbConnection * connection"},{"Uniquefunname":"QClipboard clipboardModeForAtom(xcb_atom_t a)","Funname":"clipboardModeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t a"},{"Uniquefunname":"bool nativeEventFilter(const QByteArray \u0026 eventType,void * message,long * result)","Funname":"nativeEventFilter","Returntype":"bool","Args":"const QByteArray \u0026 eventType,void * message,long * result"},{"Uniquefunname":"private updateXIDeviceInfoMap()","Funname":"updateXIDeviceInfoMap","Returntype":"private","Args":""},{"Uniquefunname":"DeviceType xiEventSource(const QInputEvent * event)","Funname":"xiEventSource","Returntype":"DeviceType","Args":"const QInputEvent * event"}],"Records":[{"Name":"struct:XIDeviceInfos","Fields":["DeviceType"]}]}
{"Filepath":"xcb/3rdparty/clientwin.h","Functions":[{"Uniquefunname":"xcb_window_t Find_Client(xcb_connection_t * dpy,xcb_window_t root,xcb_window_t target_win)","Funname":"Find_Client","Returntype":"xcb_window_t","Args":"xcb_connection_t * dpy,xcb_window_t root,xcb_window_t target_win"}],"Records":null}
{"Filepath":"xcb/3rdparty/dsimple.h","Functions":[{"Uniquefunname":"void Fatal_Error(const char *,...)","Funname":"Fatal_Error","Returntype":"void","Args":"const char *,..."},{"Uniquefunname":"xcb_atom_t Get_Atom(xcb_connection_t *,const char *)","Funname":"Get_Atom","Returntype":"xcb_atom_t","Args":"xcb_connection_t *,const char *"},{"Uniquefunname":"const char * Get_Atom_Name(xcb_connection_t *,xcb_atom_t)","Funname":"Get_Atom_Name","Returntype":"const char *","Args":"xcb_connection_t *,xcb_atom_t"},{"Uniquefunname":"const char * Get_Display_Name(const char * displayname)","Funname":"Get_Display_Name","Returntype":"const char *","Args":"const char * displayname"},{"Uniquefunname":"atom_cache_entry * Intern_Atom(xcb_connection_t *,const char *)","Funname":"Intern_Atom","Returntype":"atom_cache_entry *","Args":"xcb_connection_t *,const char *"},{"Uniquefunname":"void Print_X_Error(xcb_connection_t *,xcb_generic_error_t *)","Funname":"Print_X_Error","Returntype":"void","Args":"xcb_connection_t *,xcb_generic_error_t *"},{"Uniquefunname":"xcb_window_t Select_Window(xcb_connection_t *,const xcb_screen_t *,int)","Funname":"Select_Window","Returntype":"xcb_window_t","Args":"xcb_connection_t *,const xcb_screen_t *,int"},{"Uniquefunname":"void Setup_Display_And_Screen(const char * displayname,xcb_connection_t ** dpy,xcb_screen_t ** screen)","Funname":"Setup_Display_And_Screen","Returntype":"void","Args":"const char * displayname,xcb_connection_t ** dpy,xcb_screen_t ** screen"},{"Uniquefunname":"xcb_window_t Window_With_Name(xcb_connection_t *,xcb_window_t,const char *)","Funname":"Window_With_Name","Returntype":"xcb_window_t","Args":"xcb_connection_t *,xcb_window_t,const char *"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXInput2()","Funname":"hasXInput2","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRender()","Funname":"hasXRender","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isConnected()","Funname":"isConnected","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner)","Funname":"startSystemResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemResizeInfo","Fields":["Qt::Corner","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]},{"Name":"union:q_padded_xcb_event","Fields":["T","char[32]"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"private updateXKBStateFromState(struct xkb_state * kb_state,quint16 state)","Funname":"updateXKBStateFromState","Returntype":"private","Args":"struct xkb_state * kb_state,quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void destroySurface(VkSurfaceKHR surface)","Funname":"destroySurface","Returntype":"void","Args":"VkSurfaceKHR surface"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"bool doStartSystemResize(const QPoint \u0026 globalPos,Qt::Corner corner)","Funname":"doStartSystemResize","Returntype":"bool","Args":"const QPoint \u0026 globalPos,Qt::Corner corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor,bool isBitmapCursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor,bool isBitmapCursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXInput2()","Funname":"hasXInput2","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRender()","Funname":"hasXRender","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isConnected()","Funname":"isConnected","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner)","Funname":"startSystemResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemResizeInfo","Fields":["Qt::Corner","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]},{"Name":"union:q_padded_xcb_event","Fields":["T","char[32]"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"private updateXKBStateFromState(struct xkb_state * kb_state,quint16 state)","Funname":"updateXKBStateFromState","Returntype":"private","Args":"struct xkb_state * kb_state,quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void destroySurface(VkSurfaceKHR surface)","Funname":"destroySurface","Returntype":"void","Args":"VkSurfaceKHR surface"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"bool doStartSystemResize(const QPoint \u0026 globalPos,Qt::Corner corner)","Funname":"doStartSystemResize","Returntype":"bool","Args":"const QPoint \u0026 globalPos,Qt::Corner corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor,bool isBitmapCursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor,bool isBitmapCursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.10.1/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbconnection.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasShm()","Funname":"hasShm","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasShmFd()","Funname":"hasShmFd","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXInput2()","Funname":"hasXInput2","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeShm()","Funname":"initializeShm","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isConnected()","Funname":"isConnected","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]},{"Name":"union:q_padded_xcb_event","Fields":["T","char[32]"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void destroySurface(VkSurfaceKHR surface)","Funname":"destroySurface","Returntype":"void","Args":"VkSurfaceKHR surface"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"bool doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbconnection.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasShm()","Funname":"hasShm","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasShmFd()","Funname":"hasShmFd","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXInput2()","Funname":"hasXInput2","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeShm()","Funname":"initializeShm","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isConnected()","Funname":"isConnected","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]},{"Name":"union:q_padded_xcb_event","Fields":["T","char[32]"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void destroySurface(VkSurfaceKHR surface)","Funname":"destroySurface","Returntype":"void","Args":"VkSurfaceKHR surface"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"bool doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.1/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbconnection.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasShm()","Funname":"hasShm","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasShmFd()","Funname":"hasShmFd","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXInput2()","Funname":"hasXInput2","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeShm()","Funname":"initializeShm","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isConnected()","Funname":"isConnected","Returntype":"bool","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]},{"Name":"union:q_padded_xcb_event","Fields":["T","char[32]"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void destroySurface(VkSurfaceKHR surface)","Funname":"destroySurface","Returntype":"void","Args":"VkSurfaceKHR surface"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.2/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbconnection.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasShm()","Funname":"hasShm","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasShmFd()","Funname":"hasShmFd","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXInput2()","Funname":"hasXInput2","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeShm()","Funname":"initializeShm","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isConnected()","Funname":"isConnected","Returntype":"bool","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]},{"Name":"union:q_padded_xcb_event","Fields":["T","char[32]"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void destroySurface(VkSurfaceKHR surface)","Funname":"destroySurface","Returntype":"void","Args":"VkSurfaceKHR surface"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.11.3/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.1/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.2/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"bool timeGreaterThan(xcb_timestamp_t a,xcb_timestamp_t b)","Funname":"timeGreaterThan","Returntype":"bool","Args":"xcb_timestamp_t a,xcb_timestamp_t b"},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.3/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"bool timeGreaterThan(xcb_timestamp_t a,xcb_timestamp_t b)","Funname":"timeGreaterThan","Returntype":"bool","Args":"xcb_timestamp_t a,xcb_timestamp_t b"},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.4/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"bool timeGreaterThan(xcb_timestamp_t a,xcb_timestamp_t b)","Funname":"timeGreaterThan","Returntype":"bool","Args":"xcb_timestamp_t a,xcb_timestamp_t b"},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setSwapInterval(int swapInterval)","Funname":"setSwapInterval","Returntype":"void","Args":"int swapInterval"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"int swapInterval()","Funname":"swapInterval","Returntype":"int","Args":""},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.5/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"bool timeGreaterThan(xcb_timestamp_t a,xcb_timestamp_t b)","Funname":"timeGreaterThan","Returntype":"bool","Args":"xcb_timestamp_t a,xcb_timestamp_t b"},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setSwapInterval(int swapInterval)","Funname":"setSwapInterval","Returntype":"void","Args":"int swapInterval"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"int swapInterval()","Funname":"swapInterval","Returntype":"int","Args":""},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.6/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"bool timeGreaterThan(xcb_timestamp_t a,xcb_timestamp_t b)","Funname":"timeGreaterThan","Returntype":"bool","Args":"xcb_timestamp_t a,xcb_timestamp_t b"},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setSwapInterval(int swapInterval)","Funname":"setSwapInterval","Returntype":"void","Args":"int swapInterval"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"int swapInterval()","Funname":"swapInterval","Returntype":"int","Args":""},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.7/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_HIDDEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"bool timeGreaterThan(xcb_timestamp_t a,xcb_timestamp_t b)","Funname":"timeGreaterThan","Returntype":"bool","Args":"xcb_timestamp_t a,xcb_timestamp_t b"},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setSwapInterval(int swapInterval)","Funname":"setSwapInterval","Returntype":"void","Args":"int swapInterval"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"int swapInterval()","Funname":"swapInterval","Returntype":"int","Args":""},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateHidden","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.8/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionAsk","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_HIDDEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"bool timeGreaterThan(xcb_timestamp_t a,xcb_timestamp_t b)","Funname":"timeGreaterThan","Returntype":"bool","Args":"xcb_timestamp_t a,xcb_timestamp_t b"},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"Qt defaultAction(Qt::DropActions possibleActions,Qt::KeyboardModifiers modifiers)","Funname":"defaultAction","Returntype":"Qt","Args":"Qt::DropActions possibleActions,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void readActionList()","Funname":"readActionList","Returntype":"void","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void setActionList(Qt::DropAction requestedAction,Qt::DropActions supportedActions)","Funname":"setActionList","Returntype":"void","Args":"Qt::DropAction requestedAction,Qt::DropActions supportedActions"},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"void startListeningForActionListChanges()","Funname":"startListeningForActionListChanges","Returntype":"void","Args":""},{"Uniquefunname":"void stopListeningForActionListChanges()","Funname":"stopListeningForActionListChanges","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt toDropActions(const QVector\u003cxcb_atom_t\u003e \u0026 atoms)","Funname":"toDropActions","Returntype":"Qt","Args":"const QVector\u003cxcb_atom_t\u003e \u0026 atoms"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void XKBContextDeleter::operator()","Funname":"XKBContextDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBKeymapDeleter::operator()","Funname":"XKBKeymapDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void XKBStateDeleter::operator()","Funname":"XKBStateDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers modifiers,struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QString lookupStringNoKeysymTransformations(xkb_keysym_t keysym)","Funname":"lookupStringNoKeysymTransformations","Returntype":"QString","Args":"xkb_keysym_t keysym"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setSwapInterval(int swapInterval)","Funname":"setSwapInterval","Returntype":"void","Args":"int swapInterval"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"int swapInterval()","Funname":"swapInterval","Returntype":"int","Args":""},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateHidden","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbxkbcommon.h","Functions":[{"Uniquefunname":"static void qt_UCSConvertCase(uint32_t code, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"qt_UCSConvertCase","Returntype":"QT_BEGIN_NAMESPACE void","Args":"uint32_t code,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"void xkbcommon_XConvertCase(xkb_keysym_t sym, xkb_keysym_t *lower, xkb_keysym_t *upper)","Funname":"xkbcommon_XConvertCase","Returntype":"void","Args":"xkb_keysym_t sym,xkb_keysym_t * lower,xkb_keysym_t * upper"},{"Uniquefunname":"xkb_keysym_t xkbcommon_xkb_keysym_to_upper(xkb_keysym_t ks)","Funname":"xkbcommon_xkb_keysym_to_upper","Returntype":"xkb_keysym_t","Args":"xkb_keysym_t ks"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.12.9/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QTimer \u0026 focusInTimer()","Funname":"focusInTimer","Returntype":"QTimer \u0026","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"bool timeGreaterThan(xcb_timestamp_t a,xcb_timestamp_t b)","Funname":"timeGreaterThan","Returntype":"bool","Args":"xcb_timestamp_t a,xcb_timestamp_t b"},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * event)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * event"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setSwapInterval(int swapInterval)","Funname":"setSwapInterval","Returntype":"void","Args":"int swapInterval"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"int swapInterval()","Funname":"swapInterval","Returntype":"int","Args":""},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.13.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QTimer \u0026 focusInTimer()","Funname":"focusInTimer","Returntype":"QTimer \u0026","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"bool timeGreaterThan(xcb_timestamp_t a,xcb_timestamp_t b)","Funname":"timeGreaterThan","Returntype":"bool","Args":"xcb_timestamp_t a,xcb_timestamp_t b"},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * event)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * event"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalBaseDpi()","Funname":"logicalBaseDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setSwapInterval(int swapInterval)","Funname":"setSwapInterval","Returntype":"void","Args":"int swapInterval"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"int swapInterval()","Funname":"swapInterval","Returntype":"int","Args":""},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QTimer \u0026 focusInTimer()","Funname":"focusInTimer","Returntype":"QTimer \u0026","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,int corner)","Funname":"startSystemMoveResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,int corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"bool timeGreaterThan(xcb_timestamp_t a,xcb_timestamp_t b)","Funname":"timeGreaterThan","Returntype":"bool","Args":"xcb_timestamp_t a,xcb_timestamp_t b"},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["int","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * event)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * event"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalBaseDpi()","Funname":"logicalBaseDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int corner)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setSwapInterval(int swapInterval)","Funname":"setSwapInterval","Returntype":"void","Args":"int swapInterval"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove(const QPoint \u0026 pos)","Funname":"startSystemMove","Returntype":"bool","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int corner)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int corner"},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"int swapInterval()","Funname":"swapInterval","Returntype":"int","Args":""},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.14.1/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbatom.h","Functions":[{"Uniquefunname":" QXcbAtom()","Funname":"QXcbAtom","Returntype":"","Args":""},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"void initialize(xcb_connection_t * connection)","Funname":"initialize","Returntype":"void","Args":"xcb_connection_t * connection"},{"Uniquefunname":"protected initializeAllAtoms(xcb_connection_t * connection)","Funname":"initializeAllAtoms","Returntype":"protected","Args":"xcb_connection_t * connection"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"}],"Records":[{"Name":"enum:Atom","Fields":["AT_SPI_BUS","AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","EDID","EDID_DATA","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_CLIENT_MACHINE","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XFree86_DDC_EDID1_RAWDATA","XdndActionAsk","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_HIDDEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"public QXcbSystemTrayBackingStore(QWindow * window)","Funname":"QXcbSystemTrayBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"private initXRenderMode()","Funname":"initXRenderMode","Returntype":"private","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"virtual void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"virtual void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"void recreateImage(QXcbWindow * win,const QSize \u0026 size)","Funname":"recreateImage","Returntype":"void","Args":"QXcbWindow * win,const QSize \u0026 size"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"protected render(xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"render","Returntype":"protected","Args":"xcb_window_t window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbSystemTrayBackingStore()","Funname":"~QXcbSystemTrayBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbClipboardTransaction(QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f)","Funname":"QXcbClipboardTransaction","Returntype":"Q_OBJECT public","Args":"QXcbClipboard * clipboard,xcb_window_t w,xcb_atom_t p,QByteArray d,xcb_atom_t t,int f"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"int clipboardTimeout()","Funname":"clipboardTimeout","Returntype":"int","Args":""},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"bool handlePropertyNotify(const xcb_generic_event_t * event)","Funname":"handlePropertyNotify","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"int increment()","Funname":"increment","Returntype":"int","Args":""},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"void removeTransaction(xcb_window_t window)","Funname":"removeTransaction","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"protected timerEvent(QTimerEvent * ev)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * ev"},{"Uniquefunname":"bool updateIncrementalProperty(const xcb_property_notify_event_t * event)","Funname":"updateIncrementalProperty","Returntype":"bool","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbClipboardTransaction()","Funname":"~QXcbClipboardTransaction","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void abortSystemMoveResizeForTouch()","Funname":"abortSystemMoveResizeForTouch","Returntype":"void","Args":""},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"Qt button()","Funname":"button","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt buttonState()","Funname":"buttonState","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"QXcbEventQueue * eventQueue()","Funname":"eventQueue","Returntype":"QXcbEventQueue *","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QTimer \u0026 focusInTimer()","Funname":"focusInTimer","Returntype":"QTimer \u0026","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual bool handleNativeEvent(xcb_generic_event_t *)","Funname":"handleNativeEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool imageNeedsEndianSwap()","Funname":"imageNeedsEndianSwap","Returntype":"bool","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isGnome()","Funname":"isGnome","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"bool isUnity()","Funname":"isUnity","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUserInputEvent(xcb_generic_event_t * event)","Funname":"isUserInputEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"TouchDeviceData * populateTouchDevices(void * info)","Funname":"populateTouchDevices","Returntype":"TouchDeviceData *","Args":"void * info"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"void printXcbError(const char * message,xcb_generic_error_t * error)","Funname":"printXcbError","Returntype":"void","Args":"const char * message,xcb_generic_error_t * error"},{"Uniquefunname":"void printXcbEvent(const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event)","Funname":"printXcbEvent","Returntype":"void","Args":"const QLoggingCategory \u0026 log,const char * message,xcb_generic_event_t * event"},{"Uniquefunname":"void processXcbEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processXcbEvents","Returntype":"void","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"Qt queryMouseButtons()","Funname":"queryMouseButtons","Returntype":"Qt","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"ScrollingDevice * scrollingDeviceForId(int id)","Funname":"scrollingDeviceForId","Returntype":"ScrollingDevice *","Args":"int id"},{"Uniquefunname":"void setButtonState(Qt::MouseButton button,bool down)","Funname":"setButtonState","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"bool startSystemMoveResizeForTouch(xcb_window_t window,int edges)","Funname":"startSystemMoveResizeForTouch","Returntype":"bool","Args":"xcb_window_t window,int edges"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"bool timeGreaterThan(xcb_timestamp_t a,xcb_timestamp_t b)","Funname":"timeGreaterThan","Returntype":"bool","Args":"xcb_timestamp_t a,xcb_timestamp_t b"},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierarchyEvent(void * event)","Funname":"xi2HandleHierarchyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEventsDisabled()","Funname":"xi2MouseEventsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2SelectDeviceEvents(xcb_window_t window)","Funname":"xi2SelectDeviceEvents","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectDeviceEventsCompatibility(xcb_window_t window)","Funname":"xi2SelectDeviceEventsCompatibility","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void xi2UpdateScrollingDevice(ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2UpdateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"void xi2UpdateScrollingDevices()","Funname":"xi2UpdateScrollingDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"private xrandrSelectEvents()","Funname":"xrandrSelectEvents","Returntype":"private","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemMoveResizeInfo","Fields":["uint16_t","int","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"struct:TouchDeviceData::ValuatorClassInfo","Fields":["QXcbAtom::Atom","double","double","int"]},{"Name":"struct:TouchDeviceData","Fields":["QPointF","QPointF","QHash\u003cint,QPointF\u003e","bool","QTouchDevice *","QSizeF","QHash\u003cint,QWindowSystemInterface::TouchPoint\u003e","QVector\u003cValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbconnection_basic.h","Functions":[{"Uniquefunname":"void QStdFreeDeleter::operator()","Funname":"QStdFreeDeleter::operator","Returntype":"void","Args":""},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXcb)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXcb"},{"Uniquefunname":"void operator()","Funname":"operator","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbcursor.h","Functions":[{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":"        explicit CachedCursor(xcb_connection_t *conn, xcb_cursor_t c)","Funname":"CachedCursor::CachedCursor","Returntype":"explicit","Args":"xcb_connection_t * conn,xcb_cursor_t c"},{"Uniquefunname":" CachedCursor::~CachedCursor()","Funname":"CachedCursor::~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * window)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * window"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~CachedCursor()","Funname":"~CachedCursor","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:CachedCursor","Fields":["xcb_connection_t *","xcb_cursor_t"]},{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbdrag.h","Functions":[{"Uniquefunname":" QT_REQUIRE_CONFIG(draganddrop)","Funname":"QT_REQUIRE_CONFIG","Returntype":"","Args":"draganddrop"},{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"Qt defaultAction(Qt::DropActions possibleActions,Qt::KeyboardModifiers modifiers)","Funname":"defaultAction","Returntype":"Qt","Args":"Qt::DropActions possibleActions,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"bool findXdndAwareTarget(const QPoint \u0026 globalPos,xcb_window_t * target_out)","Funname":"findXdndAwareTarget","Returntype":"bool","Args":"const QPoint \u0026 globalPos,xcb_window_t * target_out"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos,Qt::MouseButtons b,Qt::KeyboardModifiers mods"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"void readActionList()","Funname":"readActionList","Returntype":"void","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void setActionList(Qt::DropAction requestedAction,Qt::DropActions supportedActions)","Funname":"setActionList","Returntype":"void","Args":"Qt::DropAction requestedAction,Qt::DropActions supportedActions"},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"void startListeningForActionListChanges()","Funname":"startListeningForActionListChanges","Returntype":"void","Args":""},{"Uniquefunname":"void stopListeningForActionListChanges()","Funname":"stopListeningForActionListChanges","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt toDropActions(const QVector\u003cxcb_atom_t\u003e \u0026 atoms)","Funname":"toDropActions","Returntype":"Qt","Args":"const QVector\u003cxcb_atom_t\u003e \u0026 atoms"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbeventdispatcher.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"    Q_DECLARE_PUBLIC(QXcbGlibEventDispatcher)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"QXcbGlibEventDispatcher"},{"Uniquefunname":"public createEventDispatcher(QXcbConnection * connection)","Funname":"createEventDispatcher","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"QEventLoop flags()","Funname":"flags","Returntype":"QEventLoop","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"bool hasPendingEvents()","Funname":"hasPendingEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool processEvents(QEventLoop::ProcessEventsFlags flags)","Funname":"processEvents","Returntype":"bool","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":" ~QXcbGlibEventDispatcher()","Funname":"~QXcbGlibEventDispatcher","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbUnixEventDispatcher()","Funname":"~QXcbUnixEventDispatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbeventqueue.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbEventQueue(QXcbConnection * connection)","Funname":"QXcbEventQueue","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"    Q_DECLARE_FLAGS(PeekOptions, PeekOption)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"PeekOptions,PeekOption"},{"Uniquefunname":"void dequeueNode()","Funname":"dequeueNode","Returntype":"void","Args":""},{"Uniquefunname":"void flushBufferedEvents()","Funname":"flushBufferedEvents","Returntype":"void","Args":""},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"bool isCloseConnectionEvent(const xcb_generic_event_t * event)","Funname":"isCloseConnectionEvent","Returntype":"bool","Args":"const xcb_generic_event_t * event"},{"Uniquefunname":"bool isEmpty()","Funname":"isEmpty","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(PeekOption config,Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"PeekOption config,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"template\u003ctypename Peeker\u003e xcb_generic_event_t * peek(Peeker \u0026\u0026 peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t *","Args":"Peeker \u0026\u0026 peeker"},{"Uniquefunname":"xcb_generic_event_t *QXcbEventQueue::peek(PeekOption option, Peeker \u0026\u0026peeker)","Funname":"peek","Returntype":"template\u003ctypename Peeker\u003e xcb_generic_event_t * QXcbEventQueue","Args":"PeekOption option,Peeker \u0026\u0026 peeker"},{"Uniquefunname":"private qXcbEventNodeFactory(xcb_generic_event_t * event)","Funname":"qXcbEventNodeFactory","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void sendCloseConnectionEvent()","Funname":"sendCloseConnectionEvent","Returntype":"void","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst()","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":""},{"Uniquefunname":"xcb_generic_event_t * takeFirst(QEventLoop::ProcessEventsFlags flags)","Funname":"takeFirst","Returntype":"xcb_generic_event_t *","Args":"QEventLoop::ProcessEventsFlags flags"},{"Uniquefunname":"void wakeUpDispatcher()","Funname":"wakeUpDispatcher","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbEventQueue()","Funname":"~QXcbEventQueue","Returntype":"","Args":""}],"Records":[{"Name":"enum:PeekOption","Fields":["PeekDefault","PeekFromCachedIndex","PeekRemoveMatch","PeekRemoveMatchContinue","PeekRetainMatch"]},{"Name":"struct:QXcbEventNode","Fields":["xcb_generic_event_t *","bool","QXcbEventNode *"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformPixmap * createPlatformPixmap(QPlatformPixmap::PixelType type)","Funname":"createPlatformPixmap","Returntype":"QPlatformPixmap *","Args":"QPlatformPixmap::PixelType type"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformVulkanInstance * createPlatformVulkanInstance(QVulkanInstance * instance)","Funname":"createPlatformVulkanInstance","Returntype":"QPlatformVulkanInstance *","Args":"QVulkanInstance * instance"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"bool hasDefaultConnection()","Funname":"hasDefaultConnection","Returntype":"bool","Args":""},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"bool nativePaintingEnabled()","Funname":"nativePaintingEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time,bool fromSendEvent"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleStateChanges(xkb_state_component changedComponents)","Funname":"handleStateChanges","Returntype":"void","Args":"xkb_state_component changedComponents"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"xkb_keymap * keymapFromCore(const KeysymModifierMap \u0026 keysymMods)","Funname":"keymapFromCore","Returntype":"xkb_keymap *","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"KeysymModifierMap keysymsToModifiers()","Funname":"keysymsToModifiers","Returntype":"KeysymModifierMap","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * event)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * event"},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"void selectEvents()","Funname":"selectEvents","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateKeymap(xcb_mapping_notify_event_t * event)","Funname":"updateKeymap","Returntype":"void","Args":"xcb_mapping_notify_event_t * event"},{"Uniquefunname":"void updateModifiers(const KeysymModifierMap \u0026 keysymMods)","Funname":"updateModifiers","Returntype":"void","Args":"const KeysymModifierMap \u0026 keysymMods"},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"xkb_mod_mask_t xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"xkb_mod_mask_t","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QMetaType::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QMetaType::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QMetaType::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QMetaType::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE QString dumpConnectionNativeWindows(const QXcbConnection * connection,WId root)","Funname":"dumpConnectionNativeWindows","Returntype":"Q_INVOKABLE QString","Args":"const QXcbConnection * connection,WId root"},{"Uniquefunname":"qint32 generatePeekerId()","Funname":"generatePeekerId","Returntype":"qint32","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"const QByteArray \u0026 nativeEventType()","Funname":"nativeEventType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"bool removePeekerId(qint32 peekerId)","Funname":"removePeekerId","Returntype":"bool","Args":"qint32 peekerId"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GeneratePeekerId","GetTimestamp","PeekEventQueue","RemovePeekerId","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","VkSurface","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t visualid)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QDpi dpi()","Funname":"dpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"int forcedDpi()","Funname":"forcedDpi","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QByteArray getEdid()","Funname":"getEdid","Returntype":"QByteArray","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"QByteArray getOutputProperty(xcb_atom_t atom)","Funname":"getOutputProperty","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalBaseDpi()","Funname":"logicalBaseDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString manufacturer()","Funname":"manufacturer","Returntype":"QString","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString model()","Funname":"model","Returntype":"QString","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"private sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"private","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"QString serialNumber()","Funname":"serialNumber","Returntype":"QString","Args":""},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e \u0026\u0026 sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geometry,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geometry,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t visualid)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t visualid"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"bool xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"bool","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"xcb_visualid_t netSystemTrayVisual()","Funname":"netSystemTrayVisual","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_visualid_t visualId()","Funname":"visualId","Returntype":"xcb_visualid_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbvulkaninstance.h","Functions":[{"Uniquefunname":"public QXcbVulkanInstance(QVulkanInstance * instance)","Funname":"QXcbVulkanInstance","Returntype":"public","Args":"QVulkanInstance * instance"},{"Uniquefunname":"void createOrAdoptInstance()","Funname":"createOrAdoptInstance","Returntype":"void","Args":""},{"Uniquefunname":"VkSurfaceKHR createSurface(QXcbWindow * window)","Funname":"createSurface","Returntype":"VkSurfaceKHR","Args":"QXcbWindow * window"},{"Uniquefunname":"void presentQueued(QWindow * window)","Funname":"presentQueued","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"bool supportsPresent(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window)","Funname":"supportsPresent","Returntype":"bool","Args":"VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,QWindow * window"},{"Uniquefunname":" ~QXcbVulkanInstance()","Funname":"~QXcbVulkanInstance","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbvulkanwindow.h","Functions":[{"Uniquefunname":"public QXcbVulkanWindow(QWindow * window)","Funname":"QXcbVulkanWindow","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"VkSurfaceKHR * surface()","Funname":"surface","Returntype":"VkSurfaceKHR *","Args":""},{"Uniquefunname":" ~QXcbVulkanWindow()","Funname":"~QXcbVulkanWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"void doStartSystemMoveResize(const QPoint \u0026 globalPos,int edges)","Funname":"doStartSystemMoveResize","Returntype":"void","Args":"const QPoint \u0026 globalPos,int edges"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,QEvent::Type type,Qt::MouseEventSource source"},{"Uniquefunname":"bool handleNativeEvent(xcb_generic_event_t * event)","Funname":"handleNativeEvent","Returntype":"bool","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"    static bool isTrayIconWindow(QWindow *window)","Funname":"isTrayIconWindow","Returntype":"bool","Args":"QWindow * window"},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cxcb_rectangle_t\u003e qRegionToXcbRectangleList(const QRegion \u0026 region)","Funname":"qRegionToXcbRectangleList","Returntype":"QVector\u003cxcb_rectangle_t\u003e","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setImageFormatForVisual(const xcb_visualtype_t * visual)","Funname":"setImageFormatForVisual","Returntype":"void","Args":"const xcb_visualtype_t * visual"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWmHints(Qt::WindowFlags flags)","Funname":"setMotifWmHints","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmState(Qt::WindowFlags flags)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmState(Qt::WindowStates state)","Funname":"setNetWmState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setNetWmStateOnUnmappedWindow()","Funname":"setNetWmStateOnUnmappedWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setSwapInterval(int swapInterval)","Funname":"setSwapInterval","Returntype":"void","Args":"int swapInterval"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowStates state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowStates state"},{"Uniquefunname":"void setWindowTitle(const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QXcbConnection * conn,xcb_window_t window,const QString \u0026 title"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemMove()","Funname":"startSystemMove","Returntype":"bool","Args":""},{"Uniquefunname":"bool startSystemMoveResize(const QPoint \u0026 pos,int edges)","Funname":"startSystemMoveResize","Returntype":"bool","Args":"const QPoint \u0026 pos,int edges"},{"Uniquefunname":"bool startSystemResize(Qt::Edges edges)","Funname":"startSystemResize","Returntype":"bool","Args":"Qt::Edges edges"},{"Uniquefunname":"int swapInterval()","Funname":"swapInterval","Returntype":"int","Args":""},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"bool windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QString windowTitle(const QXcbConnection * conn,xcb_window_t window)","Funname":"windowTitle","Returntype":"QString","Args":"const QXcbConnection * conn,xcb_window_t window"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateHidden","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.15.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qglxintegration.h","Functions":[{"Uniquefunname":"public QGLXContext(QXcbScreen * xd,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share)","Funname":"QGLXContext","Returntype":"public","Args":"QXcbScreen * xd,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share"},{"Uniquefunname":"public QGLXPbuffer(QOffscreenSurface * offscreenSurface)","Funname":"QGLXPbuffer","Returntype":"public","Args":"QOffscreenSurface * offscreenSurface"},{"Uniquefunname":"void doneCurrent()","Funname":"doneCurrent","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"void (*)() getProcAddress(const QByteArray \u0026 procName)","Funname":"getProcAddress","Returntype":"void (*)()","Args":"const QByteArray \u0026 procName"},{"Uniquefunname":"GLXContext glxContext()","Funname":"glxContext","Returntype":"GLXContext","Args":""},{"Uniquefunname":"bool isSharing()","Funname":"isSharing","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool makeCurrent(QPlatformSurface * surface)","Funname":"makeCurrent","Returntype":"bool","Args":"QPlatformSurface * surface"},{"Uniquefunname":"GLXPbuffer pbuffer()","Funname":"pbuffer","Returntype":"GLXPbuffer","Args":""},{"Uniquefunname":"void queryDummyContext()","Funname":"queryDummyContext","Returntype":"void","Args":""},{"Uniquefunname":"bool supportsThreading()","Funname":"supportsThreading","Returntype":"bool","Args":""},{"Uniquefunname":"void swapBuffers(QPlatformSurface * surface)","Funname":"swapBuffers","Returntype":"void","Args":"QPlatformSurface * surface"},{"Uniquefunname":" ~QGLXContext()","Funname":"~QGLXContext","Returntype":"","Args":""},{"Uniquefunname":" ~QGLXPbuffer()","Funname":"~QGLXPbuffer","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context"},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"XInput2DeviceData * deviceForId(int id)","Funname":"deviceForId","Returntype":"XInput2DeviceData *","Args":"int id"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"void * egl_display()","Funname":"egl_display","Returntype":"void *","Args":""},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void finalizeXInput2Maemo()","Funname":"finalizeXInput2Maemo","Returntype":"void","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"void handleButtonPress(xcb_generic_event_t * event)","Funname":"handleButtonPress","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"void handleButtonRelease(xcb_generic_event_t * event)","Funname":"handleButtonRelease","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"public handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"public","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"void handleGenericEventMaemo(xcb_ge_event_t * event)","Funname":"handleGenericEventMaemo","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasEgl()","Funname":"hasEgl","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasGLX()","Funname":"hasGLX","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasTouchWithoutMouseEmulation()","Funname":"hasTouchWithoutMouseEmulation","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeGLX()","Funname":"initializeGLX","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2Maemo()","Funname":"initializeXInput2Maemo","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUsingXInput2Maemo()","Funname":"isUsingXInput2Maemo","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"int primaryScreen()","Funname":"primaryScreen","Returntype":"int","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreens()","Funname":"updateScreens","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event,int opCode)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"bool","Args":"xcb_ge_event_t * event,int opCode"},{"Uniquefunname":"void xi2ReportTabletEvent(const TabletData \u0026 tabletData,void * event)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const TabletData \u0026 tabletData,void * event"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","MeegoTouchOrientationAngle","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_DT_SAVE_MODE","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","int"]},{"Name":"struct:TabletData","Fields":["int","bool","bool","QTabletEvent::PointerType","qint64","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QMouseEvent * me)","Funname":"drop","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleEnter(QWindow * window,const xcb_client_message_event_t * event)","Funname":"handleEnter","Returntype":"void","Args":"QWindow * window,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QMouseEvent * me)","Funname":"move","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbeglsurface.h","Functions":[{"Uniquefunname":"    QXcbEGLSurface(EGLDisplay display, EGLSurface surface)","Funname":"QXcbEGLSurface","Returntype":"public","Args":"EGLDisplay display,EGLSurface surface"},{"Uniquefunname":"EGLSurface surface()","Funname":"surface","Returntype":"EGLSurface","Args":""},{"Uniquefunname":"    ~QXcbEGLSurface()","Funname":"~QXcbEGLSurface","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(QWindow * window,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"QWindow * window,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(QXcbWindowEventListener * eventListener,const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"QXcbWindowEventListener * eventListener,const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(QXcbWindowEventListener * eventListener,const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"QXcbWindowEventListener * eventListener,const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QList\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QList\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QList\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QList\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"Q_INVOKABLE void beep()","Funname":"beep","Returntype":"Q_INVOKABLE void","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * eglContextForContext(QOpenGLContext * context)","Funname":"eglContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * eglDisplayForWindow(QWindow * window)","Funname":"eglDisplayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * glxContextForContext(QOpenGLContext * context)","Funname":"glxContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","Connection","Display","EglContext","EglDisplay","GLXContext","GetTimestamp","RootWindow","Screen","ScreenHintStyle","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbScreen(QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number)","Funname":"QXcbScreen","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number"},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setVirtualSiblings(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setVirtualSiblings","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateGeometry(xcb_timestamp_t timestamp)","Funname":"updateGeometry","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"void updateRefreshRate()","Funname":"updateRefreshRate","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,int * value)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,int * value"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void create()","Funname":"create","Returntype":"void","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"void destroy()","Funname":"destroy","Returntype":"void","Args":""},{"Uniquefunname":"QXcbEGLSurface * eglSurface()","Funname":"eglSurface","Returntype":"QXcbEGLSurface *","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleContentOrientationChange(Qt::ScreenOrientation orientation)","Funname":"handleContentOrientationChange","Returntype":"void","Args":"Qt::ScreenOrientation orientation"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded(const QPlatformWindow * parentWindow)","Funname":"isEmbedded","Returntype":"bool","Args":"const QPlatformWindow * parentWindow"},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setNetWmWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"void updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"void","Args":""},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.0/qxlibconvenience.h","Functions":[{"Uniquefunname":"QT_BEGIN_NAMESPACE xcb_keysym_t q_XLookupString(void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars)","Funname":"q_XLookupString","Returntype":"QT_BEGIN_NAMESPACE xcb_keysym_t","Args":"void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qglxintegration.h","Functions":[{"Uniquefunname":"public QGLXContext(QXcbScreen * xd,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share)","Funname":"QGLXContext","Returntype":"public","Args":"QXcbScreen * xd,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share"},{"Uniquefunname":"public QGLXPbuffer(QOffscreenSurface * offscreenSurface)","Funname":"QGLXPbuffer","Returntype":"public","Args":"QOffscreenSurface * offscreenSurface"},{"Uniquefunname":"void doneCurrent()","Funname":"doneCurrent","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"void (*)() getProcAddress(const QByteArray \u0026 procName)","Funname":"getProcAddress","Returntype":"void (*)()","Args":"const QByteArray \u0026 procName"},{"Uniquefunname":"GLXContext glxContext()","Funname":"glxContext","Returntype":"GLXContext","Args":""},{"Uniquefunname":"bool isSharing()","Funname":"isSharing","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool makeCurrent(QPlatformSurface * surface)","Funname":"makeCurrent","Returntype":"bool","Args":"QPlatformSurface * surface"},{"Uniquefunname":"GLXPbuffer pbuffer()","Funname":"pbuffer","Returntype":"GLXPbuffer","Args":""},{"Uniquefunname":"void queryDummyContext()","Funname":"queryDummyContext","Returntype":"void","Args":""},{"Uniquefunname":"bool supportsThreading()","Funname":"supportsThreading","Returntype":"bool","Args":""},{"Uniquefunname":"void swapBuffers(QPlatformSurface * surface)","Funname":"swapBuffers","Returntype":"void","Args":"QPlatformSurface * surface"},{"Uniquefunname":" ~QGLXContext()","Funname":"~QGLXContext","Returntype":"","Args":""},{"Uniquefunname":" ~QGLXPbuffer()","Funname":"~QGLXPbuffer","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context"},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"XInput2DeviceData * deviceForId(int id)","Funname":"deviceForId","Returntype":"XInput2DeviceData *","Args":"int id"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"void * egl_display()","Funname":"egl_display","Returntype":"void *","Args":""},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void finalizeXInput2Maemo()","Funname":"finalizeXInput2Maemo","Returntype":"void","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"void handleButtonPress(xcb_generic_event_t * event)","Funname":"handleButtonPress","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"void handleButtonRelease(xcb_generic_event_t * event)","Funname":"handleButtonRelease","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"public handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"public","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"void handleGenericEventMaemo(xcb_ge_event_t * event)","Funname":"handleGenericEventMaemo","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasEgl()","Funname":"hasEgl","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasGLX()","Funname":"hasGLX","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasTouchWithoutMouseEmulation()","Funname":"hasTouchWithoutMouseEmulation","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeGLX()","Funname":"initializeGLX","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2Maemo()","Funname":"initializeXInput2Maemo","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUsingXInput2Maemo()","Funname":"isUsingXInput2Maemo","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"int primaryScreen()","Funname":"primaryScreen","Returntype":"int","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"public slots syncWindow(QXcbWindow * window)","Funname":"syncWindow","Returntype":"public slots","Args":"QXcbWindow * window"},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreens()","Funname":"updateScreens","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event,int opCode)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"bool","Args":"xcb_ge_event_t * event,int opCode"},{"Uniquefunname":"void xi2ReportTabletEvent(const TabletData \u0026 tabletData,void * event)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const TabletData \u0026 tabletData,void * event"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","MeegoTouchOrientationAngle","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_DT_SAVE_MODE","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","int"]},{"Name":"struct:TabletData","Fields":["int","bool","bool","QTabletEvent::PointerType","qint64","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QMouseEvent * me)","Funname":"drop","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleEnter(QWindow * window,const xcb_client_message_event_t * event)","Funname":"handleEnter","Returntype":"void","Args":"QWindow * window,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QMouseEvent * me)","Funname":"move","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbeglsurface.h","Functions":[{"Uniquefunname":"    QXcbEGLSurface(EGLDisplay display, EGLSurface surface)","Funname":"QXcbEGLSurface","Returntype":"public","Args":"EGLDisplay display,EGLSurface surface"},{"Uniquefunname":"EGLSurface surface()","Funname":"surface","Returntype":"EGLSurface","Args":""},{"Uniquefunname":"    ~QXcbEGLSurface()","Funname":"~QXcbEGLSurface","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(QWindow * window,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"QWindow * window,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(QXcbWindowEventListener * eventListener,const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"QXcbWindowEventListener * eventListener,const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(QXcbWindowEventListener * eventListener,const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"QXcbWindowEventListener * eventListener,const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QList\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QList\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QList\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QList\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"Q_INVOKABLE void beep()","Funname":"beep","Returntype":"Q_INVOKABLE void","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * eglContextForContext(QOpenGLContext * context)","Funname":"eglContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * eglDisplayForWindow(QWindow * window)","Funname":"eglDisplayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * glxContextForContext(QOpenGLContext * context)","Funname":"glxContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","Connection","Display","EglContext","EglDisplay","GLXContext","GetTimestamp","RootWindow","Screen","ScreenHintStyle","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbScreen(QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number)","Funname":"QXcbScreen","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number"},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setVirtualSiblings(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setVirtualSiblings","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateGeometry(xcb_timestamp_t timestamp)","Funname":"updateGeometry","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"void updateRefreshRate()","Funname":"updateRefreshRate","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,int * value)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,int * value"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void create()","Funname":"create","Returntype":"void","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"void destroy()","Funname":"destroy","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QXcbEGLSurface * eglSurface()","Funname":"eglSurface","Returntype":"QXcbEGLSurface *","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleContentOrientationChange(Qt::ScreenOrientation orientation)","Funname":"handleContentOrientationChange","Returntype":"void","Args":"Qt::ScreenOrientation orientation"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded(const QPlatformWindow * parentWindow)","Funname":"isEmbedded","Returntype":"bool","Args":"const QPlatformWindow * parentWindow"},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setNetWmWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.1/qxlibconvenience.h","Functions":[{"Uniquefunname":"QT_BEGIN_NAMESPACE xcb_keysym_t q_XLookupString(void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars)","Funname":"q_XLookupString","Returntype":"QT_BEGIN_NAMESPACE xcb_keysym_t","Args":"void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qglxintegration.h","Functions":[{"Uniquefunname":"public QGLXContext(QXcbScreen * xd,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share)","Funname":"QGLXContext","Returntype":"public","Args":"QXcbScreen * xd,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share"},{"Uniquefunname":"public QGLXPbuffer(QOffscreenSurface * offscreenSurface)","Funname":"QGLXPbuffer","Returntype":"public","Args":"QOffscreenSurface * offscreenSurface"},{"Uniquefunname":"void doneCurrent()","Funname":"doneCurrent","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"void (*)() getProcAddress(const QByteArray \u0026 procName)","Funname":"getProcAddress","Returntype":"void (*)()","Args":"const QByteArray \u0026 procName"},{"Uniquefunname":"GLXContext glxContext()","Funname":"glxContext","Returntype":"GLXContext","Args":""},{"Uniquefunname":"bool isSharing()","Funname":"isSharing","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool makeCurrent(QPlatformSurface * surface)","Funname":"makeCurrent","Returntype":"bool","Args":"QPlatformSurface * surface"},{"Uniquefunname":"GLXPbuffer pbuffer()","Funname":"pbuffer","Returntype":"GLXPbuffer","Args":""},{"Uniquefunname":"void queryDummyContext()","Funname":"queryDummyContext","Returntype":"void","Args":""},{"Uniquefunname":"bool supportsThreading()","Funname":"supportsThreading","Returntype":"bool","Args":""},{"Uniquefunname":"void swapBuffers(QPlatformSurface * surface)","Funname":"swapBuffers","Returntype":"void","Args":"QPlatformSurface * surface"},{"Uniquefunname":" ~QGLXContext()","Funname":"~QGLXContext","Returntype":"","Args":""},{"Uniquefunname":" ~QGLXPbuffer()","Funname":"~QGLXPbuffer","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context"},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"XInput2DeviceData * deviceForId(int id)","Funname":"deviceForId","Returntype":"XInput2DeviceData *","Args":"int id"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"void * egl_display()","Funname":"egl_display","Returntype":"void *","Args":""},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void finalizeXInput2Maemo()","Funname":"finalizeXInput2Maemo","Returntype":"void","Args":""},{"Uniquefunname":"void flush()","Funname":"flush","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"void handleButtonPress(xcb_generic_event_t * event)","Funname":"handleButtonPress","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"void handleButtonRelease(xcb_generic_event_t * event)","Funname":"handleButtonRelease","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"public handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"public","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"void handleGenericEventMaemo(xcb_ge_event_t * event)","Funname":"handleGenericEventMaemo","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasEgl()","Funname":"hasEgl","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasGLX()","Funname":"hasGLX","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasTouchWithoutMouseEmulation()","Funname":"hasTouchWithoutMouseEmulation","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeGLX()","Funname":"initializeGLX","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2Maemo()","Funname":"initializeXInput2Maemo","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUsingXInput2Maemo()","Funname":"isUsingXInput2Maemo","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"int primaryScreen()","Funname":"primaryScreen","Returntype":"int","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"public slots syncWindow(QXcbWindow * window)","Funname":"syncWindow","Returntype":"public slots","Args":"QXcbWindow * window"},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreens()","Funname":"updateScreens","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event,int opCode)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"bool","Args":"xcb_ge_event_t * event,int opCode"},{"Uniquefunname":"void xi2ReportTabletEvent(TabletData \u0026 tabletData,void * event)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"TabletData \u0026 tabletData,void * event"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","MeegoTouchOrientationAngle","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_DT_SAVE_MODE","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["int","bool","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QMouseEvent * me)","Funname":"drop","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleEnter(QWindow * window,const xcb_client_message_event_t * event)","Funname":"handleEnter","Returntype":"void","Args":"QWindow * window,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QMouseEvent * me)","Funname":"move","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbeglsurface.h","Functions":[{"Uniquefunname":"    QXcbEGLSurface(EGLDisplay display, EGLSurface surface)","Funname":"QXcbEGLSurface","Returntype":"public","Args":"EGLDisplay display,EGLSurface surface"},{"Uniquefunname":"EGLSurface surface()","Funname":"surface","Returntype":"EGLSurface","Args":""},{"Uniquefunname":"    ~QXcbEGLSurface()","Funname":"~QXcbEGLSurface","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QList\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QList\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QList\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QList\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"Q_INVOKABLE void beep()","Funname":"beep","Returntype":"Q_INVOKABLE void","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * eglContextForContext(QOpenGLContext * context)","Funname":"eglContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * eglDisplayForWindow(QWindow * window)","Funname":"eglDisplayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * glxContextForContext(QOpenGLContext * context)","Funname":"glxContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","Connection","Display","EglContext","EglDisplay","GLXContext","GetTimestamp","RootWindow","Screen","ScreenHintStyle","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbScreen(QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number)","Funname":"QXcbScreen","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number"},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setVirtualSiblings(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setVirtualSiblings","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateGeometry(xcb_timestamp_t timestamp)","Funname":"updateGeometry","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"void updateRefreshRate()","Funname":"updateRefreshRate","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,int * value)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,int * value"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void create()","Funname":"create","Returntype":"void","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"void destroy()","Funname":"destroy","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QXcbEGLSurface * eglSurface()","Funname":"eglSurface","Returntype":"QXcbEGLSurface *","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleContentOrientationChange(Qt::ScreenOrientation orientation)","Funname":"handleContentOrientationChange","Returntype":"void","Args":"Qt::ScreenOrientation orientation"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded(const QPlatformWindow * parentWindow)","Funname":"isEmbedded","Returntype":"bool","Args":"const QPlatformWindow * parentWindow"},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setNetWmWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.3.2/qxlibconvenience.h","Functions":[{"Uniquefunname":"QT_BEGIN_NAMESPACE xcb_keysym_t q_XLookupString(void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars)","Funname":"q_XLookupString","Returntype":"QT_BEGIN_NAMESPACE xcb_keysym_t","Args":"void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qglxintegration.h","Functions":[{"Uniquefunname":"public QGLXContext(QXcbScreen * screen,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle)","Funname":"QGLXContext","Returntype":"public","Args":"QXcbScreen * screen,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle"},{"Uniquefunname":"public QGLXPbuffer(QOffscreenSurface * offscreenSurface)","Funname":"QGLXPbuffer","Returntype":"public","Args":"QOffscreenSurface * offscreenSurface"},{"Uniquefunname":"void doneCurrent()","Funname":"doneCurrent","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"void (*)() getProcAddress(const QByteArray \u0026 procName)","Funname":"getProcAddress","Returntype":"void (*)()","Args":"const QByteArray \u0026 procName"},{"Uniquefunname":"GLXFBConfig glxConfig()","Funname":"glxConfig","Returntype":"GLXFBConfig","Args":""},{"Uniquefunname":"GLXContext glxContext()","Funname":"glxContext","Returntype":"GLXContext","Args":""},{"Uniquefunname":"private init(QXcbScreen * screen,QPlatformOpenGLContext * share)","Funname":"init","Returntype":"private","Args":"QXcbScreen * screen,QPlatformOpenGLContext * share"},{"Uniquefunname":"void init(QXcbScreen * screen,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle)","Funname":"init","Returntype":"void","Args":"QXcbScreen * screen,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle"},{"Uniquefunname":"bool isSharing()","Funname":"isSharing","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool makeCurrent(QPlatformSurface * surface)","Funname":"makeCurrent","Returntype":"bool","Args":"QPlatformSurface * surface"},{"Uniquefunname":"QVariant nativeHandle()","Funname":"nativeHandle","Returntype":"QVariant","Args":""},{"Uniquefunname":"GLXPbuffer pbuffer()","Funname":"pbuffer","Returntype":"GLXPbuffer","Args":""},{"Uniquefunname":"void queryDummyContext()","Funname":"queryDummyContext","Returntype":"void","Args":""},{"Uniquefunname":"bool supportsThreading()","Funname":"supportsThreading","Returntype":"bool","Args":""},{"Uniquefunname":"void swapBuffers(QPlatformSurface * surface)","Funname":"swapBuffers","Returntype":"void","Args":"QPlatformSurface * surface"},{"Uniquefunname":" ~QGLXContext()","Funname":"~QGLXContext","Returntype":"","Args":""},{"Uniquefunname":" ~QGLXPbuffer()","Funname":"~QGLXPbuffer","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"void * egl_display()","Funname":"egl_display","Returntype":"void *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"void handleButtonPress(xcb_generic_event_t * event)","Funname":"handleButtonPress","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"void handleButtonRelease(xcb_generic_event_t * event)","Funname":"handleButtonRelease","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasEgl()","Funname":"hasEgl","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasGLX()","Funname":"hasGLX","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasTouchWithoutMouseEmulation()","Funname":"hasTouchWithoutMouseEmulation","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeGLX()","Funname":"initializeGLX","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreens()","Funname":"updateScreens","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event,int opCode)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"bool","Args":"xcb_ge_event_t * event,int opCode"},{"Uniquefunname":"void xi2ReportTabletEvent(TabletData \u0026 tabletData,void * event)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"TabletData \u0026 tabletData,void * event"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_DT_SAVE_MODE","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QMouseEvent * me)","Funname":"drop","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleEnter(QWindow * window,const xcb_client_message_event_t * event)","Funname":"handleEnter","Returntype":"void","Args":"QWindow * window,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QMouseEvent * me)","Funname":"move","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbeglsurface.h","Functions":[{"Uniquefunname":"    QXcbEGLSurface(EGLDisplay display, EGLSurface surface)","Funname":"QXcbEGLSurface","Returntype":"public","Args":"EGLDisplay display,EGLSurface surface"},{"Uniquefunname":"EGLSurface surface()","Funname":"surface","Returntype":"EGLSurface","Args":""},{"Uniquefunname":"    ~QXcbEGLSurface()","Funname":"~QXcbEGLSurface","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"Q_INVOKABLE void beep()","Funname":"beep","Returntype":"Q_INVOKABLE void","Args":""},{"Uniquefunname":"Q_INVOKABLE void clearRegion(const QWindow * qwindow,const QRect \u0026 rect)","Funname":"clearRegion","Returntype":"Q_INVOKABLE void","Args":"const QWindow * qwindow,const QRect \u0026 rect"},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * eglConfigForContext(QOpenGLContext * context)","Funname":"eglConfigForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * eglContextForContext(QOpenGLContext * context)","Funname":"eglContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * eglDisplayForWindow(QWindow * window)","Funname":"eglDisplayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * glxConfigForContext(QOpenGLContext * context)","Funname":"glxConfigForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * glxContextForContext(QOpenGLContext * context)","Funname":"glxContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","Connection","Display","EglConfig","EglContext","EglDisplay","GLXConfig","GLXContext","GetTimestamp","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbScreen(QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number)","Funname":"QXcbScreen","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setVirtualSiblings(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setVirtualSiblings","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateGeometry(xcb_timestamp_t timestamp)","Funname":"updateGeometry","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"void updateRefreshRate()","Funname":"updateRefreshRate","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void create()","Funname":"create","Returntype":"void","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"void destroy()","Funname":"destroy","Returntype":"void","Args":""},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QXcbEGLSurface * eglSurface()","Funname":"eglSurface","Returntype":"QXcbEGLSurface *","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded(const QPlatformWindow * parentWindow)","Funname":"isEmbedded","Returntype":"bool","Args":"const QPlatformWindow * parentWindow"},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setNetWmWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.0/qxlibconvenience.h","Functions":[{"Uniquefunname":"QT_BEGIN_NAMESPACE xcb_keysym_t q_XLookupString(void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars)","Funname":"q_XLookupString","Returntype":"QT_BEGIN_NAMESPACE xcb_keysym_t","Args":"void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qglxintegration.h","Functions":[{"Uniquefunname":"public QGLXContext(QXcbScreen * screen,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle)","Funname":"QGLXContext","Returntype":"public","Args":"QXcbScreen * screen,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle"},{"Uniquefunname":"public QGLXPbuffer(QOffscreenSurface * offscreenSurface)","Funname":"QGLXPbuffer","Returntype":"public","Args":"QOffscreenSurface * offscreenSurface"},{"Uniquefunname":"void doneCurrent()","Funname":"doneCurrent","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"void (*)() getProcAddress(const QByteArray \u0026 procName)","Funname":"getProcAddress","Returntype":"void (*)()","Args":"const QByteArray \u0026 procName"},{"Uniquefunname":"GLXFBConfig glxConfig()","Funname":"glxConfig","Returntype":"GLXFBConfig","Args":""},{"Uniquefunname":"GLXContext glxContext()","Funname":"glxContext","Returntype":"GLXContext","Args":""},{"Uniquefunname":"private init(QXcbScreen * screen,QPlatformOpenGLContext * share)","Funname":"init","Returntype":"private","Args":"QXcbScreen * screen,QPlatformOpenGLContext * share"},{"Uniquefunname":"void init(QXcbScreen * screen,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle)","Funname":"init","Returntype":"void","Args":"QXcbScreen * screen,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle"},{"Uniquefunname":"bool isSharing()","Funname":"isSharing","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool makeCurrent(QPlatformSurface * surface)","Funname":"makeCurrent","Returntype":"bool","Args":"QPlatformSurface * surface"},{"Uniquefunname":"QVariant nativeHandle()","Funname":"nativeHandle","Returntype":"QVariant","Args":""},{"Uniquefunname":"GLXPbuffer pbuffer()","Funname":"pbuffer","Returntype":"GLXPbuffer","Args":""},{"Uniquefunname":"void queryDummyContext()","Funname":"queryDummyContext","Returntype":"void","Args":""},{"Uniquefunname":"bool supportsThreading()","Funname":"supportsThreading","Returntype":"bool","Args":""},{"Uniquefunname":"void swapBuffers(QPlatformSurface * surface)","Funname":"swapBuffers","Returntype":"void","Args":"QPlatformSurface * surface"},{"Uniquefunname":" ~QGLXContext()","Funname":"~QGLXContext","Returntype":"","Args":""},{"Uniquefunname":" ~QGLXPbuffer()","Funname":"~QGLXPbuffer","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"void * egl_display()","Funname":"egl_display","Returntype":"void *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"void handleButtonPress(xcb_generic_event_t * event)","Funname":"handleButtonPress","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"void handleButtonRelease(xcb_generic_event_t * event)","Funname":"handleButtonRelease","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasEgl()","Funname":"hasEgl","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasGLX()","Funname":"hasGLX","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasTouchWithoutMouseEmulation()","Funname":"hasTouchWithoutMouseEmulation","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeGLX()","Funname":"initializeGLX","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreens()","Funname":"updateScreens","Returntype":"void","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event,int opCode)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"bool","Args":"xcb_ge_event_t * event,int opCode"},{"Uniquefunname":"void xi2ReportTabletEvent(TabletData \u0026 tabletData,void * event)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"TabletData \u0026 tabletData,void * event"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_DT_SAVE_MODE","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QMouseEvent * me)","Funname":"drop","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleEnter(QWindow * window,const xcb_client_message_event_t * event)","Funname":"handleEnter","Returntype":"void","Args":"QWindow * window,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QMouseEvent * me)","Funname":"move","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbeglsurface.h","Functions":[{"Uniquefunname":"    QXcbEGLSurface(EGLDisplay display, EGLSurface surface)","Funname":"QXcbEGLSurface","Returntype":"public","Args":"EGLDisplay display,EGLSurface surface"},{"Uniquefunname":"EGLSurface surface()","Funname":"surface","Returntype":"EGLSurface","Args":""},{"Uniquefunname":"    ~QXcbEGLSurface()","Funname":"~QXcbEGLSurface","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"Q_INVOKABLE void beep()","Funname":"beep","Returntype":"Q_INVOKABLE void","Args":""},{"Uniquefunname":"Q_INVOKABLE void clearRegion(const QWindow * qwindow,const QRect \u0026 rect)","Funname":"clearRegion","Returntype":"Q_INVOKABLE void","Args":"const QWindow * qwindow,const QRect \u0026 rect"},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * eglConfigForContext(QOpenGLContext * context)","Funname":"eglConfigForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * eglContextForContext(QOpenGLContext * context)","Funname":"eglContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * eglDisplayForWindow(QWindow * window)","Funname":"eglDisplayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * glxConfigForContext(QOpenGLContext * context)","Funname":"glxConfigForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * glxContextForContext(QOpenGLContext * context)","Funname":"glxContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","Connection","Display","EglConfig","EglContext","EglDisplay","GLXConfig","GLXContext","GetTimestamp","NoFontHinting","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbScreen(QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number)","Funname":"QXcbScreen","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"QRect nativeGeometry()","Funname":"nativeGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool noFontHinting()","Funname":"noFontHinting","Returntype":"bool","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setVirtualSiblings(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setVirtualSiblings","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateGeometry(xcb_timestamp_t timestamp)","Funname":"updateGeometry","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"void updateRefreshRate()","Funname":"updateRefreshRate","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void create()","Funname":"create","Returntype":"void","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"void destroy()","Funname":"destroy","Returntype":"void","Args":""},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QXcbEGLSurface * eglSurface()","Funname":"eglSurface","Returntype":"QXcbEGLSurface *","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded(const QPlatformWindow * parentWindow)","Funname":"isEmbedded","Returntype":"bool","Args":"const QPlatformWindow * parentWindow"},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformScreen * screenForNativeGeometry(const QRect \u0026 newGeometry)","Funname":"screenForNativeGeometry","Returntype":"QPlatformScreen *","Args":"const QRect \u0026 newGeometry"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setNetWmWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.1/qxlibconvenience.h","Functions":[{"Uniquefunname":"QT_BEGIN_NAMESPACE xcb_keysym_t q_XLookupString(void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars)","Funname":"q_XLookupString","Returntype":"QT_BEGIN_NAMESPACE xcb_keysym_t","Args":"void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qglxintegration.h","Functions":[{"Uniquefunname":"public QGLXContext(QXcbScreen * screen,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle)","Funname":"QGLXContext","Returntype":"public","Args":"QXcbScreen * screen,const QSurfaceFormat \u0026 format,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle"},{"Uniquefunname":"public QGLXPbuffer(QOffscreenSurface * offscreenSurface)","Funname":"QGLXPbuffer","Returntype":"public","Args":"QOffscreenSurface * offscreenSurface"},{"Uniquefunname":"void doneCurrent()","Funname":"doneCurrent","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"void (*)() getProcAddress(const QByteArray \u0026 procName)","Funname":"getProcAddress","Returntype":"void (*)()","Args":"const QByteArray \u0026 procName"},{"Uniquefunname":"GLXFBConfig glxConfig()","Funname":"glxConfig","Returntype":"GLXFBConfig","Args":""},{"Uniquefunname":"GLXContext glxContext()","Funname":"glxContext","Returntype":"GLXContext","Args":""},{"Uniquefunname":"private init(QXcbScreen * screen,QPlatformOpenGLContext * share)","Funname":"init","Returntype":"private","Args":"QXcbScreen * screen,QPlatformOpenGLContext * share"},{"Uniquefunname":"void init(QXcbScreen * screen,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle)","Funname":"init","Returntype":"void","Args":"QXcbScreen * screen,QPlatformOpenGLContext * share,const QVariant \u0026 nativeHandle"},{"Uniquefunname":"bool isSharing()","Funname":"isSharing","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool makeCurrent(QPlatformSurface * surface)","Funname":"makeCurrent","Returntype":"bool","Args":"QPlatformSurface * surface"},{"Uniquefunname":"QVariant nativeHandle()","Funname":"nativeHandle","Returntype":"QVariant","Args":""},{"Uniquefunname":"GLXPbuffer pbuffer()","Funname":"pbuffer","Returntype":"GLXPbuffer","Args":""},{"Uniquefunname":"void queryDummyContext()","Funname":"queryDummyContext","Returntype":"void","Args":""},{"Uniquefunname":"bool supportsThreading()","Funname":"supportsThreading","Returntype":"bool","Args":""},{"Uniquefunname":"void swapBuffers(QPlatformSurface * surface)","Funname":"swapBuffers","Returntype":"void","Args":"QPlatformSurface * surface"},{"Uniquefunname":" ~QGLXContext()","Funname":"~QGLXContext","Returntype":"","Args":""},{"Uniquefunname":" ~QGLXPbuffer()","Funname":"~QGLXPbuffer","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"void * egl_display()","Funname":"egl_display","Returntype":"void *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"void handleButtonPress(xcb_generic_event_t * event)","Funname":"handleButtonPress","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"void handleButtonRelease(xcb_generic_event_t * event)","Funname":"handleButtonRelease","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"void handleMotionNotify(xcb_generic_event_t * event)","Funname":"handleMotionNotify","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasEgl()","Funname":"hasEgl","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasGLX()","Funname":"hasGLX","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasTouchWithoutMouseEmulation()","Funname":"hasTouchWithoutMouseEmulation","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeGLX()","Funname":"initializeGLX","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isUsingXInput21()","Funname":"isUsingXInput21","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreens()","Funname":"updateScreens","Returntype":"void","Args":""},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event,int opCode)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"bool","Args":"xcb_ge_event_t * event,int opCode"},{"Uniquefunname":"void xi2ReportTabletEvent(TabletData \u0026 tabletData,void * event)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"TabletData \u0026 tabletData,void * event"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_DT_SAVE_MODE","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbScreen * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QMouseEvent * me)","Funname":"drop","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleEnter(QWindow * window,const xcb_client_message_event_t * event)","Funname":"handleEnter","Returntype":"void","Args":"QWindow * window,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QMouseEvent * me)","Funname":"move","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbeglsurface.h","Functions":[{"Uniquefunname":"    QXcbEGLSurface(EGLDisplay display, EGLSurface surface)","Funname":"QXcbEGLSurface","Returntype":"public","Args":"EGLDisplay display,EGLSurface surface"},{"Uniquefunname":"EGLSurface surface()","Funname":"surface","Returntype":"EGLSurface","Args":""},{"Uniquefunname":"    ~QXcbEGLSurface()","Funname":"~QXcbEGLSurface","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,QString text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"Q_INVOKABLE void beep()","Funname":"beep","Returntype":"Q_INVOKABLE void","Args":""},{"Uniquefunname":"Q_INVOKABLE void clearRegion(const QWindow * qwindow,const QRect \u0026 rect)","Funname":"clearRegion","Returntype":"Q_INVOKABLE void","Args":"const QWindow * qwindow,const QRect \u0026 rect"},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * eglConfigForContext(QOpenGLContext * context)","Funname":"eglConfigForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * eglContextForContext(QOpenGLContext * context)","Funname":"eglContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * eglDisplayForWindow(QWindow * window)","Funname":"eglDisplayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * glxConfigForContext(QOpenGLContext * context)","Funname":"glxConfigForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"void * glxContextForContext(QOpenGLContext * context)","Funname":"glxContextForContext","Returntype":"void *","Args":"QOpenGLContext * context"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","Connection","Display","EglConfig","EglContext","EglDisplay","GLXConfig","GLXContext","GetTimestamp","NoFontHinting","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbScreen(QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number)","Funname":"QXcbScreen","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,xcb_randr_get_output_info_reply_t * output,QString outputName,int number"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"QRect nativeGeometry()","Funname":"nativeGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool noFontHinting()","Funname":"noFontHinting","Returntype":"bool","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setVirtualSiblings(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setVirtualSiblings","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateGeometry(xcb_timestamp_t timestamp)","Funname":"updateGeometry","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"void updateRefreshRate()","Funname":"updateRefreshRate","Returntype":"void","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void create()","Funname":"create","Returntype":"void","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"void destroy()","Funname":"destroy","Returntype":"void","Args":""},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QXcbEGLSurface * eglSurface()","Funname":"eglSurface","Returntype":"QXcbEGLSurface *","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded(const QPlatformWindow * parentWindow)","Funname":"isEmbedded","Returntype":"bool","Args":"const QPlatformWindow * parentWindow"},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformScreen * screenForNativeGeometry(const QRect \u0026 newGeometry)","Funname":"screenForNativeGeometry","Returntype":"QPlatformScreen *","Args":"const QRect \u0026 newGeometry"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setNetWmWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.4.2/qxlibconvenience.h","Functions":[{"Uniquefunname":"QT_BEGIN_NAMESPACE xcb_keysym_t q_XLookupString(void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars)","Funname":"q_XLookupString","Returntype":"QT_BEGIN_NAMESPACE xcb_keysym_t","Args":"void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIMouseEvent(xcb_ge_event_t *)","Funname":"handleXIMouseEvent","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(void * event,TabletData * tabletData,QXcbWindowEventListener * eventListener)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"void * event,TabletData * tabletData,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event,int opCode)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"bool","Args":"xcb_ge_event_t * event,int opCode"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(TabletData \u0026 tabletData,void * event)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"TabletData \u0026 tabletData,void * event"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_DT_SAVE_MODE","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QMouseEvent * me)","Funname":"drop","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleEnter(QWindow * window,const xcb_client_message_event_t * event)","Funname":"handleEnter","Returntype":"void","Args":"QWindow * window,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QMouseEvent * me)","Funname":"move","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"Q_INVOKABLE void beep()","Funname":"beep","Returntype":"Q_INVOKABLE void","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(const QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"const QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","Connection","Display","GetTimestamp","NoFontHinting","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbScreen(QXcbConnection * connection,QXcbVirtualDesktop * virtualDesktop,xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * output,QString outputName)","Funname":"QXcbScreen","Returntype":"public","Args":"QXcbConnection * connection,QXcbVirtualDesktop * virtualDesktop,xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * output,QString outputName"},{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addVirtualSibling(QPlatformScreen * s)","Funname":"addVirtualSibling","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QPoint mapFromNative(const QPoint \u0026 pos)","Funname":"mapFromNative","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QRect mapFromNative(const QRect \u0026 rect)","Funname":"mapFromNative","Returntype":"QRect","Args":"const QRect \u0026 rect"},{"Uniquefunname":"QPoint mapToNative(const QPoint \u0026 pos)","Funname":"mapToNative","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QRect mapToNative(const QRect \u0026 rect)","Funname":"mapToNative","Returntype":"QRect","Args":"const QRect \u0026 rect"},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"QRect nativeGeometry()","Funname":"nativeGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool noFontHinting()","Funname":"noFontHinting","Returntype":"bool","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeVirtualSibling(QPlatformScreen * s)","Funname":"removeVirtualSibling","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setVirtualSiblings(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setVirtualSiblings","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual void * createVisual()","Funname":"createVisual","Returntype":"virtual void *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonPressEvent(int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(int event_x,int event_y,int root_x,int root_y,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIMouseEvent(xcb_ge_event_t *)","Funname":"handleXIMouseEvent","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded(const QPlatformWindow * parentWindow)","Funname":"isEmbedded","Returntype":"bool","Args":"const QPlatformWindow * parentWindow"},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapFromNative(const QPoint \u0026 pos,const QXcbScreen * screen)","Funname":"mapFromNative","Returntype":"QPoint","Args":"const QPoint \u0026 pos,const QXcbScreen * screen"},{"Uniquefunname":"QRect mapFromNative(const QRect \u0026 rect,const QXcbScreen * screen)","Funname":"mapFromNative","Returntype":"QRect","Args":"const QRect \u0026 rect,const QXcbScreen * screen"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToNative(const QPoint \u0026 pos,const QXcbScreen * screen)","Funname":"mapToNative","Returntype":"QPoint","Args":"const QPoint \u0026 pos,const QXcbScreen * screen"},{"Uniquefunname":"QRect mapToNative(const QRect \u0026 rect,const QXcbScreen * screen)","Funname":"mapToNative","Returntype":"QRect","Args":"const QRect \u0026 rect,const QXcbScreen * screen"},{"Uniquefunname":"void maybeSetScreen(QXcbScreen * screen)","Funname":"maybeSetScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"protected resolveFormat()","Funname":"resolveFormat","Returntype":"protected","Args":""},{"Uniquefunname":"QXcbScreen * screenForNativeGeometry(const QRect \u0026 newGeometry)","Funname":"screenForNativeGeometry","Returntype":"QXcbScreen *","Args":"const QRect \u0026 newGeometry"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setNetWmWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"virtual bool supportsSyncProtocol()","Funname":"supportsSyncProtocol","Returntype":"virtual bool","Args":""},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.0/qxlibconvenience.h","Functions":[{"Uniquefunname":"QT_BEGIN_NAMESPACE xcb_keysym_t q_XLookupString(void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars)","Funname":"q_XLookupString","Returntype":"QT_BEGIN_NAMESPACE xcb_keysym_t","Args":"void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIMouseEvent(xcb_ge_event_t *)","Funname":"handleXIMouseEvent","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(void * event,TabletData * tabletData,QXcbWindowEventListener * eventListener)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"void * event,TabletData * tabletData,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"bool xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event,int opCode)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"bool","Args":"xcb_ge_event_t * event,int opCode"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(TabletData \u0026 tabletData,void * event)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"TabletData \u0026 tabletData,void * event"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_DT_SAVE_MODE","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QMouseEvent * me)","Funname":"drop","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleEnter(QWindow * window,const xcb_client_message_event_t * event)","Funname":"handleEnter","Returntype":"void","Args":"QWindow * window,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QMouseEvent * me)","Funname":"move","Returntype":"void","Args":"const QMouseEvent * me"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"Q_INVOKABLE void beep()","Funname":"beep","Returntype":"Q_INVOKABLE void","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(const QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"const QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","Connection","Display","GetTimestamp","NoFontHinting","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbScreen(QXcbConnection * connection,QXcbVirtualDesktop * virtualDesktop,xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * output,QString outputName)","Funname":"QXcbScreen","Returntype":"public","Args":"QXcbConnection * connection,QXcbVirtualDesktop * virtualDesktop,xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * output,QString outputName"},{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addVirtualSibling(QPlatformScreen * s)","Funname":"addVirtualSibling","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QPoint mapFromNative(const QPoint \u0026 pos)","Funname":"mapFromNative","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPointF mapFromNative(const QPointF \u0026 pos)","Funname":"mapFromNative","Returntype":"QPointF","Args":"const QPointF \u0026 pos"},{"Uniquefunname":"QRect mapFromNative(const QRect \u0026 rect)","Funname":"mapFromNative","Returntype":"QRect","Args":"const QRect \u0026 rect"},{"Uniquefunname":"QPoint mapToNative(const QPoint \u0026 pos)","Funname":"mapToNative","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPointF mapToNative(const QPointF \u0026 pos)","Funname":"mapToNative","Returntype":"QPointF","Args":"const QPointF \u0026 pos"},{"Uniquefunname":"QRect mapToNative(const QRect \u0026 rect)","Funname":"mapToNative","Returntype":"QRect","Args":"const QRect \u0026 rect"},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"QRect nativeGeometry()","Funname":"nativeGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool noFontHinting()","Funname":"noFontHinting","Returntype":"bool","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeVirtualSibling(QPlatformScreen * s)","Funname":"removeVirtualSibling","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setVirtualSiblings(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setVirtualSiblings","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual void * createVisual()","Funname":"createVisual","Returntype":"virtual void *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"qreal devicePixelRatio()","Funname":"devicePixelRatio","Returntype":"qreal","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonPressEvent(int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(int event_x,int event_y,int root_x,int root_y,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIMouseEvent(xcb_ge_event_t *)","Funname":"handleXIMouseEvent","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded(const QPlatformWindow * parentWindow)","Funname":"isEmbedded","Returntype":"bool","Args":"const QPlatformWindow * parentWindow"},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapFromNative(const QPoint \u0026 pos,const QXcbScreen * screen)","Funname":"mapFromNative","Returntype":"QPoint","Args":"const QPoint \u0026 pos,const QXcbScreen * screen"},{"Uniquefunname":"QRect mapFromNative(const QRect \u0026 rect,const QXcbScreen * screen)","Funname":"mapFromNative","Returntype":"QRect","Args":"const QRect \u0026 rect,const QXcbScreen * screen"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToNative(const QPoint \u0026 pos,const QXcbScreen * screen)","Funname":"mapToNative","Returntype":"QPoint","Args":"const QPoint \u0026 pos,const QXcbScreen * screen"},{"Uniquefunname":"QRect mapToNative(const QRect \u0026 rect,const QXcbScreen * screen)","Funname":"mapToNative","Returntype":"QRect","Args":"const QRect \u0026 rect,const QXcbScreen * screen"},{"Uniquefunname":"void maybeSetScreen(QXcbScreen * screen)","Funname":"maybeSetScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"protected resolveFormat()","Funname":"resolveFormat","Returntype":"protected","Args":""},{"Uniquefunname":"QXcbScreen * screenForNativeGeometry(const QRect \u0026 newGeometry)","Funname":"screenForNativeGeometry","Returntype":"QXcbScreen *","Args":"const QRect \u0026 newGeometry"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"virtual bool supportsSyncProtocol()","Funname":"supportsSyncProtocol","Returntype":"virtual bool","Args":""},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.5.1/qxlibconvenience.h","Functions":[{"Uniquefunname":"QT_BEGIN_NAMESPACE xcb_keysym_t q_XLookupString(void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars)","Funname":"q_XLookupString","Returntype":"QT_BEGIN_NAMESPACE xcb_keysym_t","Args":"void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIMouseEvent(xcb_ge_event_t *)","Funname":"handleXIMouseEvent","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(void * event,TabletData * tabletData,QXcbWindowEventListener * eventListener)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"void * event,TabletData * tabletData,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(TabletData \u0026 tabletData,void * event)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"TabletData \u0026 tabletData,void * event"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE void beep()","Funname":"beep","Returntype":"Q_INVOKABLE void","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","Connection","Display","GetTimestamp","NoFontHinting","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"bool noFontHinting()","Funname":"noFontHinting","Returntype":"bool","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual void * createVisual()","Funname":"createVisual","Returntype":"virtual void *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonPressEvent(int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,int detail,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(int event_x,int event_y,int root_x,int root_y,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,Qt::KeyboardModifiers modifiers,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIMouseEvent(xcb_ge_event_t *)","Funname":"handleXIMouseEvent","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat()","Funname":"resolveFormat","Returntype":"protected","Args":""},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent()","Funname":"handleEnterEvent","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(void * event,TabletData * tabletData,QXcbWindowEventListener * eventListener)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"void * event,TabletData * tabletData,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(TabletData \u0026 tabletData,void * event)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"TabletData \u0026 tabletData,void * event"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE void beep()","Funname":"beep","Returntype":"Q_INVOKABLE void","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","Connection","Display","GetTimestamp","NoFontHinting","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"bool noFontHinting()","Funname":"noFontHinting","Returntype":"bool","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual void * createVisual()","Funname":"createVisual","Returntype":"virtual void *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat()","Funname":"resolveFormat","Returntype":"protected","Args":""},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.1/qxlibconvenience.h","Functions":[{"Uniquefunname":"QT_BEGIN_NAMESPACE xcb_keysym_t q_XLookupString(void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars)","Funname":"q_XLookupString","Returntype":"QT_BEGIN_NAMESPACE xcb_keysym_t","Args":"void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent()","Funname":"handleEnterEvent","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(void * event,TabletData * tabletData,QXcbWindowEventListener * eventListener)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"void * event,TabletData * tabletData,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(TabletData \u0026 tabletData,void * event)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"TabletData \u0026 tabletData,void * event"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE void beep()","Funname":"beep","Returntype":"Q_INVOKABLE void","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","Connection","Display","GetTimestamp","NoFontHinting","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"bool noFontHinting()","Funname":"noFontHinting","Returntype":"bool","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual void * createVisual()","Funname":"createVisual","Returntype":"virtual void *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat()","Funname":"resolveFormat","Returntype":"protected","Args":""},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.6.2/qxlibconvenience.h","Functions":[{"Uniquefunname":"QT_BEGIN_NAMESPACE xcb_keysym_t q_XLookupString(void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars)","Funname":"q_XLookupString","Returntype":"QT_BEGIN_NAMESPACE xcb_keysym_t","Args":"void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent()","Funname":"handleEnterEvent","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e friend reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e friend reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GetTimestamp","NoFontHinting","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"bool noFontHinting()","Funname":"noFontHinting","Returntype":"bool","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.0/qxlibconvenience.h","Functions":[{"Uniquefunname":"QT_BEGIN_NAMESPACE xcb_keysym_t q_XLookupString(void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars)","Funname":"q_XLookupString","Returntype":"QT_BEGIN_NAMESPACE xcb_keysym_t","Args":"void * display,xcb_window_t window,xcb_window_t root,uint state,xcb_keycode_t code,int type,QByteArray * chars"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t * checkEvent(int type)","Funname":"checkEvent","Returntype":"xcb_generic_event_t *","Args":"int type"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent()","Funname":"handleEnterEvent","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e friend reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e friend reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"private updateXKBStateFromState(struct xkb_state * kb_state,quint16 state)","Funname":"updateXKBStateFromState","Returntype":"private","Args":"struct xkb_state * kb_state,quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GetTimestamp","NoFontHinting","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"bool noFontHinting()","Funname":"noFontHinting","Returntype":"bool","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor,bool isBitmapCursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor,bool isBitmapCursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.7.1/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":" ScrollingDevice()","Funname":"ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" ScrollingDevice::ScrollingDevice()","Funname":"ScrollingDevice::ScrollingDevice","Returntype":"","Args":""},{"Uniquefunname":" TabletData()","Funname":"TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::TabletData()","Funname":"TabletData::TabletData","Returntype":"","Args":""},{"Uniquefunname":" TabletData::ValuatorClassInfo::ValuatorClassInfo()","Funname":"TabletData::ValuatorClassInfo::ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":" ValuatorClassInfo()","Funname":"ValuatorClassInfo","Returntype":"","Args":""},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent()","Funname":"handleEnterEvent","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e friend reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e friend reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QXcbWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"virtual QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"virtual QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"private updateXKBStateFromState(struct xkb_state * kb_state,quint16 state)","Funname":"updateXKBStateFromState","Returntype":"private","Args":"struct xkb_state * kb_state,quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GetTimestamp","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXIMouseButtonState(const xcb_ge_event_t *)","Funname":"handleXIMouseButtonState","Returntype":"void","Args":"const xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor,bool isBitmapCursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor,bool isBitmapCursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.8.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent()","Funname":"handleEnterEvent","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e friend reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e friend reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner)","Funname":"startSystemResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemResizeInfo","Fields":["Qt::Corner","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"union:q_padded_xcb_event","Fields":["T","char[32]"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"private updateXKBStateFromState(struct xkb_state * kb_state,quint16 state)","Funname":"updateXKBStateFromState","Returntype":"private","Args":"struct xkb_state * kb_state,quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GetTimestamp","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbwindow.h","Functions":[{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"bool doStartSystemResize(const QPoint \u0026 globalPos,Qt::Corner corner)","Funname":"doStartSystemResize","Returntype":"bool","Args":"const QPoint \u0026 globalPos,Qt::Corner corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor,bool isBitmapCursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor,bool isBitmapCursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.0/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * widget)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * widget"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent()","Funname":"handleEnterEvent","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e friend reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e friend reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner)","Funname":"startSystemResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemResizeInfo","Fields":["Qt::Corner","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"union:q_padded_xcb_event","Fields":["T","char[32]"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"private updateXKBStateFromState(struct xkb_state * kb_state,quint16 state)","Funname":"updateXKBStateFromState","Returntype":"private","Args":"struct xkb_state * kb_state,quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GetTimestamp","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"bool doStartSystemResize(const QPoint \u0026 globalPos,Qt::Corner corner)","Funname":"doStartSystemResize","Returntype":"bool","Args":"const QPoint \u0026 globalPos,Qt::Corner corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor,bool isBitmapCursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor,bool isBitmapCursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.1/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent()","Funname":"handleEnterEvent","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isConnected()","Funname":"isConnected","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e friend reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e friend reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner)","Funname":"startSystemResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemResizeInfo","Fields":["Qt::Corner","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"union:q_padded_xcb_event","Fields":["T","char[32]"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"private updateXKBStateFromState(struct xkb_state * kb_state,quint16 state)","Funname":"updateXKBStateFromState","Returntype":"private","Args":"struct xkb_state * kb_state,quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GetTimestamp","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"bool doStartSystemResize(const QPoint \u0026 globalPos,Qt::Corner corner)","Funname":"doStartSystemResize","Returntype":"bool","Args":"const QPoint \u0026 globalPos,Qt::Corner corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor,bool isBitmapCursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor,bool isBitmapCursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.2/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent()","Funname":"handleEnterEvent","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isConnected()","Funname":"isConnected","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e friend reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e friend reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner)","Funname":"startSystemResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemResizeInfo","Fields":["Qt::Corner","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"union:q_padded_xcb_event","Fields":["T","char[32]"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"private updateXKBStateFromState(struct xkb_state * kb_state,quint16 state)","Funname":"updateXKBStateFromState","Returntype":"private","Args":"struct xkb_state * kb_state,quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GetTimestamp","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"bool doStartSystemResize(const QPoint \u0026 globalPos,Qt::Corner corner)","Funname":"doStartSystemResize","Returntype":"bool","Args":"const QPoint \u0026 globalPos,Qt::Corner corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor,bool isBitmapCursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor,bool isBitmapCursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.3/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbbackingstore.h","Functions":[{"Uniquefunname":"public QXcbBackingStore(QWindow * window)","Funname":"QXcbBackingStore","Returntype":"public","Args":"QWindow * window"},{"Uniquefunname":"void beginPaint(const QRegion \u0026)","Funname":"beginPaint","Returntype":"void","Args":"const QRegion \u0026"},{"Uniquefunname":"void composeAndFlush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground)","Funname":"composeAndFlush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset,QPlatformTextureList * textures,QOpenGLContext * context,bool translucentBackground"},{"Uniquefunname":"void endPaint()","Funname":"endPaint","Returntype":"void","Args":""},{"Uniquefunname":"void flush(QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset)","Funname":"flush","Returntype":"void","Args":"QWindow * window,const QRegion \u0026 region,const QPoint \u0026 offset"},{"Uniquefunname":"QPlatformGraphicsBuffer * graphicsBuffer()","Funname":"graphicsBuffer","Returntype":"QPlatformGraphicsBuffer *","Args":""},{"Uniquefunname":"QPaintDevice * paintDevice()","Funname":"paintDevice","Returntype":"QPaintDevice *","Args":""},{"Uniquefunname":"void resize(const QSize \u0026 size,const QRegion \u0026 staticContents)","Funname":"resize","Returntype":"void","Args":"const QSize \u0026 size,const QRegion \u0026 staticContents"},{"Uniquefunname":"bool scroll(const QRegion \u0026 area,int dx,int dy)","Funname":"scroll","Returntype":"bool","Args":"const QRegion \u0026 area,int dx,int dy"},{"Uniquefunname":"QImage toImage()","Funname":"toImage","Returntype":"QImage","Args":""},{"Uniquefunname":" ~QXcbBackingStore()","Funname":"~QXcbBackingStore","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbclipboard.h","Functions":[{"Uniquefunname":"public QXcbClipboard(QXcbConnection * connection)","Funname":"QXcbClipboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_atom_t atomForMode(QClipboard::Mode mode)","Funname":"atomForMode","Returntype":"xcb_atom_t","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QByteArray clipboardReadIncrementalProperty(xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm)","Funname":"clipboardReadIncrementalProperty","Returntype":"QByteArray","Args":"xcb_window_t win,xcb_atom_t property,int nbytes,bool nullterm"},{"Uniquefunname":"bool clipboardReadProperty(xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format)","Funname":"clipboardReadProperty","Returntype":"bool","Args":"xcb_window_t win,xcb_atom_t property,bool deleteProperty,QByteArray * buffer,int * size,xcb_atom_t * type,int * format"},{"Uniquefunname":"QByteArray getDataInFormat(xcb_atom_t modeAtom,xcb_atom_t fmtatom)","Funname":"getDataInFormat","Returntype":"QByteArray","Args":"xcb_atom_t modeAtom,xcb_atom_t fmtatom"},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"void handleSelectionClearRequest(xcb_selection_clear_event_t * event)","Funname":"handleSelectionClearRequest","Returntype":"void","Args":"xcb_selection_clear_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleXFixesSelectionRequest(xcb_xfixes_selection_notify_event_t * event)","Funname":"handleXFixesSelectionRequest","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * event"},{"Uniquefunname":"void incrTransactionPeeker(xcb_generic_event_t * ge,bool \u0026 accepted)","Funname":"incrTransactionPeeker","Returntype":"void","Args":"xcb_generic_event_t * ge,bool \u0026 accepted"},{"Uniquefunname":"QMimeData * mimeData(QClipboard::Mode mode)","Funname":"mimeData","Returntype":"QMimeData *","Args":"QClipboard::Mode mode"},{"Uniquefunname":"QClipboard modeForAtom(xcb_atom_t atom)","Funname":"modeForAtom","Returntype":"QClipboard","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_window_t owner()","Funname":"owner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool ownsMode(QClipboard::Mode mode)","Funname":"ownsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":"bool processIncr()","Funname":"processIncr","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_window_t requestor()","Funname":"requestor","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbScreen * screen()","Funname":"screen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_atom_t sendSelection(QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property)","Funname":"sendSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_atom_t target,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"xcb_atom_t sendTargetsSelection(QMimeData * d,xcb_window_t window,xcb_atom_t property)","Funname":"sendTargetsSelection","Returntype":"xcb_atom_t","Args":"QMimeData * d,xcb_window_t window,xcb_atom_t property"},{"Uniquefunname":"void setMimeData(QMimeData * data,QClipboard::Mode mode)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data,QClipboard::Mode mode"},{"Uniquefunname":"void setProcessIncr(bool process)","Funname":"setProcessIncr","Returntype":"void","Args":"bool process"},{"Uniquefunname":"void setRequestor(xcb_window_t window)","Funname":"setRequestor","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"bool supportsMode(QClipboard::Mode mode)","Funname":"supportsMode","Returntype":"bool","Args":"QClipboard::Mode mode"},{"Uniquefunname":" ~QXcbClipboard()","Funname":"~QXcbClipboard","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbconnection.h","Functions":[{"Uniquefunname":"public QXcbConnectionGrabber(QXcbConnection * connection)","Funname":"QXcbConnectionGrabber","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"Q_OBJECT public QXcbEventReader(QXcbConnection * connection)","Funname":"QXcbEventReader","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"public QXcbSyncWindowRequest(QXcbWindow * w)","Funname":"QXcbSyncWindowRequest","Returntype":"public","Args":"QXcbWindow * w"},{"Uniquefunname":"Q_DECLARE_LOGGING_CATEGORY(lcQpaXInput)","Funname":"Q_DECLARE_LOGGING_CATEGORY","Returntype":"QT_BEGIN_NAMESPACE","Args":"lcQpaXInput"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData,Q_MOVABLE_TYPE"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbConnection::TabletData::ValuatorClassInfo,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"private addEvent(xcb_generic_event_t * event)","Funname":"addEvent","Returntype":"private","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"void addPeekFunc(PeekFunc f)","Funname":"addPeekFunc","Returntype":"void","Args":"PeekFunc f"},{"Uniquefunname":"void addWindowEventListener(xcb_window_t id,QXcbWindowEventListener * eventListener)","Funname":"addWindowEventListener","Returntype":"void","Args":"xcb_window_t id,QXcbWindowEventListener * eventListener"},{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QByteArray atomName(xcb_atom_t atom)","Funname":"atomName","Returntype":"QByteArray","Args":"xcb_atom_t atom"},{"Uniquefunname":"Qt buttons()","Funname":"buttons","Returntype":"Qt","Args":""},{"Uniquefunname":"bool canGrab()","Funname":"canGrab","Returntype":"bool","Args":""},{"Uniquefunname":"template\u003ctypename T\u003e xcb_generic_event_t * checkEvent(T \u0026 checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t *","Args":"T \u0026 checker"},{"Uniquefunname":"xcb_generic_event_t *QXcbConnection::checkEvent(T \u0026checker)","Funname":"checkEvent","Returntype":"template\u003ctypename T\u003e xcb_generic_event_t * QXcbConnection","Args":"T \u0026 checker"},{"Uniquefunname":"bool checkOutputIsPrimary(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"checkOutputIsPrimary","Returntype":"bool","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"void clearStartupId()","Funname":"clearStartupId","Returntype":"void","Args":""},{"Uniquefunname":"xcb_window_t clientLeader()","Funname":"clientLeader","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"QXcbClipboard * clipboard()","Funname":"clipboard","Returntype":"QXcbClipboard *","Args":""},{"Uniquefunname":"bool compressEvent(xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue)","Funname":"compressEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,int currentIndex,QXcbEventArray * eventqueue"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QXcbScreen * createScreen(QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"createScreen","Returntype":"QXcbScreen *","Args":"QXcbVirtualDesktop * virtualDesktop,const xcb_randr_output_change_t \u0026 outputChange,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void * createVisualInfoForDefaultVisualId()","Funname":"createVisualInfoForDefaultVisualId","Returntype":"void *","Args":""},{"Uniquefunname":"xcb_visualid_t defaultVisualId()","Funname":"defaultVisualId","Returntype":"xcb_visualid_t","Args":""},{"Uniquefunname":"void destroyScreen(QXcbScreen * screen)","Funname":"destroyScreen","Returntype":"void","Args":"QXcbScreen * screen"},{"Uniquefunname":"const char * displayName()","Funname":"displayName","Returntype":"const char *","Args":""},{"Uniquefunname":"QXcbDrag * drag()","Funname":"drag","Returntype":"QXcbDrag *","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"signals eventPending()","Funname":"eventPending","Returntype":"signals","Args":""},{"Uniquefunname":"QXcbEventReader * eventReader()","Funname":"eventReader","Returntype":"QXcbEventReader *","Args":""},{"Uniquefunname":"void finalizeXInput2()","Funname":"finalizeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"QXcbScreen * findScreenForCrtc(xcb_window_t rootWindow,xcb_randr_crtc_t crtc)","Funname":"findScreenForCrtc","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_crtc_t crtc"},{"Uniquefunname":"QXcbScreen * findScreenForOutput(xcb_window_t rootWindow,xcb_randr_output_t output)","Funname":"findScreenForOutput","Returntype":"QXcbScreen *","Args":"xcb_window_t rootWindow,xcb_randr_output_t output"},{"Uniquefunname":"public slots flush()","Funname":"flush","Returntype":"public slots","Args":""},{"Uniquefunname":"QXcbWindow * focusWindow()","Funname":"focusWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"const xcb_format_t * formatForDepth(uint8_t depth)","Funname":"formatForDepth","Returntype":"const xcb_format_t *","Args":"uint8_t depth"},{"Uniquefunname":"xcb_window_t getQtSelectionOwner()","Funname":"getQtSelectionOwner","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t getSelectionOwner(xcb_atom_t atom)","Funname":"getSelectionOwner","Returntype":"xcb_window_t","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_timestamp_t getTimestamp()","Funname":"getTimestamp","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbGlIntegration * glIntegration()","Funname":"glIntegration","Returntype":"QXcbGlIntegration *","Args":""},{"Uniquefunname":"void grabServer()","Funname":"grabServer","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleButtonPressEvent(const xcb_button_press_event_t *)","Funname":"handleButtonPressEvent","Returntype":"virtual void","Args":"const xcb_button_press_event_t *"},{"Uniquefunname":"virtual void handleButtonReleaseEvent(const xcb_button_release_event_t *)","Funname":"handleButtonReleaseEvent","Returntype":"virtual void","Args":"const xcb_button_release_event_t *"},{"Uniquefunname":"virtual void handleClientMessageEvent(const xcb_client_message_event_t *)","Funname":"handleClientMessageEvent","Returntype":"virtual void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"virtual void handleConfigureNotifyEvent(const xcb_configure_notify_event_t *)","Funname":"handleConfigureNotifyEvent","Returntype":"virtual void","Args":"const xcb_configure_notify_event_t *"},{"Uniquefunname":"virtual void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"virtual void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"void handleEnterEvent()","Funname":"handleEnterEvent","Returntype":"void","Args":""},{"Uniquefunname":"virtual void handleEnterNotifyEvent(const xcb_enter_notify_event_t *)","Funname":"handleEnterNotifyEvent","Returntype":"virtual void","Args":"const xcb_enter_notify_event_t *"},{"Uniquefunname":"virtual void handleExposeEvent(const xcb_expose_event_t *)","Funname":"handleExposeEvent","Returntype":"virtual void","Args":"const xcb_expose_event_t *"},{"Uniquefunname":"virtual void handleFocusInEvent(const xcb_focus_in_event_t *)","Funname":"handleFocusInEvent","Returntype":"virtual void","Args":"const xcb_focus_in_event_t *"},{"Uniquefunname":"virtual void handleFocusOutEvent(const xcb_focus_out_event_t *)","Funname":"handleFocusOutEvent","Returntype":"virtual void","Args":"const xcb_focus_out_event_t *"},{"Uniquefunname":"virtual bool handleGenericEvent(xcb_generic_event_t *,long *)","Funname":"handleGenericEvent","Returntype":"virtual bool","Args":"xcb_generic_event_t *,long *"},{"Uniquefunname":"virtual void handleLeaveNotifyEvent(const xcb_leave_notify_event_t *)","Funname":"handleLeaveNotifyEvent","Returntype":"virtual void","Args":"const xcb_leave_notify_event_t *"},{"Uniquefunname":"virtual void handleMapNotifyEvent(const xcb_map_notify_event_t *)","Funname":"handleMapNotifyEvent","Returntype":"virtual void","Args":"const xcb_map_notify_event_t *"},{"Uniquefunname":"virtual void handleMotionNotifyEvent(const xcb_motion_notify_event_t *)","Funname":"handleMotionNotifyEvent","Returntype":"virtual void","Args":"const xcb_motion_notify_event_t *"},{"Uniquefunname":"virtual void handlePropertyNotifyEvent(const xcb_property_notify_event_t *)","Funname":"handlePropertyNotifyEvent","Returntype":"virtual void","Args":"const xcb_property_notify_event_t *"},{"Uniquefunname":"virtual void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t *)","Funname":"handleUnmapNotifyEvent","Returntype":"virtual void","Args":"const xcb_unmap_notify_event_t *"},{"Uniquefunname":"virtual void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"virtual void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void handleXcbError(xcb_generic_error_t * error)","Funname":"handleXcbError","Returntype":"void","Args":"xcb_generic_error_t * error"},{"Uniquefunname":"void handleXcbEvent(xcb_generic_event_t * event)","Funname":"handleXcbEvent","Returntype":"void","Args":"xcb_generic_event_t * event"},{"Uniquefunname":"bool hasDefaultVisualId()","Funname":"hasDefaultVisualId","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasInputShape()","Funname":"hasInputShape","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXFixes()","Funname":"hasXFixes","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXKB()","Funname":"hasXKB","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXRandr()","Funname":"hasXRandr","Returntype":"bool","Args":""},{"Uniquefunname":"bool hasXShape()","Funname":"hasXShape","Returntype":"bool","Args":""},{"Uniquefunname":"private initializeAllAtoms()","Funname":"initializeAllAtoms","Returntype":"private","Args":""},{"Uniquefunname":"void initializeScreens()","Funname":"initializeScreens","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXFixes()","Funname":"initializeXFixes","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXInput2()","Funname":"initializeXInput2","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXKB()","Funname":"initializeXKB","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRandr()","Funname":"initializeXRandr","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXRender()","Funname":"initializeXRender","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXShape()","Funname":"initializeXShape","Returntype":"void","Args":""},{"Uniquefunname":"void initializeXinerama()","Funname":"initializeXinerama","Returntype":"void","Args":""},{"Uniquefunname":"xcb_atom_t internAtom(const char * name)","Funname":"internAtom","Returntype":"xcb_atom_t","Args":"const char * name"},{"Uniquefunname":"void invalidate()","Funname":"invalidate","Returntype":"void","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI21()","Funname":"isAtLeastXI21","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isAtLeastXI22()","Funname":"isAtLeastXI22","Returntype":"bool","Args":""},{"Uniquefunname":"bool isConnected()","Funname":"isConnected","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTouchScreen(int id)","Funname":"isTouchScreen","Returntype":"bool","Args":"int id"},{"Uniquefunname":"QXcbKeyboard * keyboard()","Funname":"keyboard","Returntype":"QXcbKeyboard *","Args":""},{"Uniquefunname":"QXcbEventArray * lock()","Funname":"lock","Returntype":"QXcbEventArray *","Args":""},{"Uniquefunname":"void log(const char * file,int line,int sequence)","Funname":"log","Returntype":"void","Args":"const char * file,int line,int sequence"},{"Uniquefunname":"QXcbWindow * mouseGrabber()","Funname":"mouseGrabber","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindow * mousePressWindow()","Funname":"mousePressWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QXcbNativeInterface *","Args":""},{"Uniquefunname":"xcb_timestamp_t netWmUserTime()","Funname":"netWmUserTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"QXcbWindow * platformWindowFromId(xcb_window_t id)","Funname":"platformWindowFromId","Returntype":"QXcbWindow *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbScreen * primaryScreen()","Funname":"primaryScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"int primaryScreenNumber()","Funname":"primaryScreenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * primaryVirtualDesktop()","Funname":"primaryVirtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"private slots processXcbEvents()","Funname":"processXcbEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"template\u003ctypename cookie_t\u003e friend cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e friend cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e friend reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e friend reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename cookie_t\u003e cookie_t q_xcb_call_template(const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename cookie_t\u003e cookie_t","Args":"const cookie_t \u0026 cookie,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"template\u003ctypename reply_t\u003e reply_t * q_xcb_call_template(reply_t * reply,QXcbConnection * connection,const char * file,int line)","Funname":"q_xcb_call_template","Returntype":"template\u003ctypename reply_t\u003e reply_t *","Args":"reply_t * reply,QXcbConnection * connection,const char * file,int line"},{"Uniquefunname":"QXcbAtom qatom(xcb_atom_t atom)","Funname":"qatom","Returntype":"QXcbAtom","Args":"xcb_atom_t atom"},{"Uniquefunname":"void registerEventDispatcher(QAbstractEventDispatcher * dispatcher)","Funname":"registerEventDispatcher","Returntype":"void","Args":"QAbstractEventDispatcher * dispatcher"},{"Uniquefunname":"private slots registerForEvents()","Funname":"registerForEvents","Returntype":"private slots","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void removeWindowEventListener(xcb_window_t id)","Funname":"removeWindowEventListener","Returntype":"void","Args":"xcb_window_t id"},{"Uniquefunname":"xcb_window_t rootWindow()","Funname":"rootWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"const QList\u003cQXcbScreen * \u003e \u0026 screens()","Funname":"screens","Returntype":"const QList\u003cQXcbScreen * \u003e \u0026","Args":""},{"Uniquefunname":"void setButton(Qt::MouseButton button,bool down)","Funname":"setButton","Returntype":"void","Args":"Qt::MouseButton button,bool down"},{"Uniquefunname":"void setFocusWindow(QWindow *)","Funname":"setFocusWindow","Returntype":"void","Args":"QWindow *"},{"Uniquefunname":"void setMouseGrabber(QXcbWindow *)","Funname":"setMouseGrabber","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setMousePressWindow(QXcbWindow *)","Funname":"setMousePressWindow","Returntype":"void","Args":"QXcbWindow *"},{"Uniquefunname":"void setNetWmUserTime(xcb_timestamp_t t)","Funname":"setNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"void setStartupId(const QByteArray \u0026 nextId)","Funname":"setStartupId","Returntype":"void","Args":"const QByteArray \u0026 nextId"},{"Uniquefunname":"void setTime(xcb_timestamp_t t)","Funname":"setTime","Returntype":"void","Args":"xcb_timestamp_t t"},{"Uniquefunname":"const xcb_setup_t * setup()","Funname":"setup","Returntype":"const xcb_setup_t *","Args":""},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResizeForTouchBegin(xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner)","Funname":"startSystemResizeForTouchBegin","Returntype":"bool","Args":"xcb_window_t window,const QPoint \u0026 point,Qt::Corner corner"},{"Uniquefunname":"QByteArray startupId()","Funname":"startupId","Returntype":"QByteArray","Args":""},{"Uniquefunname":"bool supportsThreadedRendering()","Funname":"supportsThreadedRendering","Returntype":"bool","Args":""},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QXcbSystemTrayTracker * systemTrayTracker()","Funname":"systemTrayTracker","Returntype":"QXcbSystemTrayTracker *","Args":""},{"Uniquefunname":"TabletData * tabletDataForDevice(int id)","Funname":"tabletDataForDevice","Returntype":"TabletData *","Args":"int id"},{"Uniquefunname":"bool threadedEventHandling()","Funname":"threadedEventHandling","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_timestamp_t time()","Funname":"time","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"virtual QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"virtual QXcbWindow *","Args":""},{"Uniquefunname":"XInput2TouchDeviceData * touchDeviceForId(int id)","Funname":"touchDeviceForId","Returntype":"XInput2TouchDeviceData *","Args":"int id"},{"Uniquefunname":"Qt translateMouseButton(xcb_button_t s)","Funname":"translateMouseButton","Returntype":"Qt","Args":"xcb_button_t s"},{"Uniquefunname":"void ungrabServer()","Funname":"ungrabServer","Returntype":"void","Args":""},{"Uniquefunname":"void unlock()","Funname":"unlock","Returntype":"void","Args":""},{"Uniquefunname":"void updateScreen(QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange)","Funname":"updateScreen","Returntype":"void","Args":"QXcbScreen * screen,const xcb_randr_output_change_t \u0026 outputChange"},{"Uniquefunname":"void updateScreens(const xcb_randr_notify_event_t * event)","Funname":"updateScreens","Returntype":"void","Args":"const xcb_randr_notify_event_t * event"},{"Uniquefunname":"void updateScrollingDevice(ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes)","Funname":"updateScrollingDevice","Returntype":"void","Args":"ScrollingDevice \u0026 scrollingDevice,int num_classes,void * classes"},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktopForRootWindow(xcb_window_t rootWindow)","Funname":"virtualDesktopForRootWindow","Returntype":"QXcbVirtualDesktop *","Args":"xcb_window_t rootWindow"},{"Uniquefunname":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026 virtualDesktops()","Funname":"virtualDesktops","Returntype":"const QList\u003cQXcbVirtualDesktop * \u003e \u0026","Args":""},{"Uniquefunname":"QXcbWindow * window()","Funname":"window","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"QXcbWindowEventListener * windowEventListenerFromId(xcb_window_t id)","Funname":"windowEventListenerFromId","Returntype":"QXcbWindowEventListener *","Args":"xcb_window_t id"},{"Uniquefunname":"QXcbWMSupport * wmSupport()","Funname":"wmSupport","Returntype":"QXcbWMSupport *","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayAvailable()","Funname":"xEmbedSystemTrayAvailable","Returntype":"bool","Args":""},{"Uniquefunname":"bool xEmbedSystemTrayVisualHasAlphaChannel()","Funname":"xEmbedSystemTrayVisualHasAlphaChannel","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""},{"Uniquefunname":"bool xi2GetValuatorValueIfSet(const void * event,int valuatorNum,double * value)","Funname":"xi2GetValuatorValueIfSet","Returntype":"bool","Args":"const void * event,int valuatorNum,double * value"},{"Uniquefunname":"void xi2HandleDeviceChangedEvent(void * event)","Funname":"xi2HandleDeviceChangedEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleEvent(xcb_ge_event_t * event)","Funname":"xi2HandleEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2HandleHierachyEvent(void * event)","Funname":"xi2HandleHierachyEvent","Returntype":"void","Args":"void * event"},{"Uniquefunname":"void xi2HandleScrollEvent(void * event,ScrollingDevice \u0026 scrollingDevice)","Funname":"xi2HandleScrollEvent","Returntype":"void","Args":"void * event,ScrollingDevice \u0026 scrollingDevice"},{"Uniquefunname":"bool xi2HandleTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2HandleTabletEvent","Returntype":"bool","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"bool xi2MouseEvents()","Funname":"xi2MouseEvents","Returntype":"bool","Args":""},{"Uniquefunname":"void xi2PrepareXIGenericDeviceEvent(xcb_ge_event_t * event)","Funname":"xi2PrepareXIGenericDeviceEvent","Returntype":"void","Args":"xcb_ge_event_t * event"},{"Uniquefunname":"void xi2ProcessTouch(void * xiDevEvent,QXcbWindow * platformWindow)","Funname":"xi2ProcessTouch","Returntype":"void","Args":"void * xiDevEvent,QXcbWindow * platformWindow"},{"Uniquefunname":"void xi2ReportTabletEvent(const void * event,TabletData * tabletData)","Funname":"xi2ReportTabletEvent","Returntype":"void","Args":"const void * event,TabletData * tabletData"},{"Uniquefunname":"void xi2Select(xcb_window_t window)","Funname":"xi2Select","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"void xi2SelectStateEvents()","Funname":"xi2SelectStateEvents","Returntype":"void","Args":""},{"Uniquefunname":"bool xi2SetMouseGrabEnabled(xcb_window_t w,bool grab)","Funname":"xi2SetMouseGrabEnabled","Returntype":"bool","Args":"xcb_window_t w,bool grab"},{"Uniquefunname":"void xi2SetupDevices()","Funname":"xi2SetupDevices","Returntype":"void","Args":""},{"Uniquefunname":"Qt xiToQtMouseButton(uint32_t b)","Funname":"xiToQtMouseButton","Returntype":"Qt","Args":"uint32_t b"},{"Uniquefunname":"void * xlib_display()","Funname":"xlib_display","Returntype":"void *","Args":""},{"Uniquefunname":" ~QXcbConnection()","Funname":"~QXcbConnection","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbConnectionGrabber()","Funname":"~QXcbConnectionGrabber","Returntype":"","Args":""},{"Uniquefunname":"public ~QXcbWindowEventListener()","Funname":"~QXcbWindowEventListener","Returntype":"public","Args":""}],"Records":[{"Name":"enum:Atom","Fields":["AbsDistance","AbsMTOrientation","AbsMTPositionX","AbsMTPositionY","AbsMTPressure","AbsMTTouchMajor","AbsMTTouchMinor","AbsMTTrackingID","AbsPressure","AbsTiltX","AbsTiltY","AbsWheel","AbsX","AbsY","ButtonHorizWheelLeft","ButtonHorizWheelRight","ButtonLeft","ButtonMiddle","ButtonRight","ButtonWheelDown","ButtonWheelUp","CARDINAL","CLIPBOARD","CLIPBOARD_MANAGER","CLIP_TEMPORARY","DTWM_IS_RUNNING","ENLIGHTENMENT_DESKTOP","INCR","INTEGER","MANAGER","MULTIPLE","MaxContacts","NAtoms","NPredefinedAtoms","RESOURCE_MANAGER","RelHorizScroll","RelHorizWheel","RelVertScroll","RelVertWheel","RelX","RelY","SAVE_TARGETS","SM_CLIENT_ID","TARGETS","TEXT","TIMESTAMP","UTF8_STRING","WM_CHANGE_STATE","WM_CLASS","WM_CLIENT_LEADER","WM_DELETE_WINDOW","WM_NAME","WM_PROTOCOLS","WM_STATE","WM_TAKE_FOCUS","WM_WINDOW_ROLE","WacomSerialIDs","XdndActionCopy","XdndActionLink","XdndActionList","XdndActionMove","XdndActionPrivate","XdndAware","XdndDrop","XdndEnter","XdndFinished","XdndLeave","XdndPosition","XdndProxy","XdndSelection","XdndStatus","XdndTypelist","XmTRANSFER_FAILURE","XmTRANSFER_SUCCESS","_COMPIZ_DECOR_DELETE_PIXMAP","_COMPIZ_DECOR_PENDING","_COMPIZ_DECOR_REQUEST","_COMPIZ_TOOLKIT_ACTION","_DT_SAVE_MODE","_GTK_LOAD_ICONTHEMES","_KDE_NET_WM_FRAME_STRUT","_KDE_NET_WM_WINDOW_TYPE_OVERRIDE","_MOTIF_DRAG_AND_DROP_MESSAGE","_MOTIF_DRAG_INITIATOR_INFO","_MOTIF_DRAG_RECEIVER_INFO","_MOTIF_DRAG_TARGETS","_MOTIF_DRAG_WINDOW","_MOTIF_WM_HINTS","_NET_ACTIVE_WINDOW","_NET_FRAME_EXTENTS","_NET_MOVERESIZE_WINDOW","_NET_STARTUP_INFO","_NET_STARTUP_INFO_BEGIN","_NET_SUPPORTED","_NET_SUPPORTING_WM_CHECK","_NET_SYSTEM_TRAY_OPCODE","_NET_SYSTEM_TRAY_VISUAL","_NET_VIRTUAL_ROOTS","_NET_WM_CM_S0","_NET_WM_CONTEXT_HELP","_NET_WM_FULL_PLACEMENT","_NET_WM_ICON","_NET_WM_ICON_NAME","_NET_WM_MOVERESIZE","_NET_WM_NAME","_NET_WM_PID","_NET_WM_PING","_NET_WM_STATE","_NET_WM_STATE_ABOVE","_NET_WM_STATE_BELOW","_NET_WM_STATE_DEMANDS_ATTENTION","_NET_WM_STATE_FULLSCREEN","_NET_WM_STATE_MAXIMIZED_HORZ","_NET_WM_STATE_MAXIMIZED_VERT","_NET_WM_STATE_MODAL","_NET_WM_STATE_STAYS_ON_TOP","_NET_WM_SYNC_REQUEST","_NET_WM_SYNC_REQUEST_COUNTER","_NET_WM_USER_TIME","_NET_WM_USER_TIME_WINDOW","_NET_WM_WINDOW_OPACITY","_NET_WM_WINDOW_TYPE","_NET_WM_WINDOW_TYPE_COMBO","_NET_WM_WINDOW_TYPE_DESKTOP","_NET_WM_WINDOW_TYPE_DIALOG","_NET_WM_WINDOW_TYPE_DND","_NET_WM_WINDOW_TYPE_DOCK","_NET_WM_WINDOW_TYPE_DROPDOWN_MENU","_NET_WM_WINDOW_TYPE_MENU","_NET_WM_WINDOW_TYPE_NORMAL","_NET_WM_WINDOW_TYPE_NOTIFICATION","_NET_WM_WINDOW_TYPE_POPUP_MENU","_NET_WM_WINDOW_TYPE_SPLASH","_NET_WM_WINDOW_TYPE_TOOLBAR","_NET_WM_WINDOW_TYPE_TOOLTIP","_NET_WM_WINDOW_TYPE_UTILITY","_NET_WORKAREA","_QT_CLIPBOARD_SENTINEL","_QT_CLOSE_CONNECTION","_QT_INPUT_ENCODING","_QT_SCROLL_DONE","_QT_SELECTION","_QT_SELECTION_SENTINEL","_QT_SETTINGS_TIMESTAMP","_SGI_DESKS_MANAGER","_XEMBED","_XEMBED_INFO","_XKB_RULES_NAMES","_XSETROOT_ID","_XSETTINGS_SETTINGS"]},{"Name":"struct:CallInfo","Fields":["QByteArray","int","int"]},{"Name":"struct:ScrollingDevice","Fields":["int","double","int","QPointF","Qt::Orientations","Qt::Orientations","double","int"]},{"Name":"struct:StartSystemResizeInfo","Fields":["Qt::Corner","uint16_t","uint32_t","xcb_window_t"]},{"Name":"struct:TabletData::ValuatorClassInfo","Fields":["double","double","double","int"]},{"Name":"struct:TabletData","Fields":["Qt::MouseButtons","int","bool","QTabletEvent::PointerType","qint64","QTabletEvent::TabletDevice","QHash\u003cint,ValuatorClassInfo\u003e"]},{"Name":"union:q_padded_xcb_event","Fields":["T","char[32]"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbcursor.h","Functions":[{"Uniquefunname":"public QXcbCursor(QXcbConnection * conn,QXcbScreen * screen)","Funname":"QXcbCursor","Returntype":"public","Args":"QXcbConnection * conn,QXcbScreen * screen"},{"Uniquefunname":" QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":" QXcbCursorCacheKey::QXcbCursorCacheKey()","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"","Args":""},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(Qt::CursorShape s)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"Qt::CursorShape s"},{"Uniquefunname":"explicit QXcbCursorCacheKey::QXcbCursorCacheKey(const QCursor \u0026 c)","Funname":"QXcbCursorCacheKey::QXcbCursorCacheKey","Returntype":"explicit","Args":"const QCursor \u0026 c"},{"Uniquefunname":"void changeCursor(QCursor * cursor,QWindow * widget)","Funname":"changeCursor","Returntype":"void","Args":"QCursor * cursor,QWindow * widget"},{"Uniquefunname":"xcb_cursor_t createBitmapCursor(QCursor * cursor)","Funname":"createBitmapCursor","Returntype":"xcb_cursor_t","Args":"QCursor * cursor"},{"Uniquefunname":"xcb_cursor_t createFontCursor(int cshape)","Funname":"createFontCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"xcb_cursor_t createNonStandardCursor(int cshape)","Funname":"createNonStandardCursor","Returntype":"xcb_cursor_t","Args":"int cshape"},{"Uniquefunname":"void cursorThemePropertyChanged(QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle)","Funname":"cursorThemePropertyChanged","Returntype":"void","Args":"QXcbVirtualDesktop * screen,const QByteArray \u0026 name,const QVariant \u0026 property,void * handle"},{"Uniquefunname":"QPoint pos()","Funname":"pos","Returntype":"QPoint","Args":""},{"Uniquefunname":"uint qHash(const QXcbCursorCacheKey \u0026 k,uint seed)","Funname":"qHash","Returntype":"uint","Args":"const QXcbCursorCacheKey \u0026 k,uint seed"},{"Uniquefunname":"void setPos(const QPoint \u0026 pos)","Funname":"setPos","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"xcb_cursor_t xcbCursor(const QCursor \u0026 c)","Funname":"xcbCursor","Returntype":"xcb_cursor_t","Args":"const QCursor \u0026 c"},{"Uniquefunname":" ~QXcbCursor()","Funname":"~QXcbCursor","Returntype":"","Args":""}],"Records":[{"Name":"struct:QXcbCursorCacheKey","Fields":["qint64","qint64","Qt::CursorShape"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbdrag.h","Functions":[{"Uniquefunname":"public QXcbDrag(QXcbConnection * c)","Funname":"QXcbDrag","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":" Q_DECLARE_TYPEINFO(QXcbDrag::Transaction,Q_MOVABLE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"","Args":"QXcbDrag::Transaction,Q_MOVABLE_TYPE"},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"bool dndEnable(QXcbWindow * win,bool on)","Funname":"dndEnable","Returntype":"bool","Args":"QXcbWindow * win,bool on"},{"Uniquefunname":"void drop(const QPoint \u0026 globalPos)","Funname":"drop","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"void endDrag()","Funname":"endDrag","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"xcb_window_t findRealWindow(const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows)","Funname":"findRealWindow","Returntype":"xcb_window_t","Args":"const QPoint \u0026 pos,xcb_window_t w,int md,bool ignoreNonXdndAwareWindows"},{"Uniquefunname":"int findTransactionByTime(xcb_timestamp_t timestamp)","Funname":"findTransactionByTime","Returntype":"int","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"int findTransactionByWindow(xcb_window_t window)","Funname":"findTransactionByWindow","Returntype":"int","Args":"xcb_window_t window"},{"Uniquefunname":"void handleDrop(QPlatformWindow *,const xcb_client_message_event_t * event)","Funname":"handleDrop","Returntype":"void","Args":"QPlatformWindow *,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleFinished(const xcb_client_message_event_t * event)","Funname":"handleFinished","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleLeave(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handleLeave","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handlePosition(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handlePosition","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleSelectionRequest(const xcb_selection_request_event_t * event)","Funname":"handleSelectionRequest","Returntype":"void","Args":"const xcb_selection_request_event_t * event"},{"Uniquefunname":"void handleStatus(const xcb_client_message_event_t * event)","Funname":"handleStatus","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_position(QPlatformWindow * w,const xcb_client_message_event_t * event)","Funname":"handle_xdnd_position","Returntype":"void","Args":"QPlatformWindow * w,const xcb_client_message_event_t * event"},{"Uniquefunname":"void handle_xdnd_status(const xcb_client_message_event_t * event)","Funname":"handle_xdnd_status","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void move(const QPoint \u0026 globalPos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 globalPos"},{"Uniquefunname":"bool ownsDragObject()","Funname":"ownsDragObject","Returntype":"bool","Args":""},{"Uniquefunname":"QMimeData * platformDropData()","Funname":"platformDropData","Returntype":"QMimeData *","Args":""},{"Uniquefunname":"void restartDropExpiryTimer()","Funname":"restartDropExpiryTimer","Returntype":"void","Args":""},{"Uniquefunname":"void send_leave()","Funname":"send_leave","Returntype":"void","Args":""},{"Uniquefunname":"void startDrag()","Funname":"startDrag","Returntype":"void","Args":""},{"Uniquefunname":"xcb_timestamp_t targetTime()","Funname":"targetTime","Returntype":"xcb_timestamp_t","Args":""},{"Uniquefunname":"protected timerEvent(QTimerEvent * e)","Funname":"timerEvent","Returntype":"protected","Args":"QTimerEvent * e"},{"Uniquefunname":"Qt toDropAction(xcb_atom_t atom)","Funname":"toDropAction","Returntype":"Qt","Args":"xcb_atom_t atom"},{"Uniquefunname":"xcb_atom_t toXdndAction(Qt::DropAction a)","Funname":"toXdndAction","Returntype":"xcb_atom_t","Args":"Qt::DropAction a"},{"Uniquefunname":"void updatePixmap()","Funname":"updatePixmap","Returntype":"void","Args":""},{"Uniquefunname":" ~QXcbDrag()","Funname":"~QXcbDrag","Returntype":"","Args":""}],"Records":[{"Name":"struct:Transaction","Fields":["QPointer\u003cQDrag\u003e","xcb_window_t","xcb_window_t","QPlatformWindow *","QTime","xcb_timestamp_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbimage.h","Functions":[{"Uniquefunname":"xcb_pixmap_t qt_xcb_XPixmapFromBitmap(QXcbScreen * screen,const QImage \u0026 image)","Funname":"qt_xcb_XPixmapFromBitmap","Returntype":"xcb_pixmap_t","Args":"QXcbScreen * screen,const QImage \u0026 image"},{"Uniquefunname":"xcb_cursor_t qt_xcb_createCursorXRender(QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot)","Funname":"qt_xcb_createCursorXRender","Returntype":"xcb_cursor_t","Args":"QXcbScreen * screen,const QImage \u0026 image,const QPoint \u0026 spot"},{"Uniquefunname":"QT_BEGIN_NAMESPACE QImage qt_xcb_imageFormatForVisual(QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_imageFormatForVisual","Returntype":"QT_BEGIN_NAMESPACE QImage","Args":"QXcbConnection * connection,uint8_t depth,const xcb_visualtype_t * visual"},{"Uniquefunname":"QPixmap qt_xcb_pixmapFromXPixmap(QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual)","Funname":"qt_xcb_pixmapFromXPixmap","Returntype":"QPixmap","Args":"QXcbConnection * connection,xcb_pixmap_t pixmap,int width,int height,int depth,const xcb_visualtype_t * visual"}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbintegration.h","Functions":[{"Uniquefunname":"public QXcbIntegration(const QStringList \u0026 parameters,int \u0026 argc,char ** argv)","Funname":"QXcbIntegration","Returntype":"public","Args":"const QStringList \u0026 parameters,int \u0026 argc,char ** argv"},{"Uniquefunname":"QPlatformAccessibility * accessibility()","Funname":"accessibility","Returntype":"QPlatformAccessibility *","Args":""},{"Uniquefunname":"void beep()","Funname":"beep","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformClipboard * clipboard()","Funname":"clipboard","Returntype":"QPlatformClipboard *","Args":""},{"Uniquefunname":"QAbstractEventDispatcher * createEventDispatcher()","Funname":"createEventDispatcher","Returntype":"QAbstractEventDispatcher *","Args":""},{"Uniquefunname":"QPlatformWindow * createForeignWindow(QWindow * window,WId nativeHandle)","Funname":"createForeignWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"QPlatformBackingStore * createPlatformBackingStore(QWindow * window)","Funname":"createPlatformBackingStore","Returntype":"QPlatformBackingStore *","Args":"QWindow * window"},{"Uniquefunname":"QPlatformOffscreenSurface * createPlatformOffscreenSurface(QOffscreenSurface * surface)","Funname":"createPlatformOffscreenSurface","Returntype":"QPlatformOffscreenSurface *","Args":"QOffscreenSurface * surface"},{"Uniquefunname":"QPlatformOpenGLContext * createPlatformOpenGLContext(QOpenGLContext * context)","Funname":"createPlatformOpenGLContext","Returntype":"QPlatformOpenGLContext *","Args":"QOpenGLContext * context"},{"Uniquefunname":"QPlatformSessionManager * createPlatformSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"createPlatformSessionManager","Returntype":"QPlatformSessionManager *","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"QPlatformTheme * createPlatformTheme(const QString \u0026 name)","Funname":"createPlatformTheme","Returntype":"QPlatformTheme *","Args":"const QString \u0026 name"},{"Uniquefunname":"QPlatformWindow * createPlatformWindow(QWindow * window)","Funname":"createPlatformWindow","Returntype":"QPlatformWindow *","Args":"QWindow * window"},{"Uniquefunname":"QXcbConnection * defaultConnection()","Funname":"defaultConnection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"QPlatformDrag * drag()","Funname":"drag","Returntype":"QPlatformDrag *","Args":""},{"Uniquefunname":"QPlatformFontDatabase * fontDatabase()","Funname":"fontDatabase","Returntype":"QPlatformFontDatabase *","Args":""},{"Uniquefunname":"bool hasCapability(Capability cap)","Funname":"hasCapability","Returntype":"bool","Args":"Capability cap"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"QPlatformInputContext * inputContext()","Funname":"inputContext","Returntype":"QPlatformInputContext *","Args":""},{"Uniquefunname":"QXcbIntegration * instance()","Funname":"instance","Returntype":"QXcbIntegration *","Args":""},{"Uniquefunname":"void moveToScreen(QWindow * window,int screen)","Funname":"moveToScreen","Returntype":"void","Args":"QWindow * window,int screen"},{"Uniquefunname":"QPlatformNativeInterface * nativeInterface()","Funname":"nativeInterface","Returntype":"QPlatformNativeInterface *","Args":""},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"Qt queryKeyboardModifiers()","Funname":"queryKeyboardModifiers","Returntype":"Qt","Args":""},{"Uniquefunname":"QPlatformServices * services()","Funname":"services","Returntype":"QPlatformServices *","Args":""},{"Uniquefunname":"QVariant styleHint(StyleHint hint)","Funname":"styleHint","Returntype":"QVariant","Args":"StyleHint hint"},{"Uniquefunname":"void sync()","Funname":"sync","Returntype":"void","Args":""},{"Uniquefunname":"QStringList themeNames()","Funname":"themeNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"QByteArray wmClass()","Funname":"wmClass","Returntype":"QByteArray","Args":""},{"Uniquefunname":" ~QXcbIntegration()","Funname":"~QXcbIntegration","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbkeyboard.h","Functions":[{"Uniquefunname":"public QXcbKeyboard(QXcbConnection * connection)","Funname":"QXcbKeyboard","Returntype":"public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void checkForLatinLayout()","Funname":"checkForLatinLayout","Returntype":"void","Args":""},{"Uniquefunname":"void clearXKBConfig()","Funname":"clearXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"int coreDeviceId()","Funname":"coreDeviceId","Returntype":"int","Args":""},{"Uniquefunname":"protected handleKeyEvent(xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time)","Funname":"handleKeyEvent","Returntype":"protected","Args":"xcb_window_t sourceWindow,QEvent::Type type,xcb_keycode_t code,quint16 state,xcb_timestamp_t time"},{"Uniquefunname":"void handleKeyPressEvent(const xcb_key_press_event_t * event)","Funname":"handleKeyPressEvent","Returntype":"void","Args":"const xcb_key_press_event_t * event"},{"Uniquefunname":"void handleKeyReleaseEvent(const xcb_key_release_event_t * event)","Funname":"handleKeyReleaseEvent","Returntype":"void","Args":"const xcb_key_release_event_t * event"},{"Uniquefunname":"void handleMappingNotifyEvent(const void * event)","Funname":"handleMappingNotifyEvent","Returntype":"void","Args":"const void * event"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym"},{"Uniquefunname":"int keysymToQtKey(xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text)","Funname":"keysymToQtKey","Returntype":"int","Args":"xcb_keysym_t keysym,Qt::KeyboardModifiers \u0026 modifiers,const QString \u0026 text"},{"Uniquefunname":"xkb_keysym_t lookupLatinKeysym(xkb_keycode_t keycode)","Funname":"lookupLatinKeysym","Returntype":"xkb_keysym_t","Args":"xkb_keycode_t keycode"},{"Uniquefunname":"QString lookupString(struct xkb_state * state,xcb_keycode_t code)","Funname":"lookupString","Returntype":"QString","Args":"struct xkb_state * state,xcb_keycode_t code"},{"Uniquefunname":"QList\u003cint\u003e possibleKeys(const QKeyEvent * e)","Funname":"possibleKeys","Returntype":"QList\u003cint\u003e","Args":"const QKeyEvent * e"},{"Uniquefunname":"void printKeymapError(const char * error)","Funname":"printKeymapError","Returntype":"void","Args":"const char * error"},{"Uniquefunname":"void readXKBConfig()","Funname":"readXKBConfig","Returntype":"void","Args":""},{"Uniquefunname":"void resolveMaskConflicts()","Funname":"resolveMaskConflicts","Returntype":"void","Args":""},{"Uniquefunname":"Qt translateModifiers(int s)","Funname":"translateModifiers","Returntype":"Qt","Args":"int s"},{"Uniquefunname":"void updateKeymap()","Funname":"updateKeymap","Returntype":"void","Args":""},{"Uniquefunname":"void updateModifiers()","Funname":"updateModifiers","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModMapping()","Funname":"updateVModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateVModToRModMapping()","Funname":"updateVModToRModMapping","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBMods()","Funname":"updateXKBMods","Returntype":"void","Args":""},{"Uniquefunname":"void updateXKBState(xcb_xkb_state_notify_event_t * state)","Funname":"updateXKBState","Returntype":"void","Args":"xcb_xkb_state_notify_event_t * state"},{"Uniquefunname":"void updateXKBStateFromCore(quint16 state)","Funname":"updateXKBStateFromCore","Returntype":"void","Args":"quint16 state"},{"Uniquefunname":"private updateXKBStateFromState(struct xkb_state * kb_state,quint16 state)","Funname":"updateXKBStateFromState","Returntype":"private","Args":"struct xkb_state * kb_state,quint16 state"},{"Uniquefunname":"void updateXKBStateFromXI(void * modInfo,void * groupInfo)","Funname":"updateXKBStateFromXI","Returntype":"void","Args":"void * modInfo,void * groupInfo"},{"Uniquefunname":"quint32 xkbModMask(quint16 state)","Funname":"xkbModMask","Returntype":"quint32","Args":"quint16 state"},{"Uniquefunname":" ~QXcbKeyboard()","Funname":"~QXcbKeyboard","Returntype":"","Args":""}],"Records":[{"Name":"struct:_mod_masks","Fields":["uint","uint","uint","uint","uint"]},{"Name":"struct:_xkb_mods","Fields":["xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t","xkb_mod_index_t"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbmime.h","Functions":[{"Uniquefunname":"Q_OBJECT public QXcbMime()","Funname":"QXcbMime","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"xcb_atom_t mimeAtomForFormat(QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding)","Funname":"mimeAtomForFormat","Returntype":"xcb_atom_t","Args":"QXcbConnection * connection,const QString \u0026 format,QVariant::Type requestedType,const QVector\u003cxcb_atom_t\u003e \u0026 atoms,QByteArray * requestedEncoding"},{"Uniquefunname":"QString mimeAtomToString(QXcbConnection * connection,xcb_atom_t a)","Funname":"mimeAtomToString","Returntype":"QString","Args":"QXcbConnection * connection,xcb_atom_t a"},{"Uniquefunname":"QVector\u003cxcb_atom_t\u003e mimeAtomsForFormat(QXcbConnection * connection,const QString \u0026 format)","Funname":"mimeAtomsForFormat","Returntype":"QVector\u003cxcb_atom_t\u003e","Args":"QXcbConnection * connection,const QString \u0026 format"},{"Uniquefunname":"QVariant mimeConvertToFormat(QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding)","Funname":"mimeConvertToFormat","Returntype":"QVariant","Args":"QXcbConnection * connection,xcb_atom_t a,const QByteArray \u0026 data,const QString \u0026 format,QVariant::Type requestedType,const QByteArray \u0026 encoding"},{"Uniquefunname":"bool mimeDataForAtom(QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat)","Funname":"mimeDataForAtom","Returntype":"bool","Args":"QXcbConnection * connection,xcb_atom_t a,QMimeData * mimeData,QByteArray * data,xcb_atom_t * atomFormat,int * dataFormat"},{"Uniquefunname":" ~QXcbMime()","Funname":"~QXcbMime","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbnativeinterface.h","Functions":[{"Uniquefunname":" QXcbNativeInterface()","Funname":"QXcbNativeInterface","Returntype":"","Args":""},{"Uniquefunname":"void addHandler(QXcbNativeInterfaceHandler * handler)","Funname":"addHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"void * appTime(const QXcbScreen * screen)","Funname":"appTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * appUserTime(const QXcbScreen * screen)","Funname":"appUserTime","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * atspiBus()","Funname":"atspiBus","Returntype":"void *","Args":""},{"Uniquefunname":"void * connection()","Funname":"connection","Returntype":"void *","Args":""},{"Uniquefunname":"void * connectionForWindow(QWindow * window)","Funname":"connectionForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void * display()","Funname":"display","Returntype":"void *","Args":""},{"Uniquefunname":"void * displayForWindow(QWindow * window)","Funname":"displayForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"const QByteArray \u0026 genericEventFilterType()","Funname":"genericEventFilterType","Returntype":"const QByteArray \u0026","Args":""},{"Uniquefunname":"void * getTimestamp(const QXcbScreen * screen)","Funname":"getTimestamp","Returntype":"void *","Args":"const QXcbScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"handlerNativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * handlerNativeResourceForContext(const QByteArray \u0026 resource,QOpenGLContext * context)","Funname":"handlerNativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resource,QOpenGLContext * context"},{"Uniquefunname":"void * handlerNativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * handlerNativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"handlerNativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * handlerNativeResourceForWindow(const QByteArray \u0026 resource,QWindow * window)","Funname":"handlerNativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resource,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction handlerNativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction handlerNativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction handlerNativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction handlerNativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction handlerNativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"handlerNativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer handlerPlatformFunction(const QByteArray \u0026 function)","Funname":"handlerPlatformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"private locateSystemTray(xcb_connection_t * conn,const QXcbScreen * screen)","Funname":"locateSystemTray","Returntype":"private","Args":"xcb_connection_t * conn,const QXcbScreen * screen"},{"Uniquefunname":"void * nativeResourceForBackingStore(const QByteArray \u0026 resource,QBackingStore * backingStore)","Funname":"nativeResourceForBackingStore","Returntype":"void *","Args":"const QByteArray \u0026 resource,QBackingStore * backingStore"},{"Uniquefunname":"void * nativeResourceForContext(const QByteArray \u0026 resourceString,QOpenGLContext * context)","Funname":"nativeResourceForContext","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QOpenGLContext * context"},{"Uniquefunname":"void * nativeResourceForCursor(const QByteArray \u0026 resource,const QCursor \u0026 cursor)","Funname":"nativeResourceForCursor","Returntype":"void *","Args":"const QByteArray \u0026 resource,const QCursor \u0026 cursor"},{"Uniquefunname":"void * nativeResourceForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceForIntegration","Returntype":"void *","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"void * nativeResourceForScreen(const QByteArray \u0026 resource,QScreen * screen)","Funname":"nativeResourceForScreen","Returntype":"void *","Args":"const QByteArray \u0026 resource,QScreen * screen"},{"Uniquefunname":"void * nativeResourceForWindow(const QByteArray \u0026 resourceString,QWindow * window)","Funname":"nativeResourceForWindow","Returntype":"void *","Args":"const QByteArray \u0026 resourceString,QWindow * window"},{"Uniquefunname":"NativeResourceForBackingStoreFunction nativeResourceFunctionForBackingStore(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForBackingStore","Returntype":"NativeResourceForBackingStoreFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForContextFunction nativeResourceFunctionForContext(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForContext","Returntype":"NativeResourceForContextFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForIntegrationFunction nativeResourceFunctionForIntegration(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForIntegration","Returntype":"NativeResourceForIntegrationFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForScreenFunction nativeResourceFunctionForScreen(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForScreen","Returntype":"NativeResourceForScreenFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"NativeResourceForWindowFunction nativeResourceFunctionForWindow(const QByteArray \u0026 resource)","Funname":"nativeResourceFunctionForWindow","Returntype":"NativeResourceForWindowFunction","Args":"const QByteArray \u0026 resource"},{"Uniquefunname":"QFunctionPointer platformFunction(const QByteArray \u0026 function)","Funname":"platformFunction","Returntype":"QFunctionPointer","Args":"const QByteArray \u0026 function"},{"Uniquefunname":"QXcbScreen * qPlatformScreenForWindow(QWindow * window)","Funname":"qPlatformScreenForWindow","Returntype":"QXcbScreen *","Args":"QWindow * window"},{"Uniquefunname":"void removeHandler(QXcbNativeInterfaceHandler * handler)","Funname":"removeHandler","Returntype":"void","Args":"QXcbNativeInterfaceHandler * handler"},{"Uniquefunname":"Q_INVOKABLE bool requestSystemTrayWindowDock(const QWindow * window)","Funname":"requestSystemTrayWindowDock","Returntype":"Q_INVOKABLE bool","Args":"const QWindow * window"},{"Uniquefunname":"void * rootWindow()","Funname":"rootWindow","Returntype":"void *","Args":""},{"Uniquefunname":"void * screenForWindow(QWindow * window)","Funname":"screenForWindow","Returntype":"void *","Args":"QWindow * window"},{"Uniquefunname":"void setAppTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"void setAppUserTime(QScreen * screen,xcb_timestamp_t time)","Funname":"setAppUserTime","Returntype":"void","Args":"QScreen * screen,xcb_timestamp_t time"},{"Uniquefunname":"Q_INVOKABLE void setParentRelativeBackPixmap(QWindow * window)","Funname":"setParentRelativeBackPixmap","Returntype":"Q_INVOKABLE void","Args":"QWindow * window"},{"Uniquefunname":"void setStartupId(const char *)","Funname":"setStartupId","Returntype":"void","Args":"const char *"},{"Uniquefunname":"void * startupId()","Funname":"startupId","Returntype":"void *","Args":""},{"Uniquefunname":"Q_INVOKABLE bool systemTrayAvailable(const QScreen * screen)","Funname":"systemTrayAvailable","Returntype":"Q_INVOKABLE bool","Args":"const QScreen * screen"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"Q_INVOKABLE QRect systemTrayWindowGlobalGeometry(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"Q_INVOKABLE QRect","Args":"const QWindow * window"},{"Uniquefunname":"Q_INVOKABLE bool systrayVisualHasAlphaChannel()","Funname":"systrayVisualHasAlphaChannel","Returntype":"Q_INVOKABLE bool","Args":""},{"Uniquefunname":"void * x11Screen()","Funname":"x11Screen","Returntype":"void *","Args":""}],"Records":[{"Name":"enum:ResourceType","Fields":["AppTime","AppUserTime","AtspiBus","CompositingEnabled","Connection","Display","GetTimestamp","RootWindow","Screen","ScreenAntialiasingEnabled","ScreenHintStyle","ScreenSubpixelType","StartupId","TrayWindow","X11Screen"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbobject.h","Functions":[{"Uniquefunname":"xcb_atom_t atom(QXcbAtom::Atom atom)","Funname":"atom","Returntype":"xcb_atom_t","Args":"QXcbAtom::Atom atom"},{"Uniquefunname":"QXcbConnection * connection()","Funname":"connection","Returntype":"QXcbConnection *","Args":""},{"Uniquefunname":"void setConnection(QXcbConnection * connection)","Funname":"setConnection","Returntype":"void","Args":"QXcbConnection * connection"},{"Uniquefunname":"xcb_connection_t * xcb_connection()","Funname":"xcb_connection","Returntype":"xcb_connection_t *","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbscreen.h","Functions":[{"Uniquefunname":"public QXcbVirtualDesktop(QXcbConnection * connection,xcb_screen_t * screen,int number)","Funname":"QXcbVirtualDesktop","Returntype":"public","Args":"QXcbConnection * connection,xcb_screen_t * screen,int number"},{"Uniquefunname":"void addScreen(QPlatformScreen * s)","Funname":"addScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"int antialiasingEnabled()","Funname":"antialiasingEnabled","Returntype":"int","Args":""},{"Uniquefunname":"QRect availableGeometry()","Funname":"availableGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"bool compositingActive()","Funname":"compositingActive","Returntype":"bool","Args":""},{"Uniquefunname":"xcb_randr_crtc_t crtc()","Funname":"crtc","Returntype":"xcb_randr_crtc_t","Args":""},{"Uniquefunname":"QPlatformCursor * cursor()","Funname":"cursor","Returntype":"QPlatformCursor *","Args":""},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"quint8 depthOfVisual(xcb_visualid_t)","Funname":"depthOfVisual","Returntype":"quint8","Args":"xcb_visualid_t"},{"Uniquefunname":"QImage format()","Funname":"format","Returntype":"QImage","Args":""},{"Uniquefunname":"QRect geometry()","Funname":"geometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QString getOutputName(xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"getOutputName","Returntype":"QString","Args":"xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"private getWorkArea()","Funname":"getWorkArea","Returntype":"private","Args":""},{"Uniquefunname":"QPixmap grabWindow(WId window,int x,int y,int width,int height)","Funname":"grabWindow","Returntype":"QPixmap","Args":"WId window,int x,int y,int width,int height"},{"Uniquefunname":"void handleScreenChange(xcb_randr_screen_change_notify_event_t * change_event)","Funname":"handleScreenChange","Returntype":"void","Args":"xcb_randr_screen_change_notify_event_t * change_event"},{"Uniquefunname":"void handleXFixesSelectionNotify(xcb_xfixes_selection_notify_event_t * notify_event)","Funname":"handleXFixesSelectionNotify","Returntype":"void","Args":"xcb_xfixes_selection_notify_event_t * notify_event"},{"Uniquefunname":"QFontEngine hintStyle()","Funname":"hintStyle","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"bool isPrimary()","Funname":"isPrimary","Returntype":"bool","Args":""},{"Uniquefunname":"QDpi logicalDpi()","Funname":"logicalDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"xcb_randr_mode_t mode()","Funname":"mode","Returntype":"xcb_randr_mode_t","Args":""},{"Uniquefunname":"QString name()","Funname":"name","Returntype":"QString","Args":""},{"Uniquefunname":"int number()","Funname":"number","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"xcb_randr_output_t output()","Funname":"output","Returntype":"xcb_randr_output_t","Args":""},{"Uniquefunname":"QSize physicalSize()","Funname":"physicalSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSizeF physicalSize()","Funname":"physicalSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"QSizeF physicalVirtualSize()","Funname":"physicalVirtualSize","Returntype":"QSizeF","Args":""},{"Uniquefunname":"qreal pixelDensity()","Funname":"pixelDensity","Returntype":"qreal","Args":""},{"Uniquefunname":"void readXResources()","Funname":"readXResources","Returntype":"void","Args":""},{"Uniquefunname":"qreal refreshRate()","Funname":"refreshRate","Returntype":"qreal","Args":""},{"Uniquefunname":"void removeScreen(QPlatformScreen * s)","Funname":"removeScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_window_t root()","Funname":"root","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"xcb_screen_t * screen()","Funname":"screen","Returntype":"xcb_screen_t *","Args":""},{"Uniquefunname":"QXcbScreen * screenAt(const QPoint \u0026 pos)","Funname":"screenAt","Returntype":"QXcbScreen *","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"int screenNumber()","Funname":"screenNumber","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e screens()","Funname":"screens","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"void sendStartupMessage(const QByteArray \u0026 message)","Funname":"sendStartupMessage","Returntype":"void","Args":"const QByteArray \u0026 message"},{"Uniquefunname":"void setCrtc(xcb_randr_crtc_t crtc)","Funname":"setCrtc","Returntype":"void","Args":"xcb_randr_crtc_t crtc"},{"Uniquefunname":"void setOutput(xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo)","Funname":"setOutput","Returntype":"void","Args":"xcb_randr_output_t outputId,xcb_randr_get_output_info_reply_t * outputInfo"},{"Uniquefunname":"void setPrimary(bool primary)","Funname":"setPrimary","Returntype":"void","Args":"bool primary"},{"Uniquefunname":"void setPrimaryScreen(QPlatformScreen * s)","Funname":"setPrimaryScreen","Returntype":"void","Args":"QPlatformScreen * s"},{"Uniquefunname":"void setScreens(QList\u003cQPlatformScreen * \u003e sl)","Funname":"setScreens","Returntype":"void","Args":"QList\u003cQPlatformScreen * \u003e sl"},{"Uniquefunname":"QSize size()","Funname":"size","Returntype":"QSize","Args":""},{"Uniquefunname":"QFontEngine subpixelType()","Funname":"subpixelType","Returntype":"QFontEngine","Args":""},{"Uniquefunname":"void subscribeToXFixesSelectionNotify()","Funname":"subscribeToXFixesSelectionNotify","Returntype":"void","Args":""},{"Uniquefunname":"QSurfaceFormat surfaceFormatFor(const QSurfaceFormat \u0026 format)","Funname":"surfaceFormatFor","Returntype":"QSurfaceFormat","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"bool syncRequestSupported()","Funname":"syncRequestSupported","Returntype":"bool","Args":""},{"Uniquefunname":"QWindow * topLevelAt(const QPoint \u0026 point)","Funname":"topLevelAt","Returntype":"QWindow *","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void updateAvailableGeometry()","Funname":"updateAvailableGeometry","Returntype":"void","Args":""},{"Uniquefunname":"void updateGeometry(const QRect \u0026 geom,uint8_t rotation)","Funname":"updateGeometry","Returntype":"void","Args":"const QRect \u0026 geom,uint8_t rotation"},{"Uniquefunname":"void updateRefreshRate(xcb_randr_mode_t mode)","Funname":"updateRefreshRate","Returntype":"void","Args":"xcb_randr_mode_t mode"},{"Uniquefunname":"void updateWorkArea()","Funname":"updateWorkArea","Returntype":"void","Args":""},{"Uniquefunname":"QXcbVirtualDesktop * virtualDesktop()","Funname":"virtualDesktop","Returntype":"QXcbVirtualDesktop *","Args":""},{"Uniquefunname":"int virtualDesktopNumberStatic(const QScreen * screen)","Funname":"virtualDesktopNumberStatic","Returntype":"int","Args":"const QScreen * screen"},{"Uniquefunname":"QDpi virtualDpi()","Funname":"virtualDpi","Returntype":"QDpi","Args":""},{"Uniquefunname":"QList\u003cQPlatformScreen * \u003e virtualSiblings()","Funname":"virtualSiblings","Returntype":"QList\u003cQPlatformScreen * \u003e","Args":""},{"Uniquefunname":"QSize virtualSize()","Funname":"virtualSize","Returntype":"QSize","Args":""},{"Uniquefunname":"const xcb_visualtype_t * visualForFormat(const QSurfaceFormat \u0026 format)","Funname":"visualForFormat","Returntype":"const xcb_visualtype_t *","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"const xcb_visualtype_t * visualForId(xcb_visualid_t)","Funname":"visualForId","Returntype":"const xcb_visualtype_t *","Args":"xcb_visualid_t"},{"Uniquefunname":"QString windowManagerName()","Funname":"windowManagerName","Returntype":"QString","Args":""},{"Uniquefunname":"void windowShown(QXcbWindow * window)","Funname":"windowShown","Returntype":"void","Args":"QXcbWindow * window"},{"Uniquefunname":"QRect workArea()","Funname":"workArea","Returntype":"QRect","Args":""},{"Uniquefunname":"private xResource(const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue)","Funname":"xResource","Returntype":"private","Args":"const QByteArray \u0026 identifier,const QByteArray \u0026 expectedIdentifier,QByteArray \u0026 stringValue"},{"Uniquefunname":"QXcbXSettings * xSettings()","Funname":"xSettings","Returntype":"QXcbXSettings *","Args":""},{"Uniquefunname":" ~QXcbScreen()","Funname":"~QXcbScreen","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbVirtualDesktop()","Funname":"~QXcbVirtualDesktop","Returntype":"","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbsessionmanager.h","Functions":[{"Uniquefunname":"public QXcbSessionManager(const QString \u0026 id,const QString \u0026 key)","Funname":"QXcbSessionManager","Returntype":"public","Args":"const QString \u0026 id,const QString \u0026 key"},{"Uniquefunname":"bool allowsErrorInteraction()","Funname":"allowsErrorInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"bool allowsInteraction()","Funname":"allowsInteraction","Returntype":"bool","Args":""},{"Uniquefunname":"void cancel()","Funname":"cancel","Returntype":"void","Args":""},{"Uniquefunname":"void exitEventLoop()","Funname":"exitEventLoop","Returntype":"void","Args":""},{"Uniquefunname":"void * handle()","Funname":"handle","Returntype":"void *","Args":""},{"Uniquefunname":"bool isPhase2()","Funname":"isPhase2","Returntype":"bool","Args":""},{"Uniquefunname":"void release()","Funname":"release","Returntype":"void","Args":""},{"Uniquefunname":"void requestPhase2()","Funname":"requestPhase2","Returntype":"void","Args":""},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QString \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QString \u0026 value"},{"Uniquefunname":"void setManagerProperty(const QString \u0026 name,const QStringList \u0026 value)","Funname":"setManagerProperty","Returntype":"void","Args":"const QString \u0026 name,const QStringList \u0026 value"},{"Uniquefunname":"void setSessionId(const QString \u0026 id)","Funname":"setSessionId","Returntype":"void","Args":"const QString \u0026 id"},{"Uniquefunname":"void setSessionKey(const QString \u0026 key)","Funname":"setSessionKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"virtual ~QXcbSessionManager()","Funname":"~QXcbSessionManager","Returntype":"virtual","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbsystemtraytracker.h","Functions":[{"Uniquefunname":"private QXcbSystemTrayTracker(QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection)","Funname":"QXcbSystemTrayTracker","Returntype":"private","Args":"QXcbConnection * connection,xcb_atom_t trayAtom,xcb_atom_t selection"},{"Uniquefunname":"Q_OBJECT public create(QXcbConnection * connection)","Funname":"create","Returntype":"Q_OBJECT public","Args":"QXcbConnection * connection"},{"Uniquefunname":"void emitSystemTrayWindowChanged()","Funname":"emitSystemTrayWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void handleDestroyNotifyEvent(const xcb_destroy_notify_event_t *)","Funname":"handleDestroyNotifyEvent","Returntype":"void","Args":"const xcb_destroy_notify_event_t *"},{"Uniquefunname":"xcb_window_t locateTrayWindow(const QXcbConnection * connection,xcb_atom_t selection)","Funname":"locateTrayWindow","Returntype":"xcb_window_t","Args":"const QXcbConnection * connection,xcb_atom_t selection"},{"Uniquefunname":"void notifyManagerClientMessageEvent(const xcb_client_message_event_t *)","Funname":"notifyManagerClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t *"},{"Uniquefunname":"void requestSystemTrayWindowDock(xcb_window_t window)","Funname":"requestSystemTrayWindowDock","Returntype":"void","Args":"xcb_window_t window"},{"Uniquefunname":"signals systemTrayWindowChanged(QScreen * screen)","Funname":"systemTrayWindowChanged","Returntype":"signals","Args":"QScreen * screen"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry(xcb_window_t window)","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":"xcb_window_t window"},{"Uniquefunname":"xcb_window_t trayWindow()","Funname":"trayWindow","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":"bool visualHasAlphaChannel()","Funname":"visualHasAlphaChannel","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbwindow.h","Functions":[{"Uniquefunname":"    QXcbForeignWindow(QWindow *window, WId nativeHandle)","Funname":"QXcbForeignWindow","Returntype":"public","Args":"QWindow * window,WId nativeHandle"},{"Uniquefunname":"    Q_DECLARE_FLAGS(NetWmStates, NetWmState)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"NetWmStates,NetWmState"},{"Uniquefunname":"void clearSyncWindowRequest()","Funname":"clearSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"bool compressExposeEvent(QRegion \u0026 exposeRegion)","Funname":"compressExposeEvent","Returntype":"bool","Args":"QRegion \u0026 exposeRegion"},{"Uniquefunname":"virtual void create()","Funname":"create","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected create()","Funname":"create","Returntype":"protected","Args":""},{"Uniquefunname":"virtual const xcb_visualtype_t * createVisual()","Funname":"createVisual","Returntype":"virtual const xcb_visualtype_t *","Args":""},{"Uniquefunname":"uint depth()","Funname":"depth","Returntype":"uint","Args":""},{"Uniquefunname":"virtual void destroy()","Funname":"destroy","Returntype":"virtual void","Args":""},{"Uniquefunname":"void doFocusIn()","Funname":"doFocusIn","Returntype":"void","Args":""},{"Uniquefunname":"void doFocusOut()","Funname":"doFocusOut","Returntype":"void","Args":""},{"Uniquefunname":"bool doStartSystemResize(const QPoint \u0026 globalPos,Qt::Corner corner)","Funname":"doStartSystemResize","Returntype":"bool","Args":"const QPoint \u0026 globalPos,Qt::Corner corner"},{"Uniquefunname":"QSurfaceFormat format()","Funname":"format","Returntype":"QSurfaceFormat","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void handleButtonPressEvent(const xcb_button_press_event_t * event)","Funname":"handleButtonPressEvent","Returntype":"void","Args":"const xcb_button_press_event_t * event"},{"Uniquefunname":"void handleButtonReleaseEvent(const xcb_button_release_event_t * event)","Funname":"handleButtonReleaseEvent","Returntype":"void","Args":"const xcb_button_release_event_t * event"},{"Uniquefunname":"void handleClientMessageEvent(const xcb_client_message_event_t * event)","Funname":"handleClientMessageEvent","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleConfigureNotifyEvent(const xcb_configure_notify_event_t * event)","Funname":"handleConfigureNotifyEvent","Returntype":"void","Args":"const xcb_configure_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(const xcb_enter_notify_event_t * event)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"const xcb_enter_notify_event_t * event"},{"Uniquefunname":"void handleEnterNotifyEvent(int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleEnterNotifyEvent","Returntype":"void","Args":"int event_x,int event_y,int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleExposeEvent(const xcb_expose_event_t * event)","Funname":"handleExposeEvent","Returntype":"void","Args":"const xcb_expose_event_t * event"},{"Uniquefunname":"void handleFocusInEvent(const xcb_focus_in_event_t * event)","Funname":"handleFocusInEvent","Returntype":"void","Args":"const xcb_focus_in_event_t * event"},{"Uniquefunname":"void handleFocusOutEvent(const xcb_focus_out_event_t * event)","Funname":"handleFocusOutEvent","Returntype":"void","Args":"const xcb_focus_out_event_t * event"},{"Uniquefunname":"bool handleGenericEvent(xcb_generic_event_t * event,long * result)","Funname":"handleGenericEvent","Returntype":"bool","Args":"xcb_generic_event_t * event,long * result"},{"Uniquefunname":"void handleLeaveNotifyEvent(const xcb_leave_notify_event_t * event)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"const xcb_leave_notify_event_t * event"},{"Uniquefunname":"void handleLeaveNotifyEvent(int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp)","Funname":"handleLeaveNotifyEvent","Returntype":"void","Args":"int root_x,int root_y,quint8 mode,quint8 detail,xcb_timestamp_t timestamp"},{"Uniquefunname":"void handleMapNotifyEvent(const xcb_map_notify_event_t * event)","Funname":"handleMapNotifyEvent","Returntype":"void","Args":"const xcb_map_notify_event_t * event"},{"Uniquefunname":"void handleMotionNotifyEvent(const xcb_motion_notify_event_t * event)","Funname":"handleMotionNotifyEvent","Returntype":"void","Args":"const xcb_motion_notify_event_t * event"},{"Uniquefunname":"void handleMouseEvent(xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source)","Funname":"handleMouseEvent","Returntype":"void","Args":"xcb_timestamp_t time,const QPoint \u0026 local,const QPoint \u0026 global,Qt::KeyboardModifiers modifiers,Qt::MouseEventSource source"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"void handleUnmapNotifyEvent(const xcb_unmap_notify_event_t * event)","Funname":"handleUnmapNotifyEvent","Returntype":"void","Args":"const xcb_unmap_notify_event_t * event"},{"Uniquefunname":"void handleXEmbedMessage(const xcb_client_message_event_t * event)","Funname":"handleXEmbedMessage","Returntype":"void","Args":"const xcb_client_message_event_t * event"},{"Uniquefunname":"void handleXIEnterLeave(xcb_ge_event_t *)","Funname":"handleXIEnterLeave","Returntype":"void","Args":"xcb_ge_event_t *"},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"QImage imageFormat()","Funname":"imageFormat","Returntype":"QImage","Args":""},{"Uniquefunname":"bool imageNeedsRgbSwap()","Funname":"imageNeedsRgbSwap","Returntype":"bool","Args":""},{"Uniquefunname":"QXcbScreen * initialScreen()","Funname":"initialScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"bool isAlertState()","Funname":"isAlertState","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEmbedded()","Funname":"isEmbedded","Returntype":"bool","Args":""},{"Uniquefunname":"bool isExposed()","Funname":"isExposed","Returntype":"bool","Args":""},{"Uniquefunname":"bool isForeignWindow()","Funname":"isForeignWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void lower()","Funname":"lower","Returntype":"void","Args":""},{"Uniquefunname":"QPoint mapFromGlobal(const QPoint \u0026 pos)","Funname":"mapFromGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"QPoint mapToGlobal(const QPoint \u0026 pos)","Funname":"mapToGlobal","Returntype":"QPoint","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"bool needsSync()","Funname":"needsSync","Returntype":"bool","Args":""},{"Uniquefunname":"NetWmStates netWmStates()","Funname":"netWmStates","Returntype":"NetWmStates","Args":""},{"Uniquefunname":"QXcbScreen * parentScreen()","Funname":"parentScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"void postSyncWindowRequest()","Funname":"postSyncWindowRequest","Returntype":"void","Args":""},{"Uniquefunname":"void propagateSizeHints()","Funname":"propagateSizeHints","Returntype":"void","Args":""},{"Uniquefunname":"void raise()","Funname":"raise","Returntype":"void","Args":""},{"Uniquefunname":"bool relayFocusToModalWindow()","Funname":"relayFocusToModalWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void requestActivateWindow()","Funname":"requestActivateWindow","Returntype":"void","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDock()","Funname":"requestSystemTrayWindowDock","Returntype":"bool","Args":""},{"Uniquefunname":"bool requestSystemTrayWindowDockStatic(const QWindow * window)","Funname":"requestSystemTrayWindowDockStatic","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"protected resolveFormat(const QSurfaceFormat \u0026 format)","Funname":"resolveFormat","Returntype":"protected","Args":"const QSurfaceFormat \u0026 format"},{"Uniquefunname":"void setAlertState(bool enabled)","Funname":"setAlertState","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setCursor(xcb_cursor_t cursor,bool isBitmapCursor)","Funname":"setCursor","Returntype":"void","Args":"xcb_cursor_t cursor,bool isBitmapCursor"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool setKeyboardGrabEnabled(bool grab)","Funname":"setKeyboardGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setMask(const QRegion \u0026 region)","Funname":"setMask","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void setMotifWindowFlags(Qt::WindowFlags flags)","Funname":"setMotifWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"bool setMouseGrabEnabled(bool grab)","Funname":"setMouseGrabEnabled","Returntype":"bool","Args":"bool grab"},{"Uniquefunname":"void setNetWmStateWindowFlags(Qt::WindowFlags flags)","Funname":"setNetWmStateWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setNetWmStates(NetWmStates)","Funname":"setNetWmStates","Returntype":"void","Args":"NetWmStates"},{"Uniquefunname":"void setOpacity(qreal level)","Funname":"setOpacity","Returntype":"void","Args":"qreal level"},{"Uniquefunname":"void setParent(const QPlatformWindow * window)","Funname":"setParent","Returntype":"void","Args":"const QPlatformWindow * window"},{"Uniquefunname":"void setParentRelativeBackPixmap()","Funname":"setParentRelativeBackPixmap","Returntype":"void","Args":""},{"Uniquefunname":"void setParentRelativeBackPixmapStatic(QWindow * window)","Funname":"setParentRelativeBackPixmapStatic","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void setTransparentForMouseEvents(bool transparent)","Funname":"setTransparentForMouseEvents","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags flags)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setWindowIcon(const QIcon \u0026 icon)","Funname":"setWindowIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setWindowIconText(const QString \u0026 title)","Funname":"setWindowIconText","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWindowIconTextStatic(QWindow * window,const QString \u0026 text)","Funname":"setWindowIconTextStatic","Returntype":"void","Args":"QWindow * window,const QString \u0026 text"},{"Uniquefunname":"void setWindowState(Qt::WindowState state)","Funname":"setWindowState","Returntype":"void","Args":"Qt::WindowState state"},{"Uniquefunname":"void setWindowTitle(const QString \u0026 title)","Funname":"setWindowTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWmWindowRole(const QByteArray \u0026 role)","Funname":"setWmWindowRole","Returntype":"void","Args":"const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowRoleStatic(QWindow * window,const QByteArray \u0026 role)","Funname":"setWmWindowRoleStatic","Returntype":"void","Args":"QWindow * window,const QByteArray \u0026 role"},{"Uniquefunname":"void setWmWindowType(QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags)","Funname":"setWmWindowType","Returntype":"void","Args":"QXcbWindowFunctions::WmWindowTypes types,Qt::WindowFlags flags"},{"Uniquefunname":"void setWmWindowTypeStatic(QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes)","Funname":"setWmWindowTypeStatic","Returntype":"void","Args":"QWindow * window,QXcbWindowFunctions::WmWindowTypes windowTypes"},{"Uniquefunname":"void show()","Funname":"show","Returntype":"void","Args":""},{"Uniquefunname":"bool startSystemResize(const QPoint \u0026 pos,Qt::Corner corner)","Funname":"startSystemResize","Returntype":"bool","Args":"const QPoint \u0026 pos,Qt::Corner corner"},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometry()","Funname":"systemTrayWindowGlobalGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"QRect systemTrayWindowGlobalGeometryStatic(const QWindow * window)","Funname":"systemTrayWindowGlobalGeometryStatic","Returntype":"QRect","Args":"const QWindow * window"},{"Uniquefunname":"QXcbWindow * toWindow()","Funname":"toWindow","Returntype":"QXcbWindow *","Args":""},{"Uniquefunname":"void updateDoesNotAcceptFocus(bool doesNotAcceptFocus)","Funname":"updateDoesNotAcceptFocus","Returntype":"void","Args":"bool doesNotAcceptFocus"},{"Uniquefunname":"void updateMotifWmHintsBeforeMap()","Funname":"updateMotifWmHintsBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmStateBeforeMap()","Funname":"updateNetWmStateBeforeMap","Returntype":"void","Args":""},{"Uniquefunname":"void updateNetWmUserTime(xcb_timestamp_t timestamp)","Funname":"updateNetWmUserTime","Returntype":"void","Args":"xcb_timestamp_t timestamp"},{"Uniquefunname":"public Q_SLOTS updateSyncRequestCounter()","Funname":"updateSyncRequestCounter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"uint visualId()","Funname":"visualId","Returntype":"uint","Args":""},{"Uniquefunname":"uint visualIdStatic(QWindow * window)","Funname":"visualIdStatic","Returntype":"uint","Args":"QWindow * window"},{"Uniquefunname":"WId winId()","Funname":"winId","Returntype":"WId","Args":""},{"Uniquefunname":"void windowEvent(QEvent * event)","Funname":"windowEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QRect windowToWmGeometry(QRect r)","Funname":"windowToWmGeometry","Returntype":"QRect","Args":"QRect r"},{"Uniquefunname":"QXcbWindowFunctions wmWindowTypes()","Funname":"wmWindowTypes","Returntype":"QXcbWindowFunctions","Args":""},{"Uniquefunname":"QXcbScreen * xcbScreen()","Funname":"xcbScreen","Returntype":"QXcbScreen *","Args":""},{"Uniquefunname":"xcb_window_t xcb_window()","Funname":"xcb_window","Returntype":"xcb_window_t","Args":""},{"Uniquefunname":" ~QXcbForeignWindow()","Funname":"~QXcbForeignWindow","Returntype":"","Args":""},{"Uniquefunname":" ~QXcbWindow()","Funname":"~QXcbWindow","Returntype":"","Args":""}],"Records":[{"Name":"enum:NetWmState","Fields":["NetWmStateAbove","NetWmStateBelow","NetWmStateDemandsAttention","NetWmStateFullScreen","NetWmStateMaximizedHorz","NetWmStateMaximizedVert","NetWmStateModal","NetWmStateStaysOnTop"]},{"Name":"enum:SyncState","Fields":["NoSyncNeeded","SyncAndConfigureReceived","SyncReceived"]}]}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbwmsupport.h","Functions":[{"Uniquefunname":"public QXcbWMSupport(QXcbConnection * c)","Funname":"QXcbWMSupport","Returntype":"public","Args":"QXcbConnection * c"},{"Uniquefunname":"bool isSupportedByWM(xcb_atom_t atom)","Funname":"isSupportedByWM","Returntype":"bool","Args":"xcb_atom_t atom"},{"Uniquefunname":"void updateNetWMAtoms()","Funname":"updateNetWMAtoms","Returntype":"void","Args":""},{"Uniquefunname":"void updateVirtualRoots()","Funname":"updateVirtualRoots","Returntype":"void","Args":""},{"Uniquefunname":"const QVector\u003cxcb_window_t\u003e \u0026 virtualRoots()","Funname":"virtualRoots","Returntype":"const QVector\u003cxcb_window_t\u003e \u0026","Args":""}],"Records":null}
{"Filepath":"xcb/libqt5xcbqpa-dev/5.9.4/qxcbxsettings.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PRIVATE(QXcbXSettings)","Funname":"Q_DECLARE_PRIVATE","Returntype":"","Args":"QXcbXSettings"},{"Uniquefunname":"void handlePropertyNotifyEvent(const xcb_property_notify_event_t * event)","Funname":"handlePropertyNotifyEvent","Returntype":"void","Args":"const xcb_property_notify_event_t * event"},{"Uniquefunname":"bool initialized()","Funname":"initialized","Returntype":"bool","Args":""},{"Uniquefunname":"void registerCallbackForProperty(const QByteArray \u0026 property,PropertyChangeFunc func,void * handle)","Funname":"registerCallbackForProperty","Returntype":"void","Args":"const QByteArray \u0026 property,PropertyChangeFunc func,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(const QByteArray \u0026 property,void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"const QByteArray \u0026 property,void * handle"},{"Uniquefunname":"void removeCallbackForHandle(void * handle)","Funname":"removeCallbackForHandle","Returntype":"void","Args":"void * handle"},{"Uniquefunname":"QVariant setting(const QByteArray \u0026 property)","Funname":"setting","Returntype":"QVariant","Args":"const QByteArray \u0026 property"},{"Uniquefunname":" ~QXcbXSettings()","Funname":"~QXcbXSettings","Returntype":"","Args":""}],"Records":null}
